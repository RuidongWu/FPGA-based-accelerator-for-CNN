// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Layer1_ReadBRAM,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xazu3eg-sfvc784-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.986750,HLS_SYN_LAT=3282,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=337,HLS_SYN_LUT=649,HLS_VERSION=2018_3}" *)

module Layer1_ReadBRAM (
        ap_clk,
        ap_rst_n,
        full_flag,
        full_flag_ap_vld,
        full_flag_ap_ack,
        f_Data_address0,
        f_Data_ce0,
        f_Data_q0,
        a_Data_TDATA,
        a_Data_TVALID,
        a_Data_TREADY
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_pp0_stage0 = 9'd2;
parameter    ap_ST_fsm_pp0_stage1 = 9'd4;
parameter    ap_ST_fsm_pp0_stage2 = 9'd8;
parameter    ap_ST_fsm_state7 = 9'd16;
parameter    ap_ST_fsm_pp1_stage0 = 9'd32;
parameter    ap_ST_fsm_pp1_stage1 = 9'd64;
parameter    ap_ST_fsm_pp1_stage2 = 9'd128;
parameter    ap_ST_fsm_state13 = 9'd256;

input   ap_clk;
input   ap_rst_n;
input   full_flag;
input   full_flag_ap_vld;
output   full_flag_ap_ack;
output  [8:0] f_Data_address0;
output   f_Data_ce0;
input  [31:0] f_Data_q0;
output  [31:0] a_Data_TDATA;
output   a_Data_TVALID;
input   a_Data_TREADY;

reg full_flag_ap_ack;
reg[8:0] f_Data_address0;
reg f_Data_ce0;

 reg    ap_rst_n_inv;
reg   [31:0] a_Data_1_data_in;
reg   [31:0] a_Data_1_data_out;
reg    a_Data_1_vld_in;
wire    a_Data_1_vld_out;
wire    a_Data_1_ack_in;
wire    a_Data_1_ack_out;
reg   [31:0] a_Data_1_payload_A;
reg   [31:0] a_Data_1_payload_B;
reg    a_Data_1_sel_rd;
reg    a_Data_1_sel_wr;
wire    a_Data_1_sel;
wire    a_Data_1_load_A;
wire    a_Data_1_load_B;
reg   [1:0] a_Data_1_state;
wire    a_Data_1_state_cmp_full;
reg    full_flag_blk_n;
(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state7;
reg    a_Data_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] exitcond_flatten_reg_531;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_flatten_reg_531_pp0_iter1_reg;
wire    ap_CS_fsm_pp1_stage1;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_pp1_stage1;
reg   [0:0] exitcond_flatten8_reg_602;
wire    ap_CS_fsm_pp1_stage2;
wire    ap_block_pp1_stage2;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] exitcond_flatten8_reg_602_pp1_iter1_reg;
reg   [9:0] indvar_flatten_reg_171;
reg   [1:0] k_reg_182;
reg   [9:0] indvar_flatten6_reg_193;
reg   [1:0] k2_reg_204;
wire    ap_block_state3_pp0_stage1_iter0;
reg    ap_block_state3_io;
wire    ap_block_state6_pp0_stage1_iter1;
reg    ap_block_state6_io;
reg    ap_block_pp0_stage1_11001;
wire    ap_block_state9_pp1_stage1_iter0;
reg    ap_block_state9_io;
wire    ap_block_state12_pp1_stage1_iter1;
reg    ap_block_state12_io;
reg    ap_block_pp1_stage1_11001;
reg   [23:0] reg_240;
reg   [15:0] reg_244;
wire   [0:0] exitcond_flatten_fu_263_p2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
reg    ap_block_state5_io;
reg    ap_block_pp0_stage0_11001;
wire   [9:0] indvar_flatten_next_fu_269_p2;
reg   [9:0] indvar_flatten_next_reg_535;
wire   [1:0] k_mid2_fu_290_p3;
reg   [1:0] k_mid2_reg_540;
wire  signed [15:0] t_addr_fu_298_p5;
reg  signed [15:0] t_addr_reg_545;
wire   [31:0] tmp_s_fu_353_p3;
wire    ap_block_state4_pp0_stage2_iter0;
reg    ap_block_state4_io;
reg    ap_block_pp0_stage2_11001;
wire   [15:0] tmp_8_fu_362_p1;
reg   [15:0] tmp_8_reg_566;
wire   [1:0] k_1_fu_366_p2;
reg   [1:0] k_1_reg_571;
wire   [31:0] tmp_11_fu_371_p3;
wire   [0:0] exitcond_flatten8_fu_394_p2;
wire    ap_block_state8_pp1_stage0_iter0;
wire    ap_block_state11_pp1_stage0_iter1;
reg    ap_block_state11_io;
reg    ap_block_pp1_stage0_11001;
wire   [9:0] indvar_flatten_next7_fu_400_p2;
reg   [9:0] indvar_flatten_next7_reg_606;
wire   [1:0] k2_mid2_fu_421_p3;
reg   [1:0] k2_mid2_reg_611;
wire  signed [15:0] t_addr_1_fu_429_p5;
reg  signed [15:0] t_addr_1_reg_616;
wire   [31:0] tmp_15_fu_484_p3;
wire    ap_block_state10_pp1_stage2_iter0;
reg    ap_block_state10_io;
reg    ap_block_pp1_stage2_11001;
wire   [15:0] tmp_16_fu_493_p1;
reg   [15:0] tmp_16_reg_637;
wire   [1:0] k_2_fu_497_p2;
reg   [1:0] k_2_reg_642;
wire   [31:0] tmp_18_fu_502_p3;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage2_subdone;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state8;
reg    ap_block_pp1_stage2_subdone;
reg    ap_block_pp1_stage1_subdone;
reg   [9:0] ap_phi_mux_indvar_flatten_phi_fu_175_p4;
reg   [1:0] ap_phi_mux_k_phi_fu_186_p4;
reg   [9:0] ap_phi_mux_indvar_flatten6_phi_fu_197_p4;
reg   [1:0] ap_phi_mux_k2_phi_fu_208_p4;
wire  signed [63:0] tmp_1_fu_310_p1;
wire  signed [63:0] tmp_4_fu_324_p1;
wire  signed [63:0] tmp_9_fu_441_p1;
wire  signed [63:0] tmp_7_fu_455_p1;
reg   [15:0] s_addr_2_fu_96;
wire   [15:0] s_addr_0_fu_329_p2;
reg   [15:0] s_addr_2_2_fu_100;
reg   [15:0] s_addr_2_1_fu_104;
reg   [15:0] s_addr_2_3_fu_108;
wire   [15:0] s_addr_0_1_fu_460_p2;
reg   [15:0] s_addr_2_5_fu_112;
reg   [15:0] s_addr_2_4_fu_116;
wire    ap_block_pp0_stage1_01001;
wire    ap_block_pp0_stage2_01001;
wire    ap_block_pp0_stage0_01001;
wire    ap_block_pp1_stage1_01001;
wire    ap_block_pp1_stage2_01001;
wire    ap_block_pp1_stage0_01001;
wire   [0:0] exitcond_fu_284_p2;
wire   [1:0] t_addr_fu_298_p4;
wire  signed [16:0] tmp_2_cast_fu_315_p1;
wire   [16:0] tmp_3_fu_318_p2;
wire   [7:0] tmp_fu_349_p1;
wire   [0:0] exitcond1_fu_415_p2;
wire   [1:0] t_addr_1_fu_429_p4;
wire  signed [16:0] tmp_cast_fu_446_p1;
wire   [16:0] tmp_6_fu_449_p2;
wire   [7:0] tmp_13_fu_480_p1;
reg   [8:0] ap_NS_fsm;
wire    ap_CS_fsm_state13;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 a_Data_1_sel_rd = 1'b0;
#0 a_Data_1_sel_wr = 1'b0;
#0 a_Data_1_state = 2'd0;
#0 ap_CS_fsm = 9'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
end

Layer1_ReadBRAM_mbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
Layer1_ReadBRAM_mbkb_U1(
    .din0(s_addr_2_fu_96),
    .din1(s_addr_2_2_fu_100),
    .din2(s_addr_2_1_fu_104),
    .din3(t_addr_fu_298_p4),
    .dout(t_addr_fu_298_p5)
);

Layer1_ReadBRAM_mbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
Layer1_ReadBRAM_mbkb_U2(
    .din0(s_addr_2_3_fu_108),
    .din1(s_addr_2_5_fu_112),
    .din2(s_addr_2_4_fu_116),
    .din3(t_addr_1_fu_429_p4),
    .dout(t_addr_1_fu_429_p5)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        a_Data_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == a_Data_1_ack_out) & (1'b1 == a_Data_1_vld_out))) begin
            a_Data_1_sel_rd <= ~a_Data_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        a_Data_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == a_Data_1_ack_in) & (1'b1 == a_Data_1_vld_in))) begin
            a_Data_1_sel_wr <= ~a_Data_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        a_Data_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == a_Data_1_state) & (1'b0 == a_Data_1_vld_in)) | ((2'd3 == a_Data_1_state) & (1'b0 == a_Data_1_vld_in) & (1'b1 == a_Data_1_ack_out)))) begin
            a_Data_1_state <= 2'd2;
        end else if ((((2'd1 == a_Data_1_state) & (1'b0 == a_Data_1_ack_out)) | ((2'd3 == a_Data_1_state) & (1'b0 == a_Data_1_ack_out) & (1'b1 == a_Data_1_vld_in)))) begin
            a_Data_1_state <= 2'd1;
        end else if (((~((1'b0 == a_Data_1_vld_in) & (1'b1 == a_Data_1_ack_out)) & ~((1'b0 == a_Data_1_ack_out) & (1'b1 == a_Data_1_vld_in)) & (2'd3 == a_Data_1_state)) | ((2'd1 == a_Data_1_state) & (1'b1 == a_Data_1_ack_out)) | ((2'd2 == a_Data_1_state) & (1'b1 == a_Data_1_vld_in)))) begin
            a_Data_1_state <= 2'd3;
        end else begin
            a_Data_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (full_flag_ap_vld == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (full_flag_ap_vld == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state8) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state7) & (full_flag_ap_vld == 1'b1))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp1_stage2_subdone) & (1'b1 == ap_CS_fsm_pp1_stage2)) | ((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1)))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((1'b1 == ap_CS_fsm_state7) & (full_flag_ap_vld == 1'b1))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten8_reg_602 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        indvar_flatten6_reg_193 <= indvar_flatten_next7_reg_606;
    end else if (((1'b1 == ap_CS_fsm_state7) & (full_flag_ap_vld == 1'b1))) begin
        indvar_flatten6_reg_193 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_531 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_171 <= indvar_flatten_next_reg_535;
    end else if (((1'b1 == ap_CS_fsm_state1) & (full_flag_ap_vld == 1'b1))) begin
        indvar_flatten_reg_171 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten8_reg_602 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        k2_reg_204 <= k_2_reg_642;
    end else if (((1'b1 == ap_CS_fsm_state7) & (full_flag_ap_vld == 1'b1))) begin
        k2_reg_204 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_531 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        k_reg_182 <= k_1_reg_571;
    end else if (((1'b1 == ap_CS_fsm_state1) & (full_flag_ap_vld == 1'b1))) begin
        k_reg_182 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~(k_mid2_reg_540 == 2'd1) & ~(k_mid2_reg_540 == 2'd0) & (exitcond_flatten_reg_531 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        s_addr_2_1_fu_104 <= s_addr_0_fu_329_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (full_flag_ap_vld == 1'b1))) begin
        s_addr_2_1_fu_104 <= 16'd14;
    end
end

always @ (posedge ap_clk) begin
    if (((k_mid2_reg_540 == 2'd1) & (exitcond_flatten_reg_531 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        s_addr_2_2_fu_100 <= s_addr_0_fu_329_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (full_flag_ap_vld == 1'b1))) begin
        s_addr_2_2_fu_100 <= 16'd7;
    end
end

always @ (posedge ap_clk) begin
    if (((k2_mid2_reg_611 == 2'd0) & (exitcond_flatten8_reg_602 == 1'd0) & (1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        s_addr_2_3_fu_108 <= s_addr_0_1_fu_460_p2;
    end else if (((1'b1 == ap_CS_fsm_state7) & (full_flag_ap_vld == 1'b1))) begin
        s_addr_2_3_fu_108 <= 16'd196;
    end
end

always @ (posedge ap_clk) begin
    if ((~(k2_mid2_reg_611 == 2'd1) & ~(k2_mid2_reg_611 == 2'd0) & (exitcond_flatten8_reg_602 == 1'd0) & (1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        s_addr_2_4_fu_116 <= s_addr_0_1_fu_460_p2;
    end else if (((1'b1 == ap_CS_fsm_state7) & (full_flag_ap_vld == 1'b1))) begin
        s_addr_2_4_fu_116 <= 16'd210;
    end
end

always @ (posedge ap_clk) begin
    if (((k2_mid2_reg_611 == 2'd1) & (exitcond_flatten8_reg_602 == 1'd0) & (1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        s_addr_2_5_fu_112 <= s_addr_0_1_fu_460_p2;
    end else if (((1'b1 == ap_CS_fsm_state7) & (full_flag_ap_vld == 1'b1))) begin
        s_addr_2_5_fu_112 <= 16'd203;
    end
end

always @ (posedge ap_clk) begin
    if (((k_mid2_reg_540 == 2'd0) & (exitcond_flatten_reg_531 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        s_addr_2_fu_96 <= s_addr_0_fu_329_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (full_flag_ap_vld == 1'b1))) begin
        s_addr_2_fu_96 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == a_Data_1_load_A)) begin
        a_Data_1_payload_A <= a_Data_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == a_Data_1_load_B)) begin
        a_Data_1_payload_B <= a_Data_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        exitcond_flatten8_reg_602 <= exitcond_flatten8_fu_394_p2;
        exitcond_flatten8_reg_602_pp1_iter1_reg <= exitcond_flatten8_reg_602;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_flatten_reg_531 <= exitcond_flatten_fu_263_p2;
        exitcond_flatten_reg_531_pp0_iter1_reg <= exitcond_flatten_reg_531;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        indvar_flatten_next7_reg_606 <= indvar_flatten_next7_fu_400_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten_next_reg_535 <= indvar_flatten_next_fu_269_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten8_fu_394_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        k2_mid2_reg_611 <= k2_mid2_fu_421_p3;
        t_addr_1_reg_616 <= t_addr_1_fu_429_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_531 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        k_1_reg_571 <= k_1_fu_366_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten8_reg_602 == 1'd0) & (1'b0 == ap_block_pp1_stage2_11001) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        k_2_reg_642 <= k_2_fu_497_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_263_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        k_mid2_reg_540 <= k_mid2_fu_290_p3;
        t_addr_reg_545 <= t_addr_fu_298_p5;
    end
end

always @ (posedge ap_clk) begin
    if ((((exitcond_flatten8_reg_602 == 1'd0) & (1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)) | ((exitcond_flatten_reg_531 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        reg_240 <= {{f_Data_q0[31:8]}};
        reg_244 <= {{f_Data_q0[31:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten8_reg_602 == 1'd0) & (1'b0 == ap_block_pp1_stage2_11001) & (1'b1 == ap_CS_fsm_pp1_stage2))) begin
        tmp_16_reg_637 <= tmp_16_fu_493_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_531 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        tmp_8_reg_566 <= tmp_8_fu_362_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_01001) & (exitcond_flatten8_reg_602 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        a_Data_1_data_in = tmp_18_fu_502_p3;
    end else if (((1'b0 == ap_block_pp1_stage2_01001) & (exitcond_flatten8_reg_602 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        a_Data_1_data_in = tmp_15_fu_484_p3;
    end else if (((exitcond_flatten_reg_531 == 1'd0) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_Data_1_data_in = tmp_11_fu_371_p3;
    end else if (((exitcond_flatten_reg_531 == 1'd0) & (1'b0 == ap_block_pp0_stage2_01001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        a_Data_1_data_in = tmp_s_fu_353_p3;
    end else if ((((exitcond_flatten8_reg_602 == 1'd0) & (1'b0 == ap_block_pp1_stage1_01001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)) | ((exitcond_flatten_reg_531 == 1'd0) & (1'b0 == ap_block_pp0_stage1_01001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        a_Data_1_data_in = f_Data_q0;
    end else begin
        a_Data_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == a_Data_1_sel)) begin
        a_Data_1_data_out = a_Data_1_payload_B;
    end else begin
        a_Data_1_data_out = a_Data_1_payload_A;
    end
end

always @ (*) begin
    if ((((exitcond_flatten8_reg_602 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((exitcond_flatten8_reg_602 == 1'd0) & (1'b0 == ap_block_pp1_stage2_11001) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((exitcond_flatten8_reg_602 == 1'd0) & (1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)) | ((exitcond_flatten_reg_531 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((exitcond_flatten_reg_531 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((exitcond_flatten_reg_531 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        a_Data_1_vld_in = 1'b1;
    end else begin
        a_Data_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond_flatten8_reg_602 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0)) | ((exitcond_flatten8_reg_602 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage2)) | ((exitcond_flatten8_reg_602_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1)) | ((exitcond_flatten8_reg_602 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1)) | ((exitcond_flatten_reg_531 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((exitcond_flatten_reg_531 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2)) | ((exitcond_flatten_reg_531_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1)) | ((exitcond_flatten_reg_531 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1)))) begin
        a_Data_TDATA_blk_n = a_Data_1_state[1'd1];
    end else begin
        a_Data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_263_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_flatten8_fu_394_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state8 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state8 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten8_reg_602 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        ap_phi_mux_indvar_flatten6_phi_fu_197_p4 = indvar_flatten_next7_reg_606;
    end else begin
        ap_phi_mux_indvar_flatten6_phi_fu_197_p4 = indvar_flatten6_reg_193;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_531 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_175_p4 = indvar_flatten_next_reg_535;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_175_p4 = indvar_flatten_reg_171;
    end
end

always @ (*) begin
    if (((exitcond_flatten8_reg_602 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        ap_phi_mux_k2_phi_fu_208_p4 = k_2_reg_642;
    end else begin
        ap_phi_mux_k2_phi_fu_208_p4 = k2_reg_204;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_531 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_k_phi_fu_186_p4 = k_1_reg_571;
    end else begin
        ap_phi_mux_k_phi_fu_186_p4 = k_reg_182;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1))) begin
        f_Data_address0 = tmp_7_fu_455_p1;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        f_Data_address0 = tmp_9_fu_441_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        f_Data_address0 = tmp_4_fu_324_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        f_Data_address0 = tmp_1_fu_310_p1;
    end else begin
        f_Data_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        f_Data_ce0 = 1'b1;
    end else begin
        f_Data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (full_flag_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state7) & (full_flag_ap_vld == 1'b1)))) begin
        full_flag_ap_ack = 1'b1;
    end else begin
        full_flag_ap_ack = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state7))) begin
        full_flag_blk_n = full_flag_ap_vld;
    end else begin
        full_flag_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (full_flag_ap_vld == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond_flatten_fu_263_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((exitcond_flatten_fu_263_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b0)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (full_flag_ap_vld == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((exitcond_flatten8_fu_394_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if (((exitcond_flatten8_fu_394_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((~((1'b0 == ap_block_pp1_stage1_subdone) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b0)) & (1'b0 == ap_block_pp1_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end else if (((1'b0 == ap_block_pp1_stage1_subdone) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_pp1_stage2 : begin
            if ((1'b0 == ap_block_pp1_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == a_Data_1_ack_in) & (a_Data_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_Data_1_ack_in = a_Data_1_state[1'd1];

assign a_Data_1_ack_out = a_Data_TREADY;

assign a_Data_1_load_A = (~a_Data_1_sel_wr & a_Data_1_state_cmp_full);

assign a_Data_1_load_B = (a_Data_1_state_cmp_full & a_Data_1_sel_wr);

assign a_Data_1_sel = a_Data_1_sel_rd;

assign a_Data_1_state_cmp_full = ((a_Data_1_state != 2'd1) ? 1'b1 : 1'b0);

assign a_Data_1_vld_out = a_Data_1_state[1'd0];

assign a_Data_TDATA = a_Data_1_data_out;

assign a_Data_TVALID = a_Data_1_state[1'd0];

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp1_stage2 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((1'b1 == ap_block_state6_io) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b1 == ap_block_state3_io) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((1'b1 == ap_block_state6_io) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b1 == ap_block_state3_io) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((1'b1 == ap_block_state11_io) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((1'b1 == ap_block_state11_io) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage1_11001 = (((1'b1 == ap_block_state12_io) & (ap_enable_reg_pp1_iter1 == 1'b1)) | ((1'b1 == ap_block_state9_io) & (ap_enable_reg_pp1_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage1_subdone = (((1'b1 == ap_block_state12_io) & (ap_enable_reg_pp1_iter1 == 1'b1)) | ((1'b1 == ap_block_state9_io) & (ap_enable_reg_pp1_iter0 == 1'b1)));
end

assign ap_block_pp1_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage2_11001 = ((1'b1 == ap_block_state10_io) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage2_subdone = ((1'b1 == ap_block_state10_io) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_state10_io = ((exitcond_flatten8_reg_602 == 1'd0) & (1'b0 == a_Data_1_ack_in));
end

assign ap_block_state10_pp1_stage2_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_io = ((exitcond_flatten8_reg_602 == 1'd0) & (1'b0 == a_Data_1_ack_in));
end

assign ap_block_state11_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state12_io = ((exitcond_flatten8_reg_602_pp1_iter1_reg == 1'd0) & (1'b0 == a_Data_1_ack_in));
end

assign ap_block_state12_pp1_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((exitcond_flatten_reg_531 == 1'd0) & (1'b0 == a_Data_1_ack_in));
end

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = ((exitcond_flatten_reg_531 == 1'd0) & (1'b0 == a_Data_1_ack_in));
end

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = ((exitcond_flatten_reg_531 == 1'd0) & (1'b0 == a_Data_1_ack_in));
end

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_io = ((exitcond_flatten_reg_531_pp0_iter1_reg == 1'd0) & (1'b0 == a_Data_1_ack_in));
end

assign ap_block_state6_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_io = ((exitcond_flatten8_reg_602 == 1'd0) & (1'b0 == a_Data_1_ack_in));
end

assign ap_block_state9_pp1_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond1_fu_415_p2 = ((ap_phi_mux_k2_phi_fu_208_p4 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond_flatten8_fu_394_p2 = ((ap_phi_mux_indvar_flatten6_phi_fu_197_p4 == 10'd546) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_263_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_175_p4 == 10'd546) ? 1'b1 : 1'b0);

assign exitcond_fu_284_p2 = ((ap_phi_mux_k_phi_fu_186_p4 == 2'd3) ? 1'b1 : 1'b0);

assign indvar_flatten_next7_fu_400_p2 = (ap_phi_mux_indvar_flatten6_phi_fu_197_p4 + 10'd1);

assign indvar_flatten_next_fu_269_p2 = (ap_phi_mux_indvar_flatten_phi_fu_175_p4 + 10'd1);

assign k2_mid2_fu_421_p3 = ((exitcond1_fu_415_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_k2_phi_fu_208_p4);

assign k_1_fu_366_p2 = (k_mid2_reg_540 + 2'd1);

assign k_2_fu_497_p2 = (k2_mid2_reg_611 + 2'd1);

assign k_mid2_fu_290_p3 = ((exitcond_fu_284_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_k_phi_fu_186_p4);

assign s_addr_0_1_fu_460_p2 = ($signed(16'd1) + $signed(t_addr_1_reg_616));

assign s_addr_0_fu_329_p2 = ($signed(16'd1) + $signed(t_addr_reg_545));

assign t_addr_1_fu_429_p4 = ((exitcond1_fu_415_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_k2_phi_fu_208_p4);

assign t_addr_fu_298_p4 = ((exitcond_fu_284_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_k_phi_fu_186_p4);

assign tmp_11_fu_371_p3 = {{tmp_8_reg_566}, {reg_244}};

assign tmp_13_fu_480_p1 = f_Data_q0[7:0];

assign tmp_15_fu_484_p3 = {{tmp_13_fu_480_p1}, {reg_240}};

assign tmp_16_fu_493_p1 = f_Data_q0[15:0];

assign tmp_18_fu_502_p3 = {{tmp_16_reg_637}, {reg_244}};

assign tmp_1_fu_310_p1 = t_addr_fu_298_p5;

assign tmp_2_cast_fu_315_p1 = t_addr_reg_545;

assign tmp_3_fu_318_p2 = ($signed(17'd1) + $signed(tmp_2_cast_fu_315_p1));

assign tmp_4_fu_324_p1 = $signed(tmp_3_fu_318_p2);

assign tmp_6_fu_449_p2 = ($signed(17'd1) + $signed(tmp_cast_fu_446_p1));

assign tmp_7_fu_455_p1 = $signed(tmp_6_fu_449_p2);

assign tmp_8_fu_362_p1 = f_Data_q0[15:0];

assign tmp_9_fu_441_p1 = t_addr_1_fu_429_p5;

assign tmp_cast_fu_446_p1 = t_addr_1_reg_616;

assign tmp_fu_349_p1 = f_Data_q0[7:0];

assign tmp_s_fu_353_p3 = {{tmp_fu_349_p1}, {reg_240}};

endmodule //Layer1_ReadBRAM
