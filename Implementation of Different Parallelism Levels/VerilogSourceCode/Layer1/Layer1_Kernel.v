// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Layer1_Kernel,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xazu3eg-sfvc784-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.302000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=901,HLS_SYN_LUT=549,HLS_VERSION=2018_3}" *)

module Layer1_Kernel (
        ap_clk,
        ap_rst_n,
        weight_TDATA,
        weight_TVALID,
        weight_TREADY,
        b_Data_TDATA,
        b_Data_TVALID,
        b_Data_TREADY,
        Bias_Data
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_pp1_stage0 = 13'd2048;
parameter    ap_ST_fsm_state15 = 13'd4096;

input   ap_clk;
input   ap_rst_n;
input  [15:0] weight_TDATA;
input   weight_TVALID;
output   weight_TREADY;
output  [63:0] b_Data_TDATA;
output   b_Data_TVALID;
input   b_Data_TREADY;
output  [63:0] Bias_Data;

 reg    ap_rst_n_inv;
reg   [15:0] weight_0_data_out;
wire    weight_0_vld_in;
wire    weight_0_vld_out;
wire    weight_0_ack_in;
reg    weight_0_ack_out;
reg   [15:0] weight_0_payload_A;
reg   [15:0] weight_0_payload_B;
reg    weight_0_sel_rd;
reg    weight_0_sel_wr;
wire    weight_0_sel;
wire    weight_0_load_A;
wire    weight_0_load_B;
reg   [1:0] weight_0_state;
wire    weight_0_state_cmp_full;
reg   [63:0] b_Data_1_data_out;
reg    b_Data_1_vld_in;
wire    b_Data_1_vld_out;
wire    b_Data_1_ack_in;
wire    b_Data_1_ack_out;
reg   [63:0] b_Data_1_payload_A;
reg   [63:0] b_Data_1_payload_B;
reg    b_Data_1_sel_rd;
reg    b_Data_1_sel_wr;
wire    b_Data_1_sel;
wire    b_Data_1_load_A;
wire    b_Data_1_load_B;
reg   [1:0] b_Data_1_state;
wire    b_Data_1_state_cmp_full;
reg   [63:0] Bias_Data_1_data_reg;
reg    Bias_Data_1_vld_reg;
reg    Bias_Data_1_vld_in;
reg   [15:0] k0_0;
reg   [15:0] k0_1;
reg   [15:0] k0_2;
reg   [15:0] k0_3;
reg   [15:0] k0_4;
reg   [15:0] k0_5;
reg   [15:0] k0_6;
reg   [15:0] k0_7;
reg   [15:0] k0_8;
reg   [15:0] k1_0;
reg   [15:0] k1_1;
reg   [15:0] k1_2;
reg   [15:0] k1_3;
reg   [15:0] k1_4;
reg   [15:0] k1_5;
reg   [15:0] k1_6;
reg   [15:0] k1_7;
reg   [15:0] k1_8;
reg   [15:0] k2_0;
reg   [15:0] k2_1;
reg   [15:0] k2_2;
reg   [15:0] k2_3;
reg   [15:0] k2_4;
reg   [15:0] k2_5;
reg   [15:0] k2_6;
reg   [15:0] k2_7;
reg   [15:0] k2_8;
reg   [15:0] k3_0;
reg   [15:0] k3_1;
reg   [15:0] k3_2;
reg   [15:0] k3_3;
reg   [15:0] k3_4;
reg   [15:0] k3_5;
reg   [15:0] k3_6;
reg   [15:0] k3_7;
reg   [15:0] k3_8;
reg    weight_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond4_fu_223_p2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
reg    b_Data_TDATA_blk_n;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] exitcond_flatten_reg_758;
reg    ap_enable_reg_pp1_iter2;
reg   [0:0] exitcond_flatten_reg_758_pp1_iter1_reg;
reg   [10:0] indvar_flatten_reg_189;
reg   [3:0] i1_reg_200;
reg   [15:0] reg_211;
reg    ap_block_state2;
reg   [15:0] reg_215;
reg   [15:0] reg_219;
wire   [3:0] i_1_fu_229_p2;
reg   [3:0] i_1_reg_748;
wire   [63:0] tmp_fu_451_p5;
wire   [0:0] exitcond_flatten_fu_464_p2;
wire    ap_block_state12_pp1_stage0_iter0;
wire    ap_block_state13_pp1_stage0_iter1;
reg    ap_block_state13_io;
wire    ap_block_state14_pp1_stage0_iter2;
reg    ap_block_state14_io;
reg    ap_block_pp1_stage0_11001;
wire   [10:0] indvar_flatten_next_fu_470_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [3:0] i1_mid2_fu_482_p3;
reg   [3:0] i1_mid2_reg_767;
wire   [3:0] i_2_fu_490_p2;
wire   [63:0] tmp_s_fu_732_p5;
wire    ap_CS_fsm_state11;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state12;
reg   [3:0] i_reg_177;
wire    ap_CS_fsm_state1;
wire    ap_block_pp1_stage0_01001;
wire   [0:0] exitcond_fu_476_p2;
wire   [15:0] tmp_9_fu_709_p11;
wire   [15:0] tmp_8_fu_650_p11;
wire   [15:0] tmp_7_fu_591_p11;
wire   [15:0] tmp_6_fu_532_p11;
reg   [12:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 weight_0_sel_rd = 1'b0;
#0 weight_0_sel_wr = 1'b0;
#0 weight_0_state = 2'd0;
#0 b_Data_1_sel_rd = 1'b0;
#0 b_Data_1_sel_wr = 1'b0;
#0 b_Data_1_state = 2'd0;
#0 Bias_Data_1_data_reg = 64'd0;
#0 Bias_Data_1_vld_reg = 1'b0;
#0 k0_0 = 16'd0;
#0 k0_1 = 16'd0;
#0 k0_2 = 16'd0;
#0 k0_3 = 16'd0;
#0 k0_4 = 16'd0;
#0 k0_5 = 16'd0;
#0 k0_6 = 16'd0;
#0 k0_7 = 16'd0;
#0 k0_8 = 16'd0;
#0 k1_0 = 16'd0;
#0 k1_1 = 16'd0;
#0 k1_2 = 16'd0;
#0 k1_3 = 16'd0;
#0 k1_4 = 16'd0;
#0 k1_5 = 16'd0;
#0 k1_6 = 16'd0;
#0 k1_7 = 16'd0;
#0 k1_8 = 16'd0;
#0 k2_0 = 16'd0;
#0 k2_1 = 16'd0;
#0 k2_2 = 16'd0;
#0 k2_3 = 16'd0;
#0 k2_4 = 16'd0;
#0 k2_5 = 16'd0;
#0 k2_6 = 16'd0;
#0 k2_7 = 16'd0;
#0 k2_8 = 16'd0;
#0 k3_0 = 16'd0;
#0 k3_1 = 16'd0;
#0 k3_2 = 16'd0;
#0 k3_3 = 16'd0;
#0 k3_4 = 16'd0;
#0 k3_5 = 16'd0;
#0 k3_6 = 16'd0;
#0 k3_7 = 16'd0;
#0 k3_8 = 16'd0;
#0 ap_CS_fsm = 13'd1;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
end

Layer1_Kernel_muxbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
Layer1_Kernel_muxbkb_U1(
    .din0(k0_0),
    .din1(k0_1),
    .din2(k0_2),
    .din3(k0_3),
    .din4(k0_4),
    .din5(k0_5),
    .din6(k0_6),
    .din7(k0_7),
    .din8(k0_8),
    .din9(i1_mid2_reg_767),
    .dout(tmp_6_fu_532_p11)
);

Layer1_Kernel_muxbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
Layer1_Kernel_muxbkb_U2(
    .din0(k1_0),
    .din1(k1_1),
    .din2(k1_2),
    .din3(k1_3),
    .din4(k1_4),
    .din5(k1_5),
    .din6(k1_6),
    .din7(k1_7),
    .din8(k1_8),
    .din9(i1_mid2_reg_767),
    .dout(tmp_7_fu_591_p11)
);

Layer1_Kernel_muxbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
Layer1_Kernel_muxbkb_U3(
    .din0(k2_0),
    .din1(k2_1),
    .din2(k2_2),
    .din3(k2_3),
    .din4(k2_4),
    .din5(k2_5),
    .din6(k2_6),
    .din7(k2_7),
    .din8(k2_8),
    .din9(i1_mid2_reg_767),
    .dout(tmp_8_fu_650_p11)
);

Layer1_Kernel_muxbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
Layer1_Kernel_muxbkb_U4(
    .din0(k3_0),
    .din1(k3_1),
    .din2(k3_2),
    .din3(k3_3),
    .din4(k3_4),
    .din5(k3_5),
    .din6(k3_6),
    .din7(k3_7),
    .din8(k3_8),
    .din9(i1_mid2_reg_767),
    .dout(tmp_9_fu_709_p11)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state12) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state12)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state12);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        b_Data_1_sel_rd <= 1'b0;
    end else begin
        if (((b_Data_1_ack_out == 1'b1) & (b_Data_1_vld_out == 1'b1))) begin
            b_Data_1_sel_rd <= ~b_Data_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        b_Data_1_sel_wr <= 1'b0;
    end else begin
        if (((b_Data_1_ack_in == 1'b1) & (b_Data_1_vld_in == 1'b1))) begin
            b_Data_1_sel_wr <= ~b_Data_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        b_Data_1_state <= 2'd0;
    end else begin
        if ((((b_Data_1_state == 2'd2) & (b_Data_1_vld_in == 1'b0)) | ((b_Data_1_state == 2'd3) & (b_Data_1_vld_in == 1'b0) & (b_Data_1_ack_out == 1'b1)))) begin
            b_Data_1_state <= 2'd2;
        end else if ((((b_Data_1_state == 2'd1) & (b_Data_1_ack_out == 1'b0)) | ((b_Data_1_state == 2'd3) & (b_Data_1_ack_out == 1'b0) & (b_Data_1_vld_in == 1'b1)))) begin
            b_Data_1_state <= 2'd1;
        end else if (((~((b_Data_1_vld_in == 1'b0) & (b_Data_1_ack_out == 1'b1)) & ~((b_Data_1_ack_out == 1'b0) & (b_Data_1_vld_in == 1'b1)) & (b_Data_1_state == 2'd3)) | ((b_Data_1_state == 2'd1) & (b_Data_1_ack_out == 1'b1)) | ((b_Data_1_state == 2'd2) & (b_Data_1_vld_in == 1'b1)))) begin
            b_Data_1_state <= 2'd3;
        end else begin
            b_Data_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        weight_0_sel_rd <= 1'b0;
    end else begin
        if (((weight_0_ack_out == 1'b1) & (weight_0_vld_out == 1'b1))) begin
            weight_0_sel_rd <= ~weight_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        weight_0_sel_wr <= 1'b0;
    end else begin
        if (((weight_0_ack_in == 1'b1) & (weight_0_vld_in == 1'b1))) begin
            weight_0_sel_wr <= ~weight_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        weight_0_state <= 2'd0;
    end else begin
        if ((((weight_0_state == 2'd2) & (weight_0_vld_in == 1'b0)) | ((weight_0_state == 2'd3) & (weight_0_vld_in == 1'b0) & (weight_0_ack_out == 1'b1)))) begin
            weight_0_state <= 2'd2;
        end else if ((((weight_0_state == 2'd1) & (weight_0_ack_out == 1'b0)) | ((weight_0_state == 2'd3) & (weight_0_ack_out == 1'b0) & (weight_0_vld_in == 1'b1)))) begin
            weight_0_state <= 2'd1;
        end else if (((~((weight_0_vld_in == 1'b0) & (weight_0_ack_out == 1'b1)) & ~((weight_0_ack_out == 1'b0) & (weight_0_vld_in == 1'b1)) & (weight_0_state == 2'd3)) | ((weight_0_state == 2'd1) & (weight_0_ack_out == 1'b1)) | ((weight_0_state == 2'd2) & (weight_0_vld_in == 1'b1)))) begin
            weight_0_state <= 2'd3;
        end else begin
            weight_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_464_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i1_reg_200 <= i_2_fu_490_p2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        i1_reg_200 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        i_reg_177 <= i_1_reg_748;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        i_reg_177 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_464_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        indvar_flatten_reg_189 <= indvar_flatten_next_fu_470_p2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        indvar_flatten_reg_189 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == Bias_Data_1_vld_reg) & (1'b1 == Bias_Data_1_vld_in)) | ((1'b1 == 1'b1) & (1'b1 == Bias_Data_1_vld_in) & (1'b1 == Bias_Data_1_vld_reg)))) begin
        Bias_Data_1_data_reg <= tmp_fu_451_p5;
    end
end

always @ (posedge ap_clk) begin
    if ((b_Data_1_load_A == 1'b1)) begin
        b_Data_1_payload_A <= tmp_s_fu_732_p5;
    end
end

always @ (posedge ap_clk) begin
    if ((b_Data_1_load_B == 1'b1)) begin
        b_Data_1_payload_B <= tmp_s_fu_732_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        exitcond_flatten_reg_758 <= exitcond_flatten_fu_464_p2;
        exitcond_flatten_reg_758_pp1_iter1_reg <= exitcond_flatten_reg_758;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_464_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i1_mid2_reg_767 <= i1_mid2_fu_482_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((exitcond4_fu_223_p2 == 1'd0) & (weight_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        i_1_reg_748 <= i_1_fu_229_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_177 == 4'd0) & (weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        k0_0 <= reg_211;
        k1_0 <= reg_215;
        k2_0 <= reg_219;
        k3_0 <= weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_177 == 4'd1) & (weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        k0_1 <= reg_211;
        k1_1 <= reg_215;
        k2_1 <= reg_219;
        k3_1 <= weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_177 == 4'd2) & (weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        k0_2 <= reg_211;
        k1_2 <= reg_215;
        k2_2 <= reg_219;
        k3_2 <= weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_177 == 4'd3) & (weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        k0_3 <= reg_211;
        k1_3 <= reg_215;
        k2_3 <= reg_219;
        k3_3 <= weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_177 == 4'd4) & (weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        k0_4 <= reg_211;
        k1_4 <= reg_215;
        k2_4 <= reg_219;
        k3_4 <= weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_177 == 4'd5) & (weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        k0_5 <= reg_211;
        k1_5 <= reg_215;
        k2_5 <= reg_219;
        k3_5 <= weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_177 == 4'd6) & (weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        k0_6 <= reg_211;
        k1_6 <= reg_215;
        k2_6 <= reg_219;
        k3_6 <= weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_177 == 4'd7) & (weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        k0_7 <= reg_211;
        k1_7 <= reg_215;
        k2_7 <= reg_219;
        k3_7 <= weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((~(i_reg_177 == 4'd7) & ~(i_reg_177 == 4'd6) & ~(i_reg_177 == 4'd5) & ~(i_reg_177 == 4'd4) & ~(i_reg_177 == 4'd3) & ~(i_reg_177 == 4'd2) & ~(i_reg_177 == 4'd1) & ~(i_reg_177 == 4'd0) & (weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        k0_8 <= reg_211;
        k1_8 <= reg_215;
        k2_8 <= reg_219;
        k3_8 <= weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | (~((exitcond4_fu_223_p2 == 1'd0) & (weight_0_vld_out == 1'b0)) & (exitcond4_fu_223_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        reg_211 <= weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state7)) | ((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        reg_215 <= weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state4)))) begin
        reg_219 <= weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((weight_0_load_A == 1'b1)) begin
        weight_0_payload_A <= weight_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((weight_0_load_B == 1'b1)) begin
        weight_0_payload_B <= weight_TDATA;
    end
end

always @ (*) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        Bias_Data_1_vld_in = 1'b1;
    end else begin
        Bias_Data_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_464_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state12 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state12 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if ((b_Data_1_sel == 1'b1)) begin
        b_Data_1_data_out = b_Data_1_payload_B;
    end else begin
        b_Data_1_data_out = b_Data_1_payload_A;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_758 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        b_Data_1_vld_in = 1'b1;
    end else begin
        b_Data_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond_flatten_reg_758_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((exitcond_flatten_reg_758 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        b_Data_TDATA_blk_n = b_Data_1_state[1'd1];
    end else begin
        b_Data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state7)) | ((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state5)) | ((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | (~((exitcond4_fu_223_p2 == 1'd0) & (weight_0_vld_out == 1'b0)) & (exitcond4_fu_223_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        weight_0_ack_out = 1'b1;
    end else begin
        weight_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((weight_0_sel == 1'b1)) begin
        weight_0_data_out = weight_0_payload_B;
    end else begin
        weight_0_data_out = weight_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((exitcond4_fu_223_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        weight_TDATA_blk_n = weight_0_state[1'd0];
    end else begin
        weight_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if ((~((exitcond4_fu_223_p2 == 1'd0) & (weight_0_vld_out == 1'b0)) & (exitcond4_fu_223_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if ((~((exitcond4_fu_223_p2 == 1'd0) & (weight_0_vld_out == 1'b0)) & (exitcond4_fu_223_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((exitcond_flatten_fu_464_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((exitcond_flatten_fu_464_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Bias_Data = Bias_Data_1_data_reg;

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((1'b1 == ap_block_state14_io) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b1 == ap_block_state13_io) & (ap_enable_reg_pp1_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((1'b1 == ap_block_state14_io) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b1 == ap_block_state13_io) & (ap_enable_reg_pp1_iter1 == 1'b1)));
end

assign ap_block_state12_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state13_io = ((exitcond_flatten_reg_758 == 1'd0) & (b_Data_1_ack_in == 1'b0));
end

assign ap_block_state13_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state14_io = ((exitcond_flatten_reg_758_pp1_iter1_reg == 1'd0) & (b_Data_1_ack_in == 1'b0));
end

assign ap_block_state14_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2 = ((exitcond4_fu_223_p2 == 1'd0) & (weight_0_vld_out == 1'b0));
end

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign b_Data_1_ack_in = b_Data_1_state[1'd1];

assign b_Data_1_ack_out = b_Data_TREADY;

assign b_Data_1_load_A = (~b_Data_1_sel_wr & b_Data_1_state_cmp_full);

assign b_Data_1_load_B = (b_Data_1_state_cmp_full & b_Data_1_sel_wr);

assign b_Data_1_sel = b_Data_1_sel_rd;

assign b_Data_1_state_cmp_full = ((b_Data_1_state != 2'd1) ? 1'b1 : 1'b0);

assign b_Data_1_vld_out = b_Data_1_state[1'd0];

assign b_Data_TDATA = b_Data_1_data_out;

assign b_Data_TVALID = b_Data_1_state[1'd0];

assign exitcond4_fu_223_p2 = ((i_reg_177 == 4'd9) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_464_p2 = ((indvar_flatten_reg_189 == 11'd1638) ? 1'b1 : 1'b0);

assign exitcond_fu_476_p2 = ((i1_reg_200 == 4'd9) ? 1'b1 : 1'b0);

assign i1_mid2_fu_482_p3 = ((exitcond_fu_476_p2[0:0] === 1'b1) ? 4'd0 : i1_reg_200);

assign i_1_fu_229_p2 = (i_reg_177 + 4'd1);

assign i_2_fu_490_p2 = (i1_mid2_fu_482_p3 + 4'd1);

assign indvar_flatten_next_fu_470_p2 = (indvar_flatten_reg_189 + 11'd1);

assign tmp_fu_451_p5 = {{{{weight_0_data_out}, {reg_219}}, {reg_215}}, {reg_211}};

assign tmp_s_fu_732_p5 = {{{{tmp_9_fu_709_p11}, {tmp_8_fu_650_p11}}, {tmp_7_fu_591_p11}}, {tmp_6_fu_532_p11}};

assign weight_0_ack_in = weight_0_state[1'd1];

assign weight_0_load_A = (weight_0_state_cmp_full & ~weight_0_sel_wr);

assign weight_0_load_B = (weight_0_state_cmp_full & weight_0_sel_wr);

assign weight_0_sel = weight_0_sel_rd;

assign weight_0_state_cmp_full = ((weight_0_state != 2'd1) ? 1'b1 : 1'b0);

assign weight_0_vld_in = weight_TVALID;

assign weight_0_vld_out = weight_0_state[1'd0];

assign weight_TREADY = weight_0_state[1'd1];

endmodule //Layer1_Kernel
