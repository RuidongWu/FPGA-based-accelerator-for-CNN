// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="MAC_Tree_4x4x1,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xazu3eg-sfvc784-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=2.846000,HLS_SYN_LAT=1,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=16,HLS_SYN_FF=1230,HLS_SYN_LUT=213,HLS_VERSION=2018_3}" *)

module MAC_Tree_4x4x1 (
        ap_clk,
        ap_rst_n,
        a_Data_TDATA,
        a_Data_TVALID,
        a_Data_TREADY,
        b_Data_TDATA,
        b_Data_TVALID,
        b_Data_TREADY,
        c_Data_TDATA,
        c_Data_TVALID,
        c_Data_TREADY
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst_n;
input  [31:0] a_Data_TDATA;
input   a_Data_TVALID;
output   a_Data_TREADY;
input  [63:0] b_Data_TDATA;
input   b_Data_TVALID;
output   b_Data_TREADY;
output  [511:0] c_Data_TDATA;
output   c_Data_TVALID;
input   c_Data_TREADY;

 reg    ap_rst_n_inv;
reg   [31:0] a_Data_0_data_out;
wire    a_Data_0_vld_in;
wire    a_Data_0_vld_out;
wire    a_Data_0_ack_in;
reg    a_Data_0_ack_out;
reg   [31:0] a_Data_0_payload_A;
reg   [31:0] a_Data_0_payload_B;
reg    a_Data_0_sel_rd;
reg    a_Data_0_sel_wr;
wire    a_Data_0_sel;
wire    a_Data_0_load_A;
wire    a_Data_0_load_B;
reg   [1:0] a_Data_0_state;
wire    a_Data_0_state_cmp_full;
reg   [63:0] b_Data_0_data_out;
wire    b_Data_0_vld_in;
wire    b_Data_0_vld_out;
wire    b_Data_0_ack_in;
reg    b_Data_0_ack_out;
reg   [63:0] b_Data_0_payload_A;
reg   [63:0] b_Data_0_payload_B;
reg    b_Data_0_sel_rd;
reg    b_Data_0_sel_wr;
wire    b_Data_0_sel;
wire    b_Data_0_load_A;
wire    b_Data_0_load_B;
reg   [1:0] b_Data_0_state;
wire    b_Data_0_state_cmp_full;
reg   [511:0] c_Data_1_data_out;
reg    c_Data_1_vld_in;
wire    c_Data_1_vld_out;
wire    c_Data_1_ack_in;
wire    c_Data_1_ack_out;
reg   [511:0] c_Data_1_payload_A;
reg   [511:0] c_Data_1_payload_B;
reg    c_Data_1_sel_rd;
reg    c_Data_1_sel_wr;
wire    c_Data_1_sel;
wire    c_Data_1_load_A;
wire    c_Data_1_load_B;
reg   [1:0] c_Data_1_state;
wire    c_Data_1_state_cmp_full;
reg    a_Data_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_pp0_stage0;
reg    b_Data_TDATA_blk_n;
reg    c_Data_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter1;
wire  signed [511:0] tmp_8_fu_261_p1;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
reg    ap_block_pp0_stage0_subdone;
reg    ap_block_pp0_stage0_01001;
wire   [7:0] tmp_fu_81_p1;
wire   [15:0] tmp_4_fu_115_p1;
wire  signed [23:0] tmp_s_fu_266_p2;
wire   [15:0] tmp_5_fu_119_p4;
wire  signed [23:0] tmp_6_0_1_fu_273_p2;
wire   [15:0] tmp_6_fu_129_p4;
wire  signed [23:0] tmp_6_0_2_fu_280_p2;
wire   [15:0] tmp_7_fu_139_p4;
wire  signed [23:0] tmp_6_0_3_fu_287_p2;
wire   [7:0] tmp_1_fu_85_p4;
wire  signed [23:0] tmp_6_1_fu_294_p2;
wire  signed [23:0] tmp_6_1_1_fu_301_p2;
wire  signed [23:0] tmp_6_1_2_fu_308_p2;
wire  signed [23:0] tmp_6_1_3_fu_315_p2;
wire   [7:0] tmp_2_fu_95_p4;
wire  signed [23:0] tmp_6_2_fu_322_p2;
wire  signed [23:0] tmp_6_2_1_fu_329_p2;
wire  signed [23:0] tmp_6_2_2_fu_336_p2;
wire  signed [23:0] tmp_6_2_3_fu_343_p2;
wire   [7:0] tmp_3_fu_105_p4;
wire  signed [23:0] tmp_6_3_fu_350_p2;
wire  signed [23:0] tmp_6_3_1_fu_357_p2;
wire  signed [23:0] tmp_6_3_2_fu_364_p2;
wire  signed [23:0] tmp_6_3_3_fu_371_p2;
wire  signed [31:0] tmp_6_3_2_cast_fu_223_p1;
wire  signed [31:0] tmp_6_3_1_cast_fu_220_p1;
wire  signed [31:0] tmp_6_3_cast_fu_217_p1;
wire  signed [31:0] tmp_6_2_3_cast_fu_210_p1;
wire  signed [31:0] tmp_6_2_2_cast_fu_207_p1;
wire  signed [31:0] tmp_6_2_1_cast_fu_204_p1;
wire  signed [31:0] tmp_6_2_cast_fu_201_p1;
wire  signed [31:0] tmp_6_1_3_cast_fu_194_p1;
wire  signed [31:0] tmp_6_1_2_cast_fu_191_p1;
wire  signed [31:0] tmp_6_1_1_cast_fu_188_p1;
wire  signed [31:0] tmp_6_1_cast_fu_185_p1;
wire  signed [31:0] tmp_6_0_3_cast_fu_178_p1;
wire  signed [31:0] tmp_6_0_2_cast_fu_171_p1;
wire  signed [31:0] tmp_6_0_1_cast_fu_164_p1;
wire  signed [31:0] tmp_61_cast_fu_157_p1;
wire   [503:0] tmp_9_fu_226_p17;
wire  signed [15:0] tmp_s_fu_266_p0;
wire  signed [23:0] tmp_51_cast_fu_153_p1;
wire   [7:0] tmp_s_fu_266_p1;
wire   [23:0] tmp_cast_fu_149_p1;
wire  signed [15:0] tmp_6_0_1_fu_273_p0;
wire  signed [23:0] tmp_5_0_1_cast_fu_160_p1;
wire   [7:0] tmp_6_0_1_fu_273_p1;
wire  signed [15:0] tmp_6_0_2_fu_280_p0;
wire  signed [23:0] tmp_5_0_2_cast_fu_167_p1;
wire   [7:0] tmp_6_0_2_fu_280_p1;
wire  signed [15:0] tmp_6_0_3_fu_287_p0;
wire  signed [23:0] tmp_5_0_3_cast_fu_174_p1;
wire   [7:0] tmp_6_0_3_fu_287_p1;
wire  signed [15:0] tmp_6_1_fu_294_p0;
wire   [7:0] tmp_6_1_fu_294_p1;
wire   [23:0] tmp_1_1_cast_fu_181_p1;
wire  signed [15:0] tmp_6_1_1_fu_301_p0;
wire   [7:0] tmp_6_1_1_fu_301_p1;
wire  signed [15:0] tmp_6_1_2_fu_308_p0;
wire   [7:0] tmp_6_1_2_fu_308_p1;
wire  signed [15:0] tmp_6_1_3_fu_315_p0;
wire   [7:0] tmp_6_1_3_fu_315_p1;
wire  signed [15:0] tmp_6_2_fu_322_p0;
wire   [7:0] tmp_6_2_fu_322_p1;
wire   [23:0] tmp_1_2_cast_fu_197_p1;
wire  signed [15:0] tmp_6_2_1_fu_329_p0;
wire   [7:0] tmp_6_2_1_fu_329_p1;
wire  signed [15:0] tmp_6_2_2_fu_336_p0;
wire   [7:0] tmp_6_2_2_fu_336_p1;
wire  signed [15:0] tmp_6_2_3_fu_343_p0;
wire   [7:0] tmp_6_2_3_fu_343_p1;
wire  signed [15:0] tmp_6_3_fu_350_p0;
wire   [7:0] tmp_6_3_fu_350_p1;
wire   [23:0] tmp_1_3_cast_fu_213_p1;
wire  signed [15:0] tmp_6_3_1_fu_357_p0;
wire   [7:0] tmp_6_3_1_fu_357_p1;
wire  signed [15:0] tmp_6_3_2_fu_364_p0;
wire   [7:0] tmp_6_3_2_fu_364_p1;
wire  signed [15:0] tmp_6_3_3_fu_371_p0;
wire   [7:0] tmp_6_3_3_fu_371_p1;
reg   [0:0] ap_NS_fsm;
wire    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 a_Data_0_sel_rd = 1'b0;
#0 a_Data_0_sel_wr = 1'b0;
#0 a_Data_0_state = 2'd0;
#0 b_Data_0_sel_rd = 1'b0;
#0 b_Data_0_sel_wr = 1'b0;
#0 b_Data_0_state = 2'd0;
#0 c_Data_1_sel_rd = 1'b0;
#0 c_Data_1_sel_wr = 1'b0;
#0 c_Data_1_state = 2'd0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

MAC_Tree_4x4x1_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 24 ))
MAC_Tree_4x4x1_mubkb_U1(
    .din0(tmp_s_fu_266_p0),
    .din1(tmp_s_fu_266_p1),
    .dout(tmp_s_fu_266_p2)
);

MAC_Tree_4x4x1_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 24 ))
MAC_Tree_4x4x1_mubkb_U2(
    .din0(tmp_6_0_1_fu_273_p0),
    .din1(tmp_6_0_1_fu_273_p1),
    .dout(tmp_6_0_1_fu_273_p2)
);

MAC_Tree_4x4x1_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 24 ))
MAC_Tree_4x4x1_mubkb_U3(
    .din0(tmp_6_0_2_fu_280_p0),
    .din1(tmp_6_0_2_fu_280_p1),
    .dout(tmp_6_0_2_fu_280_p2)
);

MAC_Tree_4x4x1_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 24 ))
MAC_Tree_4x4x1_mubkb_U4(
    .din0(tmp_6_0_3_fu_287_p0),
    .din1(tmp_6_0_3_fu_287_p1),
    .dout(tmp_6_0_3_fu_287_p2)
);

MAC_Tree_4x4x1_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 24 ))
MAC_Tree_4x4x1_mubkb_U5(
    .din0(tmp_6_1_fu_294_p0),
    .din1(tmp_6_1_fu_294_p1),
    .dout(tmp_6_1_fu_294_p2)
);

MAC_Tree_4x4x1_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 24 ))
MAC_Tree_4x4x1_mubkb_U6(
    .din0(tmp_6_1_1_fu_301_p0),
    .din1(tmp_6_1_1_fu_301_p1),
    .dout(tmp_6_1_1_fu_301_p2)
);

MAC_Tree_4x4x1_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 24 ))
MAC_Tree_4x4x1_mubkb_U7(
    .din0(tmp_6_1_2_fu_308_p0),
    .din1(tmp_6_1_2_fu_308_p1),
    .dout(tmp_6_1_2_fu_308_p2)
);

MAC_Tree_4x4x1_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 24 ))
MAC_Tree_4x4x1_mubkb_U8(
    .din0(tmp_6_1_3_fu_315_p0),
    .din1(tmp_6_1_3_fu_315_p1),
    .dout(tmp_6_1_3_fu_315_p2)
);

MAC_Tree_4x4x1_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 24 ))
MAC_Tree_4x4x1_mubkb_U9(
    .din0(tmp_6_2_fu_322_p0),
    .din1(tmp_6_2_fu_322_p1),
    .dout(tmp_6_2_fu_322_p2)
);

MAC_Tree_4x4x1_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 24 ))
MAC_Tree_4x4x1_mubkb_U10(
    .din0(tmp_6_2_1_fu_329_p0),
    .din1(tmp_6_2_1_fu_329_p1),
    .dout(tmp_6_2_1_fu_329_p2)
);

MAC_Tree_4x4x1_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 24 ))
MAC_Tree_4x4x1_mubkb_U11(
    .din0(tmp_6_2_2_fu_336_p0),
    .din1(tmp_6_2_2_fu_336_p1),
    .dout(tmp_6_2_2_fu_336_p2)
);

MAC_Tree_4x4x1_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 24 ))
MAC_Tree_4x4x1_mubkb_U12(
    .din0(tmp_6_2_3_fu_343_p0),
    .din1(tmp_6_2_3_fu_343_p1),
    .dout(tmp_6_2_3_fu_343_p2)
);

MAC_Tree_4x4x1_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 24 ))
MAC_Tree_4x4x1_mubkb_U13(
    .din0(tmp_6_3_fu_350_p0),
    .din1(tmp_6_3_fu_350_p1),
    .dout(tmp_6_3_fu_350_p2)
);

MAC_Tree_4x4x1_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 24 ))
MAC_Tree_4x4x1_mubkb_U14(
    .din0(tmp_6_3_1_fu_357_p0),
    .din1(tmp_6_3_1_fu_357_p1),
    .dout(tmp_6_3_1_fu_357_p2)
);

MAC_Tree_4x4x1_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 24 ))
MAC_Tree_4x4x1_mubkb_U15(
    .din0(tmp_6_3_2_fu_364_p0),
    .din1(tmp_6_3_2_fu_364_p1),
    .dout(tmp_6_3_2_fu_364_p2)
);

MAC_Tree_4x4x1_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 24 ))
MAC_Tree_4x4x1_mubkb_U16(
    .din0(tmp_6_3_3_fu_371_p0),
    .din1(tmp_6_3_3_fu_371_p1),
    .dout(tmp_6_3_3_fu_371_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        a_Data_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == a_Data_0_ack_out) & (1'b1 == a_Data_0_vld_out))) begin
            a_Data_0_sel_rd <= ~a_Data_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        a_Data_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == a_Data_0_ack_in) & (1'b1 == a_Data_0_vld_in))) begin
            a_Data_0_sel_wr <= ~a_Data_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        a_Data_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == a_Data_0_vld_in) & (2'd2 == a_Data_0_state)) | ((1'b0 == a_Data_0_vld_in) & (2'd3 == a_Data_0_state) & (1'b1 == a_Data_0_ack_out)))) begin
            a_Data_0_state <= 2'd2;
        end else if ((((1'b0 == a_Data_0_ack_out) & (2'd1 == a_Data_0_state)) | ((1'b0 == a_Data_0_ack_out) & (2'd3 == a_Data_0_state) & (1'b1 == a_Data_0_vld_in)))) begin
            a_Data_0_state <= 2'd1;
        end else if (((~((1'b0 == a_Data_0_vld_in) & (1'b1 == a_Data_0_ack_out)) & ~((1'b0 == a_Data_0_ack_out) & (1'b1 == a_Data_0_vld_in)) & (2'd3 == a_Data_0_state)) | ((2'd1 == a_Data_0_state) & (1'b1 == a_Data_0_ack_out)) | ((2'd2 == a_Data_0_state) & (1'b1 == a_Data_0_vld_in)))) begin
            a_Data_0_state <= 2'd3;
        end else begin
            a_Data_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        b_Data_0_sel_rd <= 1'b0;
    end else begin
        if (((b_Data_0_ack_out == 1'b1) & (b_Data_0_vld_out == 1'b1))) begin
            b_Data_0_sel_rd <= ~b_Data_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        b_Data_0_sel_wr <= 1'b0;
    end else begin
        if (((b_Data_0_ack_in == 1'b1) & (b_Data_0_vld_in == 1'b1))) begin
            b_Data_0_sel_wr <= ~b_Data_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        b_Data_0_state <= 2'd0;
    end else begin
        if ((((b_Data_0_state == 2'd2) & (b_Data_0_vld_in == 1'b0)) | ((b_Data_0_state == 2'd3) & (b_Data_0_vld_in == 1'b0) & (b_Data_0_ack_out == 1'b1)))) begin
            b_Data_0_state <= 2'd2;
        end else if ((((b_Data_0_state == 2'd3) & (b_Data_0_ack_out == 1'b0) & (b_Data_0_vld_in == 1'b1)) | ((b_Data_0_state == 2'd1) & (b_Data_0_ack_out == 1'b0)))) begin
            b_Data_0_state <= 2'd1;
        end else if ((((b_Data_0_state == 2'd2) & (b_Data_0_vld_in == 1'b1)) | (~((b_Data_0_vld_in == 1'b0) & (b_Data_0_ack_out == 1'b1)) & ~((b_Data_0_ack_out == 1'b0) & (b_Data_0_vld_in == 1'b1)) & (b_Data_0_state == 2'd3)) | ((b_Data_0_state == 2'd1) & (b_Data_0_ack_out == 1'b1)))) begin
            b_Data_0_state <= 2'd3;
        end else begin
            b_Data_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        c_Data_1_sel_rd <= 1'b0;
    end else begin
        if (((c_Data_1_ack_out == 1'b1) & (c_Data_1_vld_out == 1'b1))) begin
            c_Data_1_sel_rd <= ~c_Data_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        c_Data_1_sel_wr <= 1'b0;
    end else begin
        if (((c_Data_1_ack_in == 1'b1) & (c_Data_1_vld_in == 1'b1))) begin
            c_Data_1_sel_wr <= ~c_Data_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        c_Data_1_state <= 2'd0;
    end else begin
        if ((((c_Data_1_state == 2'd2) & (c_Data_1_vld_in == 1'b0)) | ((c_Data_1_state == 2'd3) & (c_Data_1_vld_in == 1'b0) & (c_Data_1_ack_out == 1'b1)))) begin
            c_Data_1_state <= 2'd2;
        end else if ((((c_Data_1_state == 2'd1) & (c_Data_1_ack_out == 1'b0)) | ((c_Data_1_state == 2'd3) & (c_Data_1_ack_out == 1'b0) & (c_Data_1_vld_in == 1'b1)))) begin
            c_Data_1_state <= 2'd1;
        end else if (((~((c_Data_1_vld_in == 1'b0) & (c_Data_1_ack_out == 1'b1)) & ~((c_Data_1_ack_out == 1'b0) & (c_Data_1_vld_in == 1'b1)) & (c_Data_1_state == 2'd3)) | ((c_Data_1_state == 2'd1) & (c_Data_1_ack_out == 1'b1)) | ((c_Data_1_state == 2'd2) & (c_Data_1_vld_in == 1'b1)))) begin
            c_Data_1_state <= 2'd3;
        end else begin
            c_Data_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == a_Data_0_load_A)) begin
        a_Data_0_payload_A <= a_Data_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == a_Data_0_load_B)) begin
        a_Data_0_payload_B <= a_Data_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((b_Data_0_load_A == 1'b1)) begin
        b_Data_0_payload_A <= b_Data_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((b_Data_0_load_B == 1'b1)) begin
        b_Data_0_payload_B <= b_Data_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((c_Data_1_load_A == 1'b1)) begin
        c_Data_1_payload_A <= tmp_8_fu_261_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((c_Data_1_load_B == 1'b1)) begin
        c_Data_1_payload_B <= tmp_8_fu_261_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_Data_0_ack_out = 1'b1;
    end else begin
        a_Data_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == a_Data_0_sel)) begin
        a_Data_0_data_out = a_Data_0_payload_B;
    end else begin
        a_Data_0_data_out = a_Data_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_Data_TDATA_blk_n = a_Data_0_state[1'd0];
    end else begin
        a_Data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_Data_0_ack_out = 1'b1;
    end else begin
        b_Data_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((b_Data_0_sel == 1'b1)) begin
        b_Data_0_data_out = b_Data_0_payload_B;
    end else begin
        b_Data_0_data_out = b_Data_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_Data_TDATA_blk_n = b_Data_0_state[1'd0];
    end else begin
        b_Data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((c_Data_1_sel == 1'b1)) begin
        c_Data_1_data_out = c_Data_1_payload_B;
    end else begin
        c_Data_1_data_out = c_Data_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_Data_1_vld_in = 1'b1;
    end else begin
        c_Data_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        c_Data_TDATA_blk_n = c_Data_1_state[1'd1];
    end else begin
        c_Data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_Data_0_ack_in = a_Data_0_state[1'd1];

assign a_Data_0_load_A = (~a_Data_0_sel_wr & a_Data_0_state_cmp_full);

assign a_Data_0_load_B = (a_Data_0_state_cmp_full & a_Data_0_sel_wr);

assign a_Data_0_sel = a_Data_0_sel_rd;

assign a_Data_0_state_cmp_full = ((a_Data_0_state != 2'd1) ? 1'b1 : 1'b0);

assign a_Data_0_vld_in = a_Data_TVALID;

assign a_Data_0_vld_out = a_Data_0_state[1'd0];

assign a_Data_TREADY = a_Data_0_state[1'd1];

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((c_Data_1_ack_in == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b1 == 1'b1) & ((b_Data_0_vld_out == 1'b0) | (1'b0 == a_Data_0_vld_out))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((c_Data_1_ack_in == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b1 == 1'b1) & ((b_Data_0_vld_out == 1'b0) | (1'b0 == a_Data_0_vld_out) | (c_Data_1_ack_in == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((c_Data_1_ack_in == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b1 == 1'b1) & ((b_Data_0_vld_out == 1'b0) | (1'b0 == a_Data_0_vld_out) | (c_Data_1_ack_in == 1'b0))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((b_Data_0_vld_out == 1'b0) | (1'b0 == a_Data_0_vld_out));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (c_Data_1_ack_in == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign b_Data_0_ack_in = b_Data_0_state[1'd1];

assign b_Data_0_load_A = (~b_Data_0_sel_wr & b_Data_0_state_cmp_full);

assign b_Data_0_load_B = (b_Data_0_state_cmp_full & b_Data_0_sel_wr);

assign b_Data_0_sel = b_Data_0_sel_rd;

assign b_Data_0_state_cmp_full = ((b_Data_0_state != 2'd1) ? 1'b1 : 1'b0);

assign b_Data_0_vld_in = b_Data_TVALID;

assign b_Data_0_vld_out = b_Data_0_state[1'd0];

assign b_Data_TREADY = b_Data_0_state[1'd1];

assign c_Data_1_ack_in = c_Data_1_state[1'd1];

assign c_Data_1_ack_out = c_Data_TREADY;

assign c_Data_1_load_A = (~c_Data_1_sel_wr & c_Data_1_state_cmp_full);

assign c_Data_1_load_B = (c_Data_1_state_cmp_full & c_Data_1_sel_wr);

assign c_Data_1_sel = c_Data_1_sel_rd;

assign c_Data_1_state_cmp_full = ((c_Data_1_state != 2'd1) ? 1'b1 : 1'b0);

assign c_Data_1_vld_out = c_Data_1_state[1'd0];

assign c_Data_TDATA = c_Data_1_data_out;

assign c_Data_TVALID = c_Data_1_state[1'd0];

assign tmp_1_1_cast_fu_181_p1 = tmp_1_fu_85_p4;

assign tmp_1_2_cast_fu_197_p1 = tmp_2_fu_95_p4;

assign tmp_1_3_cast_fu_213_p1 = tmp_3_fu_105_p4;

assign tmp_1_fu_85_p4 = {{a_Data_0_data_out[15:8]}};

assign tmp_2_fu_95_p4 = {{a_Data_0_data_out[23:16]}};

assign tmp_3_fu_105_p4 = {{a_Data_0_data_out[31:24]}};

assign tmp_4_fu_115_p1 = b_Data_0_data_out[15:0];

assign tmp_51_cast_fu_153_p1 = $signed(tmp_4_fu_115_p1);

assign tmp_5_0_1_cast_fu_160_p1 = $signed(tmp_5_fu_119_p4);

assign tmp_5_0_2_cast_fu_167_p1 = $signed(tmp_6_fu_129_p4);

assign tmp_5_0_3_cast_fu_174_p1 = $signed(tmp_7_fu_139_p4);

assign tmp_5_fu_119_p4 = {{b_Data_0_data_out[31:16]}};

assign tmp_61_cast_fu_157_p1 = tmp_s_fu_266_p2;

assign tmp_6_0_1_cast_fu_164_p1 = tmp_6_0_1_fu_273_p2;

assign tmp_6_0_1_fu_273_p0 = tmp_5_0_1_cast_fu_160_p1;

assign tmp_6_0_1_fu_273_p1 = tmp_cast_fu_149_p1;

assign tmp_6_0_2_cast_fu_171_p1 = tmp_6_0_2_fu_280_p2;

assign tmp_6_0_2_fu_280_p0 = tmp_5_0_2_cast_fu_167_p1;

assign tmp_6_0_2_fu_280_p1 = tmp_cast_fu_149_p1;

assign tmp_6_0_3_cast_fu_178_p1 = tmp_6_0_3_fu_287_p2;

assign tmp_6_0_3_fu_287_p0 = tmp_5_0_3_cast_fu_174_p1;

assign tmp_6_0_3_fu_287_p1 = tmp_cast_fu_149_p1;

assign tmp_6_1_1_cast_fu_188_p1 = tmp_6_1_1_fu_301_p2;

assign tmp_6_1_1_fu_301_p0 = tmp_5_0_1_cast_fu_160_p1;

assign tmp_6_1_1_fu_301_p1 = tmp_1_1_cast_fu_181_p1;

assign tmp_6_1_2_cast_fu_191_p1 = tmp_6_1_2_fu_308_p2;

assign tmp_6_1_2_fu_308_p0 = tmp_5_0_2_cast_fu_167_p1;

assign tmp_6_1_2_fu_308_p1 = tmp_1_1_cast_fu_181_p1;

assign tmp_6_1_3_cast_fu_194_p1 = tmp_6_1_3_fu_315_p2;

assign tmp_6_1_3_fu_315_p0 = tmp_5_0_3_cast_fu_174_p1;

assign tmp_6_1_3_fu_315_p1 = tmp_1_1_cast_fu_181_p1;

assign tmp_6_1_cast_fu_185_p1 = tmp_6_1_fu_294_p2;

assign tmp_6_1_fu_294_p0 = tmp_51_cast_fu_153_p1;

assign tmp_6_1_fu_294_p1 = tmp_1_1_cast_fu_181_p1;

assign tmp_6_2_1_cast_fu_204_p1 = tmp_6_2_1_fu_329_p2;

assign tmp_6_2_1_fu_329_p0 = tmp_5_0_1_cast_fu_160_p1;

assign tmp_6_2_1_fu_329_p1 = tmp_1_2_cast_fu_197_p1;

assign tmp_6_2_2_cast_fu_207_p1 = tmp_6_2_2_fu_336_p2;

assign tmp_6_2_2_fu_336_p0 = tmp_5_0_2_cast_fu_167_p1;

assign tmp_6_2_2_fu_336_p1 = tmp_1_2_cast_fu_197_p1;

assign tmp_6_2_3_cast_fu_210_p1 = tmp_6_2_3_fu_343_p2;

assign tmp_6_2_3_fu_343_p0 = tmp_5_0_3_cast_fu_174_p1;

assign tmp_6_2_3_fu_343_p1 = tmp_1_2_cast_fu_197_p1;

assign tmp_6_2_cast_fu_201_p1 = tmp_6_2_fu_322_p2;

assign tmp_6_2_fu_322_p0 = tmp_51_cast_fu_153_p1;

assign tmp_6_2_fu_322_p1 = tmp_1_2_cast_fu_197_p1;

assign tmp_6_3_1_cast_fu_220_p1 = tmp_6_3_1_fu_357_p2;

assign tmp_6_3_1_fu_357_p0 = tmp_5_0_1_cast_fu_160_p1;

assign tmp_6_3_1_fu_357_p1 = tmp_1_3_cast_fu_213_p1;

assign tmp_6_3_2_cast_fu_223_p1 = tmp_6_3_2_fu_364_p2;

assign tmp_6_3_2_fu_364_p0 = tmp_5_0_2_cast_fu_167_p1;

assign tmp_6_3_2_fu_364_p1 = tmp_1_3_cast_fu_213_p1;

assign tmp_6_3_3_fu_371_p0 = tmp_5_0_3_cast_fu_174_p1;

assign tmp_6_3_3_fu_371_p1 = tmp_1_3_cast_fu_213_p1;

assign tmp_6_3_cast_fu_217_p1 = tmp_6_3_fu_350_p2;

assign tmp_6_3_fu_350_p0 = tmp_51_cast_fu_153_p1;

assign tmp_6_3_fu_350_p1 = tmp_1_3_cast_fu_213_p1;

assign tmp_6_fu_129_p4 = {{b_Data_0_data_out[47:32]}};

assign tmp_7_fu_139_p4 = {{b_Data_0_data_out[63:48]}};

assign tmp_8_fu_261_p1 = $signed(tmp_9_fu_226_p17);

assign tmp_9_fu_226_p17 = {{{{{{{{{{{{{{{{tmp_6_3_3_fu_371_p2}, {tmp_6_3_2_cast_fu_223_p1}}, {tmp_6_3_1_cast_fu_220_p1}}, {tmp_6_3_cast_fu_217_p1}}, {tmp_6_2_3_cast_fu_210_p1}}, {tmp_6_2_2_cast_fu_207_p1}}, {tmp_6_2_1_cast_fu_204_p1}}, {tmp_6_2_cast_fu_201_p1}}, {tmp_6_1_3_cast_fu_194_p1}}, {tmp_6_1_2_cast_fu_191_p1}}, {tmp_6_1_1_cast_fu_188_p1}}, {tmp_6_1_cast_fu_185_p1}}, {tmp_6_0_3_cast_fu_178_p1}}, {tmp_6_0_2_cast_fu_171_p1}}, {tmp_6_0_1_cast_fu_164_p1}}, {tmp_61_cast_fu_157_p1}};

assign tmp_cast_fu_149_p1 = tmp_fu_81_p1;

assign tmp_fu_81_p1 = a_Data_0_data_out[7:0];

assign tmp_s_fu_266_p0 = tmp_51_cast_fu_153_p1;

assign tmp_s_fu_266_p1 = tmp_cast_fu_149_p1;

endmodule //MAC_Tree_4x4x1
