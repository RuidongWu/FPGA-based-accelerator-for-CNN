// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Layer3_Kernel,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xazu3eg-sfvc784-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.702250,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1704,HLS_SYN_LUT=1004,HLS_VERSION=2018_3}" *)

module Layer3_Kernel (
        ap_clk,
        ap_rst_n,
        weight_TDATA,
        weight_TVALID,
        weight_TREADY,
        b_Data_TDATA,
        b_Data_TVALID,
        b_Data_TREADY,
        Bias_Data
);

parameter    ap_ST_fsm_state1 = 22'd1;
parameter    ap_ST_fsm_state2 = 22'd2;
parameter    ap_ST_fsm_state3 = 22'd4;
parameter    ap_ST_fsm_state4 = 22'd8;
parameter    ap_ST_fsm_state5 = 22'd16;
parameter    ap_ST_fsm_state6 = 22'd32;
parameter    ap_ST_fsm_state7 = 22'd64;
parameter    ap_ST_fsm_state8 = 22'd128;
parameter    ap_ST_fsm_state9 = 22'd256;
parameter    ap_ST_fsm_state10 = 22'd512;
parameter    ap_ST_fsm_state11 = 22'd1024;
parameter    ap_ST_fsm_state12 = 22'd2048;
parameter    ap_ST_fsm_state13 = 22'd4096;
parameter    ap_ST_fsm_state14 = 22'd8192;
parameter    ap_ST_fsm_state15 = 22'd16384;
parameter    ap_ST_fsm_state16 = 22'd32768;
parameter    ap_ST_fsm_state17 = 22'd65536;
parameter    ap_ST_fsm_state18 = 22'd131072;
parameter    ap_ST_fsm_state19 = 22'd262144;
parameter    ap_ST_fsm_state20 = 22'd524288;
parameter    ap_ST_fsm_pp1_stage0 = 22'd1048576;
parameter    ap_ST_fsm_state24 = 22'd2097152;

input   ap_clk;
input   ap_rst_n;
input  [15:0] weight_TDATA;
input   weight_TVALID;
output   weight_TREADY;
output  [255:0] b_Data_TDATA;
output   b_Data_TVALID;
input   b_Data_TREADY;
output  [255:0] Bias_Data;

 reg    ap_rst_n_inv;
reg   [15:0] weight_0_data_out;
wire    weight_0_vld_in;
wire    weight_0_vld_out;
wire    weight_0_ack_in;
reg    weight_0_ack_out;
reg   [15:0] weight_0_payload_A;
reg   [15:0] weight_0_payload_B;
reg    weight_0_sel_rd;
reg    weight_0_sel_wr;
wire    weight_0_sel;
wire    weight_0_load_A;
wire    weight_0_load_B;
reg   [1:0] weight_0_state;
wire    weight_0_state_cmp_full;
reg   [255:0] b_Data_1_data_out;
reg    b_Data_1_vld_in;
wire    b_Data_1_vld_out;
wire    b_Data_1_ack_in;
wire    b_Data_1_ack_out;
reg   [255:0] b_Data_1_payload_A;
reg   [255:0] b_Data_1_payload_B;
reg    b_Data_1_sel_rd;
reg    b_Data_1_sel_wr;
wire    b_Data_1_sel;
wire    b_Data_1_load_A;
wire    b_Data_1_load_B;
reg   [1:0] b_Data_1_state;
wire    b_Data_1_state_cmp_full;
reg   [255:0] Bias_Data_1_data_reg;
reg    Bias_Data_1_vld_reg;
reg    Bias_Data_1_vld_in;
wire   [6:0] kernel_0_0_address0;
reg    kernel_0_0_ce0;
wire   [15:0] kernel_0_0_q0;
wire   [6:0] kernel_0_0_address1;
reg    kernel_0_0_ce1;
reg    kernel_0_0_we1;
wire   [6:0] kernel_0_1_address0;
reg    kernel_0_1_ce0;
wire   [15:0] kernel_0_1_q0;
wire   [6:0] kernel_0_1_address1;
reg    kernel_0_1_ce1;
reg    kernel_0_1_we1;
wire   [6:0] kernel_1_0_address0;
reg    kernel_1_0_ce0;
wire   [15:0] kernel_1_0_q0;
wire   [6:0] kernel_1_0_address1;
reg    kernel_1_0_ce1;
reg    kernel_1_0_we1;
wire   [6:0] kernel_1_1_address0;
reg    kernel_1_1_ce0;
wire   [15:0] kernel_1_1_q0;
wire   [6:0] kernel_1_1_address1;
reg    kernel_1_1_ce1;
reg    kernel_1_1_we1;
wire   [6:0] kernel_2_0_address0;
reg    kernel_2_0_ce0;
wire   [15:0] kernel_2_0_q0;
wire   [6:0] kernel_2_0_address1;
reg    kernel_2_0_ce1;
reg    kernel_2_0_we1;
wire   [6:0] kernel_2_1_address0;
reg    kernel_2_1_ce0;
wire   [15:0] kernel_2_1_q0;
wire   [6:0] kernel_2_1_address1;
reg    kernel_2_1_ce1;
reg    kernel_2_1_we1;
wire   [6:0] kernel_3_0_address0;
reg    kernel_3_0_ce0;
wire   [15:0] kernel_3_0_q0;
wire   [6:0] kernel_3_0_address1;
reg    kernel_3_0_ce1;
reg    kernel_3_0_we1;
wire   [6:0] kernel_3_1_address0;
reg    kernel_3_1_ce0;
wire   [15:0] kernel_3_1_q0;
wire   [6:0] kernel_3_1_address1;
reg    kernel_3_1_ce1;
reg    kernel_3_1_we1;
wire   [6:0] kernel_4_0_address0;
reg    kernel_4_0_ce0;
wire   [15:0] kernel_4_0_q0;
wire   [6:0] kernel_4_0_address1;
reg    kernel_4_0_ce1;
reg    kernel_4_0_we1;
wire   [6:0] kernel_4_1_address0;
reg    kernel_4_1_ce0;
wire   [15:0] kernel_4_1_q0;
wire   [6:0] kernel_4_1_address1;
reg    kernel_4_1_ce1;
reg    kernel_4_1_we1;
wire   [6:0] kernel_5_0_address0;
reg    kernel_5_0_ce0;
wire   [15:0] kernel_5_0_q0;
wire   [6:0] kernel_5_0_address1;
reg    kernel_5_0_ce1;
reg    kernel_5_0_we1;
wire   [6:0] kernel_5_1_address0;
reg    kernel_5_1_ce0;
wire   [15:0] kernel_5_1_q0;
wire   [6:0] kernel_5_1_address1;
reg    kernel_5_1_ce1;
reg    kernel_5_1_we1;
wire   [6:0] kernel_6_0_address0;
reg    kernel_6_0_ce0;
wire   [15:0] kernel_6_0_q0;
wire   [6:0] kernel_6_0_address1;
reg    kernel_6_0_ce1;
reg    kernel_6_0_we1;
wire   [6:0] kernel_6_1_address0;
reg    kernel_6_1_ce0;
wire   [15:0] kernel_6_1_q0;
wire   [6:0] kernel_6_1_address1;
reg    kernel_6_1_ce1;
reg    kernel_6_1_we1;
wire   [6:0] kernel_7_0_address0;
reg    kernel_7_0_ce0;
wire   [15:0] kernel_7_0_q0;
wire   [6:0] kernel_7_0_address1;
reg    kernel_7_0_ce1;
reg    kernel_7_0_we1;
wire   [6:0] kernel_7_1_address0;
reg    kernel_7_1_ce0;
wire   [15:0] kernel_7_1_q0;
wire   [6:0] kernel_7_1_address1;
reg    kernel_7_1_ce1;
reg    kernel_7_1_we1;
reg    weight_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [21:0] ap_CS_fsm;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond_flatten1_fu_675_p2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
reg    b_Data_TDATA_blk_n;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] exitcond_flatten2_reg_1157;
reg    ap_enable_reg_pp1_iter2;
reg   [0:0] exitcond_flatten2_reg_1157_pp1_iter1_reg;
reg   [6:0] indvar_flatten2_reg_637;
reg   [3:0] i2_reg_648;
reg   [3:0] p_34_rec_reg_659;
wire   [10:0] indvar_flatten_next2_fu_681_p2;
reg    ap_block_state2;
wire   [3:0] tmp_mid2_v_fu_707_p3;
wire   [3:0] m_mid2_fu_789_p3;
wire   [4:0] n_fu_841_p2;
wire   [8:0] indvar_flatten_next_fu_853_p3;
reg   [15:0] weight_read_reg_1068;
reg   [15:0] weight_read_1_reg_1073;
reg   [15:0] weight_read_2_reg_1078;
reg   [15:0] weight_read_3_reg_1083;
reg   [15:0] weight_read_4_reg_1088;
reg   [15:0] weight_read_5_reg_1093;
reg   [15:0] weight_read_6_reg_1098;
reg   [15:0] weight_read_7_reg_1103;
reg   [15:0] weight_read_8_reg_1108;
reg   [15:0] weight_read_9_reg_1113;
reg   [15:0] weight_read_10_reg_1118;
reg   [15:0] weight_read_11_reg_1123;
reg   [15:0] weight_read_12_reg_1128;
reg   [15:0] weight_read_13_reg_1133;
reg   [15:0] weight_read_14_reg_1138;
wire   [255:0] tmp_1_fu_861_p17;
reg   [31:0] iter_load_reg_1148;
wire    ap_CS_fsm_state20;
wire   [0:0] exitcond7_fu_886_p2;
reg   [0:0] exitcond7_reg_1153;
wire   [0:0] exitcond_flatten2_fu_892_p2;
wire    ap_block_state21_pp1_stage0_iter0;
wire    ap_block_state22_pp1_stage0_iter1;
reg    ap_block_state22_io;
wire    ap_block_state23_pp1_stage0_iter2;
reg    ap_block_state23_io;
reg    ap_block_pp1_stage0_11001;
wire   [6:0] indvar_flatten_next1_fu_898_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [3:0] tmp_9_mid2_v_fu_924_p3;
reg   [3:0] tmp_9_mid2_v_reg_1166;
wire   [3:0] p_rec_fu_974_p2;
wire   [255:0] tmp_8_fu_980_p17;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state21;
reg   [10:0] indvar_flatten1_reg_582;
wire    ap_CS_fsm_state1;
reg   [3:0] i_reg_593;
reg   [8:0] indvar_flatten_reg_604;
reg   [3:0] m_reg_615;
reg   [4:0] n2_reg_626;
reg   [3:0] ap_phi_mux_i2_phi_fu_652_p4;
wire   [63:0] tmp_5_cast_fu_821_p1;
wire   [63:0] tmp_11_cast_fu_954_p1;
reg   [31:0] iter_fu_142;
wire   [31:0] iter_1_fu_1017_p2;
wire    ap_CS_fsm_state24;
wire    ap_block_pp1_stage0_01001;
wire   [2:0] m_t_mid2_fu_781_p3;
wire   [0:0] tmp_10_fu_797_p1;
wire   [0:0] exitcond_flatten_fu_693_p2;
wire   [3:0] i_1_fu_687_p2;
wire   [6:0] tmp_fu_715_p3;
wire   [2:0] tmp_2_fu_727_p1;
wire   [0:0] exitcond_fu_745_p2;
wire   [0:0] not_exitcond_flatten_fu_739_p2;
wire   [3:0] m_mid_fu_699_p3;
wire   [0:0] exitcond8_mid_fu_751_p2;
wire   [0:0] tmp_4_fu_763_p2;
wire   [3:0] m_1_fu_757_p2;
wire   [2:0] tmp_3_fu_777_p1;
wire   [2:0] m_t_mid_fu_731_p3;
wire   [4:0] n2_mid2_fu_769_p3;
wire   [3:0] tmp_12_fu_801_p4;
wire   [7:0] tmp_2_cast_fu_723_p1;
wire   [7:0] newIndex1_cast_fu_811_p1;
wire   [7:0] tmp_5_fu_815_p2;
wire   [8:0] indvar_flatten_op_fu_847_p2;
wire   [0:0] exitcond1_fu_910_p2;
wire   [3:0] i_2_fu_904_p2;
wire   [6:0] tmp_9_fu_932_p3;
wire   [3:0] p_34_rec_mid2_fu_916_p3;
wire   [7:0] p_34_rec_cast_cast_fu_944_p1;
wire   [7:0] tmp_10_cast_fu_940_p1;
wire   [7:0] tmp_s_fu_948_p2;
reg   [21:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 weight_0_sel_rd = 1'b0;
#0 weight_0_sel_wr = 1'b0;
#0 weight_0_state = 2'd0;
#0 b_Data_1_sel_rd = 1'b0;
#0 b_Data_1_sel_wr = 1'b0;
#0 b_Data_1_state = 2'd0;
#0 Bias_Data_1_data_reg = 256'd0;
#0 Bias_Data_1_vld_reg = 1'b0;
#0 ap_CS_fsm = 22'd1;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
end

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 72 ),
    .AddressWidth( 7 ))
kernel_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_0_0_address0),
    .ce0(kernel_0_0_ce0),
    .q0(kernel_0_0_q0),
    .address1(kernel_0_0_address1),
    .ce1(kernel_0_0_ce1),
    .we1(kernel_0_0_we1),
    .d1(weight_0_data_out)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 72 ),
    .AddressWidth( 7 ))
kernel_0_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_0_1_address0),
    .ce0(kernel_0_1_ce0),
    .q0(kernel_0_1_q0),
    .address1(kernel_0_1_address1),
    .ce1(kernel_0_1_ce1),
    .we1(kernel_0_1_we1),
    .d1(weight_0_data_out)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 72 ),
    .AddressWidth( 7 ))
kernel_1_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_1_0_address0),
    .ce0(kernel_1_0_ce0),
    .q0(kernel_1_0_q0),
    .address1(kernel_1_0_address1),
    .ce1(kernel_1_0_ce1),
    .we1(kernel_1_0_we1),
    .d1(weight_0_data_out)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 72 ),
    .AddressWidth( 7 ))
kernel_1_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_1_1_address0),
    .ce0(kernel_1_1_ce0),
    .q0(kernel_1_1_q0),
    .address1(kernel_1_1_address1),
    .ce1(kernel_1_1_ce1),
    .we1(kernel_1_1_we1),
    .d1(weight_0_data_out)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 72 ),
    .AddressWidth( 7 ))
kernel_2_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_2_0_address0),
    .ce0(kernel_2_0_ce0),
    .q0(kernel_2_0_q0),
    .address1(kernel_2_0_address1),
    .ce1(kernel_2_0_ce1),
    .we1(kernel_2_0_we1),
    .d1(weight_0_data_out)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 72 ),
    .AddressWidth( 7 ))
kernel_2_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_2_1_address0),
    .ce0(kernel_2_1_ce0),
    .q0(kernel_2_1_q0),
    .address1(kernel_2_1_address1),
    .ce1(kernel_2_1_ce1),
    .we1(kernel_2_1_we1),
    .d1(weight_0_data_out)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 72 ),
    .AddressWidth( 7 ))
kernel_3_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_3_0_address0),
    .ce0(kernel_3_0_ce0),
    .q0(kernel_3_0_q0),
    .address1(kernel_3_0_address1),
    .ce1(kernel_3_0_ce1),
    .we1(kernel_3_0_we1),
    .d1(weight_0_data_out)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 72 ),
    .AddressWidth( 7 ))
kernel_3_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_3_1_address0),
    .ce0(kernel_3_1_ce0),
    .q0(kernel_3_1_q0),
    .address1(kernel_3_1_address1),
    .ce1(kernel_3_1_ce1),
    .we1(kernel_3_1_we1),
    .d1(weight_0_data_out)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 72 ),
    .AddressWidth( 7 ))
kernel_4_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_4_0_address0),
    .ce0(kernel_4_0_ce0),
    .q0(kernel_4_0_q0),
    .address1(kernel_4_0_address1),
    .ce1(kernel_4_0_ce1),
    .we1(kernel_4_0_we1),
    .d1(weight_0_data_out)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 72 ),
    .AddressWidth( 7 ))
kernel_4_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_4_1_address0),
    .ce0(kernel_4_1_ce0),
    .q0(kernel_4_1_q0),
    .address1(kernel_4_1_address1),
    .ce1(kernel_4_1_ce1),
    .we1(kernel_4_1_we1),
    .d1(weight_0_data_out)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 72 ),
    .AddressWidth( 7 ))
kernel_5_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_5_0_address0),
    .ce0(kernel_5_0_ce0),
    .q0(kernel_5_0_q0),
    .address1(kernel_5_0_address1),
    .ce1(kernel_5_0_ce1),
    .we1(kernel_5_0_we1),
    .d1(weight_0_data_out)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 72 ),
    .AddressWidth( 7 ))
kernel_5_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_5_1_address0),
    .ce0(kernel_5_1_ce0),
    .q0(kernel_5_1_q0),
    .address1(kernel_5_1_address1),
    .ce1(kernel_5_1_ce1),
    .we1(kernel_5_1_we1),
    .d1(weight_0_data_out)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 72 ),
    .AddressWidth( 7 ))
kernel_6_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_6_0_address0),
    .ce0(kernel_6_0_ce0),
    .q0(kernel_6_0_q0),
    .address1(kernel_6_0_address1),
    .ce1(kernel_6_0_ce1),
    .we1(kernel_6_0_we1),
    .d1(weight_0_data_out)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 72 ),
    .AddressWidth( 7 ))
kernel_6_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_6_1_address0),
    .ce0(kernel_6_1_ce0),
    .q0(kernel_6_1_q0),
    .address1(kernel_6_1_address1),
    .ce1(kernel_6_1_ce1),
    .we1(kernel_6_1_we1),
    .d1(weight_0_data_out)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 72 ),
    .AddressWidth( 7 ))
kernel_7_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_7_0_address0),
    .ce0(kernel_7_0_ce0),
    .q0(kernel_7_0_q0),
    .address1(kernel_7_0_address1),
    .ce1(kernel_7_0_ce1),
    .we1(kernel_7_0_we1),
    .d1(weight_0_data_out)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 72 ),
    .AddressWidth( 7 ))
kernel_7_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_7_1_address0),
    .ce0(kernel_7_1_ce0),
    .q0(kernel_7_1_q0),
    .address1(kernel_7_1_address1),
    .ce1(kernel_7_1_ce1),
    .we1(kernel_7_1_we1),
    .d1(weight_0_data_out)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state21) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((exitcond7_fu_886_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state20))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state21)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state21);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if (((exitcond7_fu_886_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state20))) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        b_Data_1_sel_rd <= 1'b0;
    end else begin
        if (((b_Data_1_ack_out == 1'b1) & (b_Data_1_vld_out == 1'b1))) begin
            b_Data_1_sel_rd <= ~b_Data_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        b_Data_1_sel_wr <= 1'b0;
    end else begin
        if (((b_Data_1_ack_in == 1'b1) & (b_Data_1_vld_in == 1'b1))) begin
            b_Data_1_sel_wr <= ~b_Data_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        b_Data_1_state <= 2'd0;
    end else begin
        if ((((b_Data_1_state == 2'd2) & (b_Data_1_vld_in == 1'b0)) | ((b_Data_1_state == 2'd3) & (b_Data_1_vld_in == 1'b0) & (b_Data_1_ack_out == 1'b1)))) begin
            b_Data_1_state <= 2'd2;
        end else if ((((b_Data_1_state == 2'd1) & (b_Data_1_ack_out == 1'b0)) | ((b_Data_1_state == 2'd3) & (b_Data_1_ack_out == 1'b0) & (b_Data_1_vld_in == 1'b1)))) begin
            b_Data_1_state <= 2'd1;
        end else if (((~((b_Data_1_vld_in == 1'b0) & (b_Data_1_ack_out == 1'b1)) & ~((b_Data_1_ack_out == 1'b0) & (b_Data_1_vld_in == 1'b1)) & (b_Data_1_state == 2'd3)) | ((b_Data_1_state == 2'd1) & (b_Data_1_ack_out == 1'b1)) | ((b_Data_1_state == 2'd2) & (b_Data_1_vld_in == 1'b1)))) begin
            b_Data_1_state <= 2'd3;
        end else begin
            b_Data_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        weight_0_sel_rd <= 1'b0;
    end else begin
        if (((weight_0_ack_out == 1'b1) & (weight_0_vld_out == 1'b1))) begin
            weight_0_sel_rd <= ~weight_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        weight_0_sel_wr <= 1'b0;
    end else begin
        if (((weight_0_ack_in == 1'b1) & (weight_0_vld_in == 1'b1))) begin
            weight_0_sel_wr <= ~weight_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        weight_0_state <= 2'd0;
    end else begin
        if ((((weight_0_state == 2'd2) & (weight_0_vld_in == 1'b0)) | ((weight_0_state == 2'd3) & (weight_0_vld_in == 1'b0) & (weight_0_ack_out == 1'b1)))) begin
            weight_0_state <= 2'd2;
        end else if ((((weight_0_state == 2'd1) & (weight_0_ack_out == 1'b0)) | ((weight_0_state == 2'd3) & (weight_0_ack_out == 1'b0) & (weight_0_vld_in == 1'b1)))) begin
            weight_0_state <= 2'd1;
        end else if (((~((weight_0_vld_in == 1'b0) & (weight_0_ack_out == 1'b1)) & ~((weight_0_ack_out == 1'b0) & (weight_0_vld_in == 1'b1)) & (weight_0_state == 2'd3)) | ((weight_0_state == 2'd1) & (weight_0_ack_out == 1'b1)) | ((weight_0_state == 2'd2) & (weight_0_vld_in == 1'b1)))) begin
            weight_0_state <= 2'd3;
        end else begin
            weight_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond7_fu_886_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state20))) begin
        i2_reg_648 <= 4'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten2_reg_1157 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i2_reg_648 <= tmp_9_mid2_v_reg_1166;
    end
end

always @ (posedge ap_clk) begin
    if ((~((exitcond_flatten1_fu_675_p2 == 1'd0) & (weight_0_vld_out == 1'b0)) & (exitcond_flatten1_fu_675_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_593 <= tmp_mid2_v_fu_707_p3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        i_reg_593 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((exitcond_flatten1_fu_675_p2 == 1'd0) & (weight_0_vld_out == 1'b0)) & (exitcond_flatten1_fu_675_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten1_reg_582 <= indvar_flatten_next2_fu_681_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        indvar_flatten1_reg_582 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond7_fu_886_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state20))) begin
        indvar_flatten2_reg_637 <= 7'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten2_fu_892_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        indvar_flatten2_reg_637 <= indvar_flatten_next1_fu_898_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((exitcond_flatten1_fu_675_p2 == 1'd0) & (weight_0_vld_out == 1'b0)) & (exitcond_flatten1_fu_675_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten_reg_604 <= indvar_flatten_next_fu_853_p3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        indvar_flatten_reg_604 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond7_reg_1153 == 1'd0) & (1'b1 == ap_CS_fsm_state24))) begin
        iter_fu_142 <= iter_1_fu_1017_p2;
    end else if ((((exitcond7_fu_886_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state20)) | ((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        iter_fu_142 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((exitcond_flatten1_fu_675_p2 == 1'd0) & (weight_0_vld_out == 1'b0)) & (exitcond_flatten1_fu_675_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        m_reg_615 <= m_mid2_fu_789_p3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        m_reg_615 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((exitcond_flatten1_fu_675_p2 == 1'd0) & (weight_0_vld_out == 1'b0)) & (exitcond_flatten1_fu_675_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        n2_reg_626 <= n_fu_841_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        n2_reg_626 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond7_fu_886_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state20))) begin
        p_34_rec_reg_659 <= 4'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten2_fu_892_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        p_34_rec_reg_659 <= p_rec_fu_974_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == Bias_Data_1_vld_reg) & (1'b1 == Bias_Data_1_vld_in)) | ((1'b1 == 1'b1) & (1'b1 == Bias_Data_1_vld_in) & (1'b1 == Bias_Data_1_vld_reg)))) begin
        Bias_Data_1_data_reg <= tmp_1_fu_861_p17;
    end
end

always @ (posedge ap_clk) begin
    if ((b_Data_1_load_A == 1'b1)) begin
        b_Data_1_payload_A <= tmp_8_fu_980_p17;
    end
end

always @ (posedge ap_clk) begin
    if ((b_Data_1_load_B == 1'b1)) begin
        b_Data_1_payload_B <= tmp_8_fu_980_p17;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        exitcond7_reg_1153 <= exitcond7_fu_886_p2;
        iter_load_reg_1148 <= iter_fu_142;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        exitcond_flatten2_reg_1157 <= exitcond_flatten2_fu_892_p2;
        exitcond_flatten2_reg_1157_pp1_iter1_reg <= exitcond_flatten2_reg_1157;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten2_fu_892_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        tmp_9_mid2_v_reg_1166 <= tmp_9_mid2_v_fu_924_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((weight_0_load_A == 1'b1)) begin
        weight_0_payload_A <= weight_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((weight_0_load_B == 1'b1)) begin
        weight_0_payload_B <= weight_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
        weight_read_10_reg_1118 <= weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
        weight_read_11_reg_1123 <= weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
        weight_read_12_reg_1128 <= weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
        weight_read_13_reg_1133 <= weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        weight_read_14_reg_1138 <= weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        weight_read_1_reg_1073 <= weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        weight_read_2_reg_1078 <= weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        weight_read_3_reg_1083 <= weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        weight_read_4_reg_1088 <= weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        weight_read_5_reg_1093 <= weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        weight_read_6_reg_1098 <= weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        weight_read_7_reg_1103 <= weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        weight_read_8_reg_1108 <= weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        weight_read_9_reg_1113 <= weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        weight_read_reg_1068 <= weight_0_data_out;
    end
end

always @ (*) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
        Bias_Data_1_vld_in = 1'b1;
    end else begin
        Bias_Data_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_flatten2_fu_892_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state21 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state21 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten2_reg_1157 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_i2_phi_fu_652_p4 = tmp_9_mid2_v_reg_1166;
    end else begin
        ap_phi_mux_i2_phi_fu_652_p4 = i2_reg_648;
    end
end

always @ (*) begin
    if ((b_Data_1_sel == 1'b1)) begin
        b_Data_1_data_out = b_Data_1_payload_B;
    end else begin
        b_Data_1_data_out = b_Data_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten2_reg_1157 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        b_Data_1_vld_in = 1'b1;
    end else begin
        b_Data_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond_flatten2_reg_1157_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((exitcond_flatten2_reg_1157 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        b_Data_TDATA_blk_n = b_Data_1_state[1'd1];
    end else begin
        b_Data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        kernel_0_0_ce0 = 1'b1;
    end else begin
        kernel_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_flatten1_fu_675_p2 == 1'd0) & (weight_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        kernel_0_0_ce1 = 1'b1;
    end else begin
        kernel_0_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_flatten1_fu_675_p2 == 1'd0) & (weight_0_vld_out == 1'b0)) & (m_t_mid2_fu_781_p3 == 3'd0) & (tmp_10_fu_797_p1 == 1'd0) & (exitcond_flatten1_fu_675_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        kernel_0_0_we1 = 1'b1;
    end else begin
        kernel_0_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        kernel_0_1_ce0 = 1'b1;
    end else begin
        kernel_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_flatten1_fu_675_p2 == 1'd0) & (weight_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        kernel_0_1_ce1 = 1'b1;
    end else begin
        kernel_0_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_flatten1_fu_675_p2 == 1'd0) & (weight_0_vld_out == 1'b0)) & (m_t_mid2_fu_781_p3 == 3'd0) & (tmp_10_fu_797_p1 == 1'd1) & (exitcond_flatten1_fu_675_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        kernel_0_1_we1 = 1'b1;
    end else begin
        kernel_0_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        kernel_1_0_ce0 = 1'b1;
    end else begin
        kernel_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_flatten1_fu_675_p2 == 1'd0) & (weight_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        kernel_1_0_ce1 = 1'b1;
    end else begin
        kernel_1_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_flatten1_fu_675_p2 == 1'd0) & (weight_0_vld_out == 1'b0)) & (m_t_mid2_fu_781_p3 == 3'd1) & (tmp_10_fu_797_p1 == 1'd0) & (exitcond_flatten1_fu_675_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        kernel_1_0_we1 = 1'b1;
    end else begin
        kernel_1_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        kernel_1_1_ce0 = 1'b1;
    end else begin
        kernel_1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_flatten1_fu_675_p2 == 1'd0) & (weight_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        kernel_1_1_ce1 = 1'b1;
    end else begin
        kernel_1_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_flatten1_fu_675_p2 == 1'd0) & (weight_0_vld_out == 1'b0)) & (m_t_mid2_fu_781_p3 == 3'd1) & (tmp_10_fu_797_p1 == 1'd1) & (exitcond_flatten1_fu_675_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        kernel_1_1_we1 = 1'b1;
    end else begin
        kernel_1_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        kernel_2_0_ce0 = 1'b1;
    end else begin
        kernel_2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_flatten1_fu_675_p2 == 1'd0) & (weight_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        kernel_2_0_ce1 = 1'b1;
    end else begin
        kernel_2_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_flatten1_fu_675_p2 == 1'd0) & (weight_0_vld_out == 1'b0)) & (m_t_mid2_fu_781_p3 == 3'd2) & (tmp_10_fu_797_p1 == 1'd0) & (exitcond_flatten1_fu_675_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        kernel_2_0_we1 = 1'b1;
    end else begin
        kernel_2_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        kernel_2_1_ce0 = 1'b1;
    end else begin
        kernel_2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_flatten1_fu_675_p2 == 1'd0) & (weight_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        kernel_2_1_ce1 = 1'b1;
    end else begin
        kernel_2_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_flatten1_fu_675_p2 == 1'd0) & (weight_0_vld_out == 1'b0)) & (m_t_mid2_fu_781_p3 == 3'd2) & (tmp_10_fu_797_p1 == 1'd1) & (exitcond_flatten1_fu_675_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        kernel_2_1_we1 = 1'b1;
    end else begin
        kernel_2_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        kernel_3_0_ce0 = 1'b1;
    end else begin
        kernel_3_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_flatten1_fu_675_p2 == 1'd0) & (weight_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        kernel_3_0_ce1 = 1'b1;
    end else begin
        kernel_3_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_flatten1_fu_675_p2 == 1'd0) & (weight_0_vld_out == 1'b0)) & (m_t_mid2_fu_781_p3 == 3'd3) & (tmp_10_fu_797_p1 == 1'd0) & (exitcond_flatten1_fu_675_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        kernel_3_0_we1 = 1'b1;
    end else begin
        kernel_3_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        kernel_3_1_ce0 = 1'b1;
    end else begin
        kernel_3_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_flatten1_fu_675_p2 == 1'd0) & (weight_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        kernel_3_1_ce1 = 1'b1;
    end else begin
        kernel_3_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_flatten1_fu_675_p2 == 1'd0) & (weight_0_vld_out == 1'b0)) & (m_t_mid2_fu_781_p3 == 3'd3) & (tmp_10_fu_797_p1 == 1'd1) & (exitcond_flatten1_fu_675_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        kernel_3_1_we1 = 1'b1;
    end else begin
        kernel_3_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        kernel_4_0_ce0 = 1'b1;
    end else begin
        kernel_4_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_flatten1_fu_675_p2 == 1'd0) & (weight_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        kernel_4_0_ce1 = 1'b1;
    end else begin
        kernel_4_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_flatten1_fu_675_p2 == 1'd0) & (weight_0_vld_out == 1'b0)) & (m_t_mid2_fu_781_p3 == 3'd4) & (tmp_10_fu_797_p1 == 1'd0) & (exitcond_flatten1_fu_675_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        kernel_4_0_we1 = 1'b1;
    end else begin
        kernel_4_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        kernel_4_1_ce0 = 1'b1;
    end else begin
        kernel_4_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_flatten1_fu_675_p2 == 1'd0) & (weight_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        kernel_4_1_ce1 = 1'b1;
    end else begin
        kernel_4_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_flatten1_fu_675_p2 == 1'd0) & (weight_0_vld_out == 1'b0)) & (m_t_mid2_fu_781_p3 == 3'd4) & (tmp_10_fu_797_p1 == 1'd1) & (exitcond_flatten1_fu_675_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        kernel_4_1_we1 = 1'b1;
    end else begin
        kernel_4_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        kernel_5_0_ce0 = 1'b1;
    end else begin
        kernel_5_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_flatten1_fu_675_p2 == 1'd0) & (weight_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        kernel_5_0_ce1 = 1'b1;
    end else begin
        kernel_5_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_flatten1_fu_675_p2 == 1'd0) & (weight_0_vld_out == 1'b0)) & (m_t_mid2_fu_781_p3 == 3'd5) & (tmp_10_fu_797_p1 == 1'd0) & (exitcond_flatten1_fu_675_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        kernel_5_0_we1 = 1'b1;
    end else begin
        kernel_5_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        kernel_5_1_ce0 = 1'b1;
    end else begin
        kernel_5_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_flatten1_fu_675_p2 == 1'd0) & (weight_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        kernel_5_1_ce1 = 1'b1;
    end else begin
        kernel_5_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_flatten1_fu_675_p2 == 1'd0) & (weight_0_vld_out == 1'b0)) & (m_t_mid2_fu_781_p3 == 3'd5) & (tmp_10_fu_797_p1 == 1'd1) & (exitcond_flatten1_fu_675_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        kernel_5_1_we1 = 1'b1;
    end else begin
        kernel_5_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        kernel_6_0_ce0 = 1'b1;
    end else begin
        kernel_6_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_flatten1_fu_675_p2 == 1'd0) & (weight_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        kernel_6_0_ce1 = 1'b1;
    end else begin
        kernel_6_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_flatten1_fu_675_p2 == 1'd0) & (weight_0_vld_out == 1'b0)) & (m_t_mid2_fu_781_p3 == 3'd6) & (tmp_10_fu_797_p1 == 1'd0) & (exitcond_flatten1_fu_675_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        kernel_6_0_we1 = 1'b1;
    end else begin
        kernel_6_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        kernel_6_1_ce0 = 1'b1;
    end else begin
        kernel_6_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_flatten1_fu_675_p2 == 1'd0) & (weight_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        kernel_6_1_ce1 = 1'b1;
    end else begin
        kernel_6_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_flatten1_fu_675_p2 == 1'd0) & (weight_0_vld_out == 1'b0)) & (m_t_mid2_fu_781_p3 == 3'd6) & (tmp_10_fu_797_p1 == 1'd1) & (exitcond_flatten1_fu_675_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        kernel_6_1_we1 = 1'b1;
    end else begin
        kernel_6_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        kernel_7_0_ce0 = 1'b1;
    end else begin
        kernel_7_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_flatten1_fu_675_p2 == 1'd0) & (weight_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        kernel_7_0_ce1 = 1'b1;
    end else begin
        kernel_7_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_flatten1_fu_675_p2 == 1'd0) & (weight_0_vld_out == 1'b0)) & (m_t_mid2_fu_781_p3 == 3'd7) & (tmp_10_fu_797_p1 == 1'd0) & (exitcond_flatten1_fu_675_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        kernel_7_0_we1 = 1'b1;
    end else begin
        kernel_7_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        kernel_7_1_ce0 = 1'b1;
    end else begin
        kernel_7_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_flatten1_fu_675_p2 == 1'd0) & (weight_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        kernel_7_1_ce1 = 1'b1;
    end else begin
        kernel_7_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_flatten1_fu_675_p2 == 1'd0) & (weight_0_vld_out == 1'b0)) & (m_t_mid2_fu_781_p3 == 3'd7) & (tmp_10_fu_797_p1 == 1'd1) & (exitcond_flatten1_fu_675_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        kernel_7_1_we1 = 1'b1;
    end else begin
        kernel_7_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state18)) | ((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state17)) | ((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | ((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state15)) | ((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state14)) | ((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state13)) | ((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state12)) | ((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state11)) | ((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state10)) | ((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state7)) | ((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state5)) | ((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | (~((exitcond_flatten1_fu_675_p2 == 1'd0) & (weight_0_vld_out == 1'b0)) & (exitcond_flatten1_fu_675_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        weight_0_ack_out = 1'b1;
    end else begin
        weight_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((weight_0_sel == 1'b1)) begin
        weight_0_data_out = weight_0_payload_B;
    end else begin
        weight_0_data_out = weight_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((exitcond_flatten1_fu_675_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        weight_TDATA_blk_n = weight_0_state[1'd0];
    end else begin
        weight_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if ((~((exitcond_flatten1_fu_675_p2 == 1'd0) & (weight_0_vld_out == 1'b0)) & (exitcond_flatten1_fu_675_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((exitcond_flatten1_fu_675_p2 == 1'd0) & (weight_0_vld_out == 1'b0)) & (exitcond_flatten1_fu_675_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            if (((exitcond7_fu_886_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (exitcond_flatten2_fu_892_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (exitcond_flatten2_fu_892_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Bias_Data = Bias_Data_1_data_reg;

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((1'b1 == ap_block_state23_io) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b1 == ap_block_state22_io) & (ap_enable_reg_pp1_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((1'b1 == ap_block_state23_io) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b1 == ap_block_state22_io) & (ap_enable_reg_pp1_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state2 = ((exitcond_flatten1_fu_675_p2 == 1'd0) & (weight_0_vld_out == 1'b0));
end

assign ap_block_state21_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state22_io = ((exitcond_flatten2_reg_1157 == 1'd0) & (b_Data_1_ack_in == 1'b0));
end

assign ap_block_state22_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state23_io = ((exitcond_flatten2_reg_1157_pp1_iter1_reg == 1'd0) & (b_Data_1_ack_in == 1'b0));
end

assign ap_block_state23_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign b_Data_1_ack_in = b_Data_1_state[1'd1];

assign b_Data_1_ack_out = b_Data_TREADY;

assign b_Data_1_load_A = (~b_Data_1_sel_wr & b_Data_1_state_cmp_full);

assign b_Data_1_load_B = (b_Data_1_state_cmp_full & b_Data_1_sel_wr);

assign b_Data_1_sel = b_Data_1_sel_rd;

assign b_Data_1_state_cmp_full = ((b_Data_1_state != 2'd1) ? 1'b1 : 1'b0);

assign b_Data_1_vld_out = b_Data_1_state[1'd0];

assign b_Data_TDATA = b_Data_1_data_out;

assign b_Data_TVALID = b_Data_1_state[1'd0];

assign exitcond1_fu_910_p2 = ((p_34_rec_reg_659 == 4'd8) ? 1'b1 : 1'b0);

assign exitcond7_fu_886_p2 = ((iter_fu_142 == 32'd16) ? 1'b1 : 1'b0);

assign exitcond8_mid_fu_751_p2 = (not_exitcond_flatten_fu_739_p2 & exitcond_fu_745_p2);

assign exitcond_flatten1_fu_675_p2 = ((indvar_flatten1_reg_582 == 11'd1152) ? 1'b1 : 1'b0);

assign exitcond_flatten2_fu_892_p2 = ((indvar_flatten2_reg_637 == 7'd72) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_693_p2 = ((indvar_flatten_reg_604 == 9'd128) ? 1'b1 : 1'b0);

assign exitcond_fu_745_p2 = ((n2_reg_626 == 5'd16) ? 1'b1 : 1'b0);

assign i_1_fu_687_p2 = (4'd1 + i_reg_593);

assign i_2_fu_904_p2 = (ap_phi_mux_i2_phi_fu_652_p4 + 4'd1);

assign indvar_flatten_next1_fu_898_p2 = (indvar_flatten2_reg_637 + 7'd1);

assign indvar_flatten_next2_fu_681_p2 = (indvar_flatten1_reg_582 + 11'd1);

assign indvar_flatten_next_fu_853_p3 = ((exitcond_flatten_fu_693_p2[0:0] === 1'b1) ? 9'd1 : indvar_flatten_op_fu_847_p2);

assign indvar_flatten_op_fu_847_p2 = (indvar_flatten_reg_604 + 9'd1);

assign iter_1_fu_1017_p2 = (iter_load_reg_1148 + 32'd1);

assign kernel_0_0_address0 = tmp_11_cast_fu_954_p1;

assign kernel_0_0_address1 = tmp_5_cast_fu_821_p1;

assign kernel_0_1_address0 = tmp_11_cast_fu_954_p1;

assign kernel_0_1_address1 = tmp_5_cast_fu_821_p1;

assign kernel_1_0_address0 = tmp_11_cast_fu_954_p1;

assign kernel_1_0_address1 = tmp_5_cast_fu_821_p1;

assign kernel_1_1_address0 = tmp_11_cast_fu_954_p1;

assign kernel_1_1_address1 = tmp_5_cast_fu_821_p1;

assign kernel_2_0_address0 = tmp_11_cast_fu_954_p1;

assign kernel_2_0_address1 = tmp_5_cast_fu_821_p1;

assign kernel_2_1_address0 = tmp_11_cast_fu_954_p1;

assign kernel_2_1_address1 = tmp_5_cast_fu_821_p1;

assign kernel_3_0_address0 = tmp_11_cast_fu_954_p1;

assign kernel_3_0_address1 = tmp_5_cast_fu_821_p1;

assign kernel_3_1_address0 = tmp_11_cast_fu_954_p1;

assign kernel_3_1_address1 = tmp_5_cast_fu_821_p1;

assign kernel_4_0_address0 = tmp_11_cast_fu_954_p1;

assign kernel_4_0_address1 = tmp_5_cast_fu_821_p1;

assign kernel_4_1_address0 = tmp_11_cast_fu_954_p1;

assign kernel_4_1_address1 = tmp_5_cast_fu_821_p1;

assign kernel_5_0_address0 = tmp_11_cast_fu_954_p1;

assign kernel_5_0_address1 = tmp_5_cast_fu_821_p1;

assign kernel_5_1_address0 = tmp_11_cast_fu_954_p1;

assign kernel_5_1_address1 = tmp_5_cast_fu_821_p1;

assign kernel_6_0_address0 = tmp_11_cast_fu_954_p1;

assign kernel_6_0_address1 = tmp_5_cast_fu_821_p1;

assign kernel_6_1_address0 = tmp_11_cast_fu_954_p1;

assign kernel_6_1_address1 = tmp_5_cast_fu_821_p1;

assign kernel_7_0_address0 = tmp_11_cast_fu_954_p1;

assign kernel_7_0_address1 = tmp_5_cast_fu_821_p1;

assign kernel_7_1_address0 = tmp_11_cast_fu_954_p1;

assign kernel_7_1_address1 = tmp_5_cast_fu_821_p1;

assign m_1_fu_757_p2 = (4'd1 + m_mid_fu_699_p3);

assign m_mid2_fu_789_p3 = ((exitcond8_mid_fu_751_p2[0:0] === 1'b1) ? m_1_fu_757_p2 : m_mid_fu_699_p3);

assign m_mid_fu_699_p3 = ((exitcond_flatten_fu_693_p2[0:0] === 1'b1) ? 4'd0 : m_reg_615);

assign m_t_mid2_fu_781_p3 = ((exitcond8_mid_fu_751_p2[0:0] === 1'b1) ? tmp_3_fu_777_p1 : m_t_mid_fu_731_p3);

assign m_t_mid_fu_731_p3 = ((exitcond_flatten_fu_693_p2[0:0] === 1'b1) ? 3'd0 : tmp_2_fu_727_p1);

assign n2_mid2_fu_769_p3 = ((tmp_4_fu_763_p2[0:0] === 1'b1) ? 5'd0 : n2_reg_626);

assign n_fu_841_p2 = (n2_mid2_fu_769_p3 + 5'd1);

assign newIndex1_cast_fu_811_p1 = tmp_12_fu_801_p4;

assign not_exitcond_flatten_fu_739_p2 = (exitcond_flatten_fu_693_p2 ^ 1'd1);

assign p_34_rec_cast_cast_fu_944_p1 = p_34_rec_mid2_fu_916_p3;

assign p_34_rec_mid2_fu_916_p3 = ((exitcond1_fu_910_p2[0:0] === 1'b1) ? 4'd0 : p_34_rec_reg_659);

assign p_rec_fu_974_p2 = (p_34_rec_mid2_fu_916_p3 + 4'd1);

assign tmp_10_cast_fu_940_p1 = tmp_9_fu_932_p3;

assign tmp_10_fu_797_p1 = n2_mid2_fu_769_p3[0:0];

assign tmp_11_cast_fu_954_p1 = tmp_s_fu_948_p2;

assign tmp_12_fu_801_p4 = {{n2_mid2_fu_769_p3[4:1]}};

assign tmp_1_fu_861_p17 = {{{{{{{{{{{{{{{{weight_0_data_out}, {weight_read_14_reg_1138}}, {weight_read_13_reg_1133}}, {weight_read_12_reg_1128}}, {weight_read_11_reg_1123}}, {weight_read_10_reg_1118}}, {weight_read_9_reg_1113}}, {weight_read_8_reg_1108}}, {weight_read_7_reg_1103}}, {weight_read_6_reg_1098}}, {weight_read_5_reg_1093}}, {weight_read_4_reg_1088}}, {weight_read_3_reg_1083}}, {weight_read_2_reg_1078}}, {weight_read_1_reg_1073}}, {weight_read_reg_1068}};

assign tmp_2_cast_fu_723_p1 = tmp_fu_715_p3;

assign tmp_2_fu_727_p1 = m_reg_615[2:0];

assign tmp_3_fu_777_p1 = m_1_fu_757_p2[2:0];

assign tmp_4_fu_763_p2 = (exitcond_flatten_fu_693_p2 | exitcond8_mid_fu_751_p2);

assign tmp_5_cast_fu_821_p1 = tmp_5_fu_815_p2;

assign tmp_5_fu_815_p2 = (tmp_2_cast_fu_723_p1 + newIndex1_cast_fu_811_p1);

assign tmp_8_fu_980_p17 = {{{{{{{{{{{{{{{{kernel_7_1_q0}, {kernel_6_1_q0}}, {kernel_5_1_q0}}, {kernel_4_1_q0}}, {kernel_3_1_q0}}, {kernel_2_1_q0}}, {kernel_1_1_q0}}, {kernel_0_1_q0}}, {kernel_7_0_q0}}, {kernel_6_0_q0}}, {kernel_5_0_q0}}, {kernel_4_0_q0}}, {kernel_3_0_q0}}, {kernel_2_0_q0}}, {kernel_1_0_q0}}, {kernel_0_0_q0}};

assign tmp_9_fu_932_p3 = {{tmp_9_mid2_v_fu_924_p3}, {3'd0}};

assign tmp_9_mid2_v_fu_924_p3 = ((exitcond1_fu_910_p2[0:0] === 1'b1) ? i_2_fu_904_p2 : ap_phi_mux_i2_phi_fu_652_p4);

assign tmp_fu_715_p3 = {{tmp_mid2_v_fu_707_p3}, {3'd0}};

assign tmp_mid2_v_fu_707_p3 = ((exitcond_flatten_fu_693_p2[0:0] === 1'b1) ? i_1_fu_687_p2 : i_reg_593);

assign tmp_s_fu_948_p2 = (p_34_rec_cast_cast_fu_944_p1 + tmp_10_cast_fu_940_p1);

assign weight_0_ack_in = weight_0_state[1'd1];

assign weight_0_load_A = (weight_0_state_cmp_full & ~weight_0_sel_wr);

assign weight_0_load_B = (weight_0_state_cmp_full & weight_0_sel_wr);

assign weight_0_sel = weight_0_sel_rd;

assign weight_0_state_cmp_full = ((weight_0_state != 2'd1) ? 1'b1 : 1'b0);

assign weight_0_vld_in = weight_TVALID;

assign weight_0_vld_out = weight_0_state[1'd0];

assign weight_TREADY = weight_0_state[1'd1];

endmodule //Layer3_Kernel
