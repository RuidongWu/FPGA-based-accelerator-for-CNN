// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="MAC_Tree_1x8x2,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xazu3eg-sfvc784-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=7.146000,HLS_SYN_LAT=8,HLS_SYN_TPT=8,HLS_SYN_MEM=0,HLS_SYN_DSP=16,HLS_SYN_FF=1045,HLS_SYN_LUT=689,HLS_VERSION=2018_3}" *)

module MAC_Tree_1x8x2 (
        ap_clk,
        ap_rst_n,
        a_Data_TDATA,
        a_Data_TVALID,
        a_Data_TREADY,
        b_Data_TDATA,
        b_Data_TVALID,
        b_Data_TREADY,
        c_Data_TDATA,
        c_Data_TVALID,
        c_Data_TREADY
);

parameter    ap_ST_fsm_pp0_stage0 = 8'd1;
parameter    ap_ST_fsm_pp0_stage1 = 8'd2;
parameter    ap_ST_fsm_pp0_stage2 = 8'd4;
parameter    ap_ST_fsm_pp0_stage3 = 8'd8;
parameter    ap_ST_fsm_pp0_stage4 = 8'd16;
parameter    ap_ST_fsm_pp0_stage5 = 8'd32;
parameter    ap_ST_fsm_pp0_stage6 = 8'd64;
parameter    ap_ST_fsm_pp0_stage7 = 8'd128;

input   ap_clk;
input   ap_rst_n;
input  [127:0] a_Data_TDATA;
input   a_Data_TVALID;
output   a_Data_TREADY;
input  [255:0] b_Data_TDATA;
input   b_Data_TVALID;
output   b_Data_TREADY;
output  [63:0] c_Data_TDATA;
output   c_Data_TVALID;
input   c_Data_TREADY;

 reg    ap_rst_n_inv;
reg   [127:0] a_Data_0_data_out;
wire    a_Data_0_vld_in;
wire    a_Data_0_vld_out;
wire    a_Data_0_ack_in;
reg    a_Data_0_ack_out;
reg   [127:0] a_Data_0_payload_A;
reg   [127:0] a_Data_0_payload_B;
reg    a_Data_0_sel_rd;
reg    a_Data_0_sel_wr;
wire    a_Data_0_sel;
wire    a_Data_0_load_A;
wire    a_Data_0_load_B;
reg   [1:0] a_Data_0_state;
wire    a_Data_0_state_cmp_full;
reg   [255:0] b_Data_0_data_out;
wire    b_Data_0_vld_in;
wire    b_Data_0_vld_out;
wire    b_Data_0_ack_in;
reg    b_Data_0_ack_out;
reg   [255:0] b_Data_0_payload_A;
reg   [255:0] b_Data_0_payload_B;
reg    b_Data_0_sel_rd;
reg    b_Data_0_sel_wr;
wire    b_Data_0_sel;
wire    b_Data_0_load_A;
wire    b_Data_0_load_B;
reg   [1:0] b_Data_0_state;
wire    b_Data_0_state_cmp_full;
reg   [63:0] c_Data_1_data_in;
reg   [63:0] c_Data_1_data_out;
reg    c_Data_1_vld_in;
wire    c_Data_1_vld_out;
wire    c_Data_1_ack_in;
wire    c_Data_1_ack_out;
reg   [63:0] c_Data_1_payload_A;
reg   [63:0] c_Data_1_payload_B;
reg    c_Data_1_sel_rd;
reg    c_Data_1_sel_wr;
wire    c_Data_1_sel;
wire    c_Data_1_load_A;
wire    c_Data_1_load_B;
reg   [1:0] c_Data_1_state;
wire    c_Data_1_state_cmp_full;
reg    a_Data_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_pp0_stage0;
reg    b_Data_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_pp0_stage5;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_pp0_stage6;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_pp0_stage7;
reg    c_Data_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter1;
wire   [15:0] tmp_8_fu_324_p1;
reg   [15:0] tmp_8_reg_518;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state9_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
reg   [15:0] p_1_assign_7_reg_523;
reg   [15:0] p_2_assign_7_reg_528;
reg   [15:0] p_3_assign_7_reg_533;
reg   [15:0] p_4_assign_7_reg_538;
reg   [15:0] p_5_assign_7_reg_543;
reg   [15:0] p_6_assign_7_reg_548;
reg   [15:0] p_7_assign_7_reg_553;
wire   [63:0] tmp_fu_411_p3;
wire   [63:0] tmp_1_fu_425_p3;
reg    ap_block_state2_pp0_stage1_iter0;
reg    ap_block_pp0_stage1_11001;
wire   [63:0] tmp_2_fu_439_p3;
reg    ap_block_state3_pp0_stage2_iter0;
reg    ap_block_pp0_stage2_11001;
wire   [63:0] tmp_3_fu_453_p3;
reg    ap_block_state4_pp0_stage3_iter0;
reg    ap_block_pp0_stage3_11001;
wire   [63:0] tmp_4_fu_467_p3;
reg    ap_block_state5_pp0_stage4_iter0;
reg    ap_block_pp0_stage4_11001;
wire   [63:0] tmp_5_fu_481_p3;
reg    ap_block_state6_pp0_stage5_iter0;
reg    ap_block_pp0_stage5_11001;
wire   [63:0] tmp_6_fu_495_p3;
reg    ap_block_state7_pp0_stage6_iter0;
reg    ap_block_pp0_stage6_11001;
wire   [63:0] tmp_7_fu_509_p3;
reg    ap_block_state8_pp0_stage7_iter0;
reg    ap_block_pp0_stage7_11001;
reg    ap_block_pp0_stage0_subdone;
reg    ap_block_pp0_stage7_subdone;
wire    grp_MAC_8x2_fu_123_ap_ready;
reg   [15:0] grp_MAC_8x2_fu_123_p_read;
reg   [15:0] grp_MAC_8x2_fu_123_p_read1;
reg   [15:0] grp_MAC_8x2_fu_123_p_read2;
reg   [15:0] grp_MAC_8x2_fu_123_p_read3;
reg   [15:0] grp_MAC_8x2_fu_123_p_read4;
reg   [15:0] grp_MAC_8x2_fu_123_p_read5;
reg   [15:0] grp_MAC_8x2_fu_123_p_read6;
reg   [15:0] grp_MAC_8x2_fu_123_p_read7;
reg   [15:0] grp_MAC_8x2_fu_123_p_read8;
wire   [15:0] grp_MAC_8x2_fu_123_p_read9;
wire   [15:0] grp_MAC_8x2_fu_123_p_read10;
wire   [15:0] grp_MAC_8x2_fu_123_p_read11;
wire   [15:0] grp_MAC_8x2_fu_123_p_read12;
wire   [15:0] grp_MAC_8x2_fu_123_p_read13;
wire   [15:0] grp_MAC_8x2_fu_123_p_read14;
wire   [15:0] grp_MAC_8x2_fu_123_p_read15;
wire   [15:0] grp_MAC_8x2_fu_123_p_read16;
wire   [15:0] grp_MAC_8x2_fu_123_p_read17;
wire   [15:0] grp_MAC_8x2_fu_123_p_read18;
wire   [15:0] grp_MAC_8x2_fu_123_p_read19;
wire   [15:0] grp_MAC_8x2_fu_123_p_read20;
wire   [15:0] grp_MAC_8x2_fu_123_p_read21;
wire   [15:0] grp_MAC_8x2_fu_123_p_read22;
wire   [15:0] grp_MAC_8x2_fu_123_p_read23;
wire   [31:0] grp_MAC_8x2_fu_123_ap_return_0;
wire   [31:0] grp_MAC_8x2_fu_123_ap_return_1;
wire   [15:0] tmp_9_fu_406_p1;
wire   [15:0] tmp_10_fu_420_p1;
wire   [15:0] tmp_11_fu_434_p1;
wire   [15:0] tmp_12_fu_448_p1;
wire   [15:0] tmp_13_fu_462_p1;
wire   [15:0] tmp_14_fu_476_p1;
wire   [15:0] tmp_15_fu_490_p1;
wire   [15:0] tmp_16_fu_504_p1;
reg    ap_block_pp0_stage0_01001;
reg    ap_block_pp0_stage1_01001;
reg    ap_block_pp0_stage2_01001;
reg    ap_block_pp0_stage3_01001;
reg    ap_block_pp0_stage4_01001;
reg    ap_block_pp0_stage5_01001;
reg    ap_block_pp0_stage6_01001;
reg    ap_block_pp0_stage7_01001;
reg   [7:0] ap_NS_fsm;
wire    ap_reset_idle_pp0;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage2_subdone;
reg    ap_block_pp0_stage3_subdone;
reg    ap_block_pp0_stage4_subdone;
reg    ap_block_pp0_stage5_subdone;
reg    ap_block_pp0_stage6_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 a_Data_0_sel_rd = 1'b0;
#0 a_Data_0_sel_wr = 1'b0;
#0 a_Data_0_state = 2'd0;
#0 b_Data_0_sel_rd = 1'b0;
#0 b_Data_0_sel_wr = 1'b0;
#0 b_Data_0_state = 2'd0;
#0 c_Data_1_sel_rd = 1'b0;
#0 c_Data_1_sel_wr = 1'b0;
#0 c_Data_1_state = 2'd0;
#0 ap_CS_fsm = 8'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

MAC_8x2 grp_MAC_8x2_fu_123(
    .ap_ready(grp_MAC_8x2_fu_123_ap_ready),
    .p_read(grp_MAC_8x2_fu_123_p_read),
    .p_read1(grp_MAC_8x2_fu_123_p_read1),
    .p_read2(grp_MAC_8x2_fu_123_p_read2),
    .p_read3(grp_MAC_8x2_fu_123_p_read3),
    .p_read4(grp_MAC_8x2_fu_123_p_read4),
    .p_read5(grp_MAC_8x2_fu_123_p_read5),
    .p_read6(grp_MAC_8x2_fu_123_p_read6),
    .p_read7(grp_MAC_8x2_fu_123_p_read7),
    .p_read8(grp_MAC_8x2_fu_123_p_read8),
    .p_read9(grp_MAC_8x2_fu_123_p_read9),
    .p_read10(grp_MAC_8x2_fu_123_p_read10),
    .p_read11(grp_MAC_8x2_fu_123_p_read11),
    .p_read12(grp_MAC_8x2_fu_123_p_read12),
    .p_read13(grp_MAC_8x2_fu_123_p_read13),
    .p_read14(grp_MAC_8x2_fu_123_p_read14),
    .p_read15(grp_MAC_8x2_fu_123_p_read15),
    .p_read16(grp_MAC_8x2_fu_123_p_read16),
    .p_read17(grp_MAC_8x2_fu_123_p_read17),
    .p_read18(grp_MAC_8x2_fu_123_p_read18),
    .p_read19(grp_MAC_8x2_fu_123_p_read19),
    .p_read20(grp_MAC_8x2_fu_123_p_read20),
    .p_read21(grp_MAC_8x2_fu_123_p_read21),
    .p_read22(grp_MAC_8x2_fu_123_p_read22),
    .p_read23(grp_MAC_8x2_fu_123_p_read23),
    .ap_return_0(grp_MAC_8x2_fu_123_ap_return_0),
    .ap_return_1(grp_MAC_8x2_fu_123_ap_return_1)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        a_Data_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == a_Data_0_ack_out) & (1'b1 == a_Data_0_vld_out))) begin
            a_Data_0_sel_rd <= ~a_Data_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        a_Data_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == a_Data_0_ack_in) & (1'b1 == a_Data_0_vld_in))) begin
            a_Data_0_sel_wr <= ~a_Data_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        a_Data_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == a_Data_0_state) & (1'b0 == a_Data_0_vld_in)) | ((2'd3 == a_Data_0_state) & (1'b0 == a_Data_0_vld_in) & (1'b1 == a_Data_0_ack_out)))) begin
            a_Data_0_state <= 2'd2;
        end else if ((((2'd1 == a_Data_0_state) & (1'b0 == a_Data_0_ack_out)) | ((2'd3 == a_Data_0_state) & (1'b0 == a_Data_0_ack_out) & (1'b1 == a_Data_0_vld_in)))) begin
            a_Data_0_state <= 2'd1;
        end else if (((~((1'b0 == a_Data_0_vld_in) & (1'b1 == a_Data_0_ack_out)) & ~((1'b0 == a_Data_0_ack_out) & (1'b1 == a_Data_0_vld_in)) & (2'd3 == a_Data_0_state)) | ((2'd1 == a_Data_0_state) & (1'b1 == a_Data_0_ack_out)) | ((2'd2 == a_Data_0_state) & (1'b1 == a_Data_0_vld_in)))) begin
            a_Data_0_state <= 2'd3;
        end else begin
            a_Data_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage7_subdone) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        b_Data_0_sel_rd <= 1'b0;
    end else begin
        if (((b_Data_0_ack_out == 1'b1) & (b_Data_0_vld_out == 1'b1))) begin
            b_Data_0_sel_rd <= ~b_Data_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        b_Data_0_sel_wr <= 1'b0;
    end else begin
        if (((b_Data_0_ack_in == 1'b1) & (b_Data_0_vld_in == 1'b1))) begin
            b_Data_0_sel_wr <= ~b_Data_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        b_Data_0_state <= 2'd0;
    end else begin
        if ((((b_Data_0_state == 2'd2) & (b_Data_0_vld_in == 1'b0)) | ((b_Data_0_state == 2'd3) & (b_Data_0_vld_in == 1'b0) & (b_Data_0_ack_out == 1'b1)))) begin
            b_Data_0_state <= 2'd2;
        end else if ((((b_Data_0_state == 2'd1) & (b_Data_0_ack_out == 1'b0)) | ((b_Data_0_state == 2'd3) & (b_Data_0_ack_out == 1'b0) & (b_Data_0_vld_in == 1'b1)))) begin
            b_Data_0_state <= 2'd1;
        end else if (((~((b_Data_0_vld_in == 1'b0) & (b_Data_0_ack_out == 1'b1)) & ~((b_Data_0_ack_out == 1'b0) & (b_Data_0_vld_in == 1'b1)) & (b_Data_0_state == 2'd3)) | ((b_Data_0_state == 2'd1) & (b_Data_0_ack_out == 1'b1)) | ((b_Data_0_state == 2'd2) & (b_Data_0_vld_in == 1'b1)))) begin
            b_Data_0_state <= 2'd3;
        end else begin
            b_Data_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        c_Data_1_sel_rd <= 1'b0;
    end else begin
        if (((c_Data_1_ack_out == 1'b1) & (c_Data_1_vld_out == 1'b1))) begin
            c_Data_1_sel_rd <= ~c_Data_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        c_Data_1_sel_wr <= 1'b0;
    end else begin
        if (((c_Data_1_ack_in == 1'b1) & (c_Data_1_vld_in == 1'b1))) begin
            c_Data_1_sel_wr <= ~c_Data_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        c_Data_1_state <= 2'd0;
    end else begin
        if ((((c_Data_1_state == 2'd2) & (c_Data_1_vld_in == 1'b0)) | ((c_Data_1_state == 2'd3) & (c_Data_1_vld_in == 1'b0) & (c_Data_1_ack_out == 1'b1)))) begin
            c_Data_1_state <= 2'd2;
        end else if ((((c_Data_1_state == 2'd1) & (c_Data_1_ack_out == 1'b0)) | ((c_Data_1_state == 2'd3) & (c_Data_1_ack_out == 1'b0) & (c_Data_1_vld_in == 1'b1)))) begin
            c_Data_1_state <= 2'd1;
        end else if (((~((c_Data_1_vld_in == 1'b0) & (c_Data_1_ack_out == 1'b1)) & ~((c_Data_1_ack_out == 1'b0) & (c_Data_1_vld_in == 1'b1)) & (c_Data_1_state == 2'd3)) | ((c_Data_1_state == 2'd1) & (c_Data_1_ack_out == 1'b1)) | ((c_Data_1_state == 2'd2) & (c_Data_1_vld_in == 1'b1)))) begin
            c_Data_1_state <= 2'd3;
        end else begin
            c_Data_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == a_Data_0_load_A)) begin
        a_Data_0_payload_A <= a_Data_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == a_Data_0_load_B)) begin
        a_Data_0_payload_B <= a_Data_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((b_Data_0_load_A == 1'b1)) begin
        b_Data_0_payload_A <= b_Data_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((b_Data_0_load_B == 1'b1)) begin
        b_Data_0_payload_B <= b_Data_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((c_Data_1_load_A == 1'b1)) begin
        c_Data_1_payload_A <= c_Data_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((c_Data_1_load_B == 1'b1)) begin
        c_Data_1_payload_B <= c_Data_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_1_assign_7_reg_523 <= {{a_Data_0_data_out[31:16]}};
        p_2_assign_7_reg_528 <= {{a_Data_0_data_out[47:32]}};
        p_3_assign_7_reg_533 <= {{a_Data_0_data_out[63:48]}};
        p_4_assign_7_reg_538 <= {{a_Data_0_data_out[79:64]}};
        p_5_assign_7_reg_543 <= {{a_Data_0_data_out[95:80]}};
        p_6_assign_7_reg_548 <= {{a_Data_0_data_out[111:96]}};
        p_7_assign_7_reg_553 <= {{a_Data_0_data_out[127:112]}};
        tmp_8_reg_518 <= tmp_8_fu_324_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_Data_0_ack_out = 1'b1;
    end else begin
        a_Data_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == a_Data_0_sel)) begin
        a_Data_0_data_out = a_Data_0_payload_B;
    end else begin
        a_Data_0_data_out = a_Data_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_Data_TDATA_blk_n = a_Data_0_state[1'd0];
    end else begin
        a_Data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        b_Data_0_ack_out = 1'b1;
    end else begin
        b_Data_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((b_Data_0_sel == 1'b1)) begin
        b_Data_0_data_out = b_Data_0_payload_B;
    end else begin
        b_Data_0_data_out = b_Data_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        b_Data_TDATA_blk_n = b_Data_0_state[1'd0];
    end else begin
        b_Data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage7_01001) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            c_Data_1_data_in = tmp_7_fu_509_p3;
        end else if (((1'b0 == ap_block_pp0_stage6_01001) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            c_Data_1_data_in = tmp_6_fu_495_p3;
        end else if (((1'b0 == ap_block_pp0_stage5_01001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            c_Data_1_data_in = tmp_5_fu_481_p3;
        end else if (((1'b0 == ap_block_pp0_stage4_01001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            c_Data_1_data_in = tmp_4_fu_467_p3;
        end else if (((1'b0 == ap_block_pp0_stage3_01001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            c_Data_1_data_in = tmp_3_fu_453_p3;
        end else if (((1'b0 == ap_block_pp0_stage2_01001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            c_Data_1_data_in = tmp_2_fu_439_p3;
        end else if (((1'b0 == ap_block_pp0_stage1_01001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            c_Data_1_data_in = tmp_1_fu_425_p3;
        end else if (((1'b0 == ap_block_pp0_stage0_01001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            c_Data_1_data_in = tmp_fu_411_p3;
        end else begin
            c_Data_1_data_in = 'bx;
        end
    end else begin
        c_Data_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((c_Data_1_sel == 1'b1)) begin
        c_Data_1_data_out = c_Data_1_payload_B;
    end else begin
        c_Data_1_data_out = c_Data_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        c_Data_1_vld_in = 1'b1;
    end else begin
        c_Data_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        c_Data_TDATA_blk_n = c_Data_1_state[1'd1];
    end else begin
        c_Data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == 1'b1)))) begin
        grp_MAC_8x2_fu_123_p_read = tmp_8_reg_518;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_MAC_8x2_fu_123_p_read = tmp_8_fu_324_p1;
    end else begin
        grp_MAC_8x2_fu_123_p_read = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == 1'b1)))) begin
        grp_MAC_8x2_fu_123_p_read1 = p_1_assign_7_reg_523;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_MAC_8x2_fu_123_p_read1 = {{a_Data_0_data_out[31:16]}};
    end else begin
        grp_MAC_8x2_fu_123_p_read1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == 1'b1)))) begin
        grp_MAC_8x2_fu_123_p_read2 = p_2_assign_7_reg_528;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_MAC_8x2_fu_123_p_read2 = {{a_Data_0_data_out[47:32]}};
    end else begin
        grp_MAC_8x2_fu_123_p_read2 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == 1'b1)))) begin
        grp_MAC_8x2_fu_123_p_read3 = p_3_assign_7_reg_533;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_MAC_8x2_fu_123_p_read3 = {{a_Data_0_data_out[63:48]}};
    end else begin
        grp_MAC_8x2_fu_123_p_read3 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == 1'b1)))) begin
        grp_MAC_8x2_fu_123_p_read4 = p_4_assign_7_reg_538;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_MAC_8x2_fu_123_p_read4 = {{a_Data_0_data_out[79:64]}};
    end else begin
        grp_MAC_8x2_fu_123_p_read4 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == 1'b1)))) begin
        grp_MAC_8x2_fu_123_p_read5 = p_5_assign_7_reg_543;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_MAC_8x2_fu_123_p_read5 = {{a_Data_0_data_out[95:80]}};
    end else begin
        grp_MAC_8x2_fu_123_p_read5 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == 1'b1)))) begin
        grp_MAC_8x2_fu_123_p_read6 = p_6_assign_7_reg_548;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_MAC_8x2_fu_123_p_read6 = {{a_Data_0_data_out[111:96]}};
    end else begin
        grp_MAC_8x2_fu_123_p_read6 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == 1'b1)))) begin
        grp_MAC_8x2_fu_123_p_read7 = p_7_assign_7_reg_553;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_MAC_8x2_fu_123_p_read7 = {{a_Data_0_data_out[127:112]}};
    end else begin
        grp_MAC_8x2_fu_123_p_read7 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            grp_MAC_8x2_fu_123_p_read8 = tmp_16_fu_504_p1;
        end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            grp_MAC_8x2_fu_123_p_read8 = tmp_15_fu_490_p1;
        end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            grp_MAC_8x2_fu_123_p_read8 = tmp_14_fu_476_p1;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            grp_MAC_8x2_fu_123_p_read8 = tmp_13_fu_462_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            grp_MAC_8x2_fu_123_p_read8 = tmp_12_fu_448_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            grp_MAC_8x2_fu_123_p_read8 = tmp_11_fu_434_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_MAC_8x2_fu_123_p_read8 = tmp_10_fu_420_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_MAC_8x2_fu_123_p_read8 = tmp_9_fu_406_p1;
        end else begin
            grp_MAC_8x2_fu_123_p_read8 = 'bx;
        end
    end else begin
        grp_MAC_8x2_fu_123_p_read8 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_reset_idle_pp0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_reset_idle_pp0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_Data_0_ack_in = a_Data_0_state[1'd1];

assign a_Data_0_load_A = (~a_Data_0_sel_wr & a_Data_0_state_cmp_full);

assign a_Data_0_load_B = (a_Data_0_state_cmp_full & a_Data_0_sel_wr);

assign a_Data_0_sel = a_Data_0_sel_rd;

assign a_Data_0_state_cmp_full = ((a_Data_0_state != 2'd1) ? 1'b1 : 1'b0);

assign a_Data_0_vld_in = a_Data_TVALID;

assign a_Data_0_vld_out = a_Data_0_state[1'd0];

assign a_Data_TREADY = a_Data_0_state[1'd1];

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((c_Data_1_ack_in == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b1 == 1'b1) & ((b_Data_0_vld_out == 1'b0) | (1'b0 == a_Data_0_vld_out))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((c_Data_1_ack_in == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b1 == 1'b1) & ((b_Data_0_vld_out == 1'b0) | (1'b0 == a_Data_0_vld_out) | (c_Data_1_ack_in == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((c_Data_1_ack_in == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b1 == 1'b1) & ((b_Data_0_vld_out == 1'b0) | (1'b0 == a_Data_0_vld_out) | (c_Data_1_ack_in == 1'b0))));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((b_Data_0_vld_out == 1'b0) & (1'b1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((1'b1 == 1'b1) & ((b_Data_0_vld_out == 1'b0) | (c_Data_1_ack_in == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((1'b1 == 1'b1) & ((b_Data_0_vld_out == 1'b0) | (c_Data_1_ack_in == 1'b0)));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_01001 = ((b_Data_0_vld_out == 1'b0) & (1'b1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((1'b1 == 1'b1) & ((b_Data_0_vld_out == 1'b0) | (c_Data_1_ack_in == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((1'b1 == 1'b1) & ((b_Data_0_vld_out == 1'b0) | (c_Data_1_ack_in == 1'b0)));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_01001 = ((b_Data_0_vld_out == 1'b0) & (1'b1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((1'b1 == 1'b1) & ((b_Data_0_vld_out == 1'b0) | (c_Data_1_ack_in == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((1'b1 == 1'b1) & ((b_Data_0_vld_out == 1'b0) | (c_Data_1_ack_in == 1'b0)));
end

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_01001 = ((b_Data_0_vld_out == 1'b0) & (1'b1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage4_11001 = ((1'b1 == 1'b1) & ((b_Data_0_vld_out == 1'b0) | (c_Data_1_ack_in == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage4_subdone = ((1'b1 == 1'b1) & ((b_Data_0_vld_out == 1'b0) | (c_Data_1_ack_in == 1'b0)));
end

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage5_01001 = ((b_Data_0_vld_out == 1'b0) & (1'b1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage5_11001 = ((1'b1 == 1'b1) & ((b_Data_0_vld_out == 1'b0) | (c_Data_1_ack_in == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage5_subdone = ((1'b1 == 1'b1) & ((b_Data_0_vld_out == 1'b0) | (c_Data_1_ack_in == 1'b0)));
end

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage6_01001 = ((b_Data_0_vld_out == 1'b0) & (1'b1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage6_11001 = ((1'b1 == 1'b1) & ((b_Data_0_vld_out == 1'b0) | (c_Data_1_ack_in == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage6_subdone = ((1'b1 == 1'b1) & ((b_Data_0_vld_out == 1'b0) | (c_Data_1_ack_in == 1'b0)));
end

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage7_01001 = ((b_Data_0_vld_out == 1'b0) & (1'b1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage7_11001 = ((1'b1 == 1'b1) & ((b_Data_0_vld_out == 1'b0) | (c_Data_1_ack_in == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage7_subdone = ((1'b1 == 1'b1) & ((b_Data_0_vld_out == 1'b0) | (c_Data_1_ack_in == 1'b0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((b_Data_0_vld_out == 1'b0) | (1'b0 == a_Data_0_vld_out));
end

always @ (*) begin
    ap_block_state2_pp0_stage1_iter0 = (b_Data_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state3_pp0_stage2_iter0 = (b_Data_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state4_pp0_stage3_iter0 = (b_Data_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state5_pp0_stage4_iter0 = (b_Data_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state6_pp0_stage5_iter0 = (b_Data_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state7_pp0_stage6_iter0 = (b_Data_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state8_pp0_stage7_iter0 = (b_Data_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state9_pp0_stage0_iter1 = (c_Data_1_ack_in == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign b_Data_0_ack_in = b_Data_0_state[1'd1];

assign b_Data_0_load_A = (~b_Data_0_sel_wr & b_Data_0_state_cmp_full);

assign b_Data_0_load_B = (b_Data_0_state_cmp_full & b_Data_0_sel_wr);

assign b_Data_0_sel = b_Data_0_sel_rd;

assign b_Data_0_state_cmp_full = ((b_Data_0_state != 2'd1) ? 1'b1 : 1'b0);

assign b_Data_0_vld_in = b_Data_TVALID;

assign b_Data_0_vld_out = b_Data_0_state[1'd0];

assign b_Data_TREADY = b_Data_0_state[1'd1];

assign c_Data_1_ack_in = c_Data_1_state[1'd1];

assign c_Data_1_ack_out = c_Data_TREADY;

assign c_Data_1_load_A = (~c_Data_1_sel_wr & c_Data_1_state_cmp_full);

assign c_Data_1_load_B = (c_Data_1_state_cmp_full & c_Data_1_sel_wr);

assign c_Data_1_sel = c_Data_1_sel_rd;

assign c_Data_1_state_cmp_full = ((c_Data_1_state != 2'd1) ? 1'b1 : 1'b0);

assign c_Data_1_vld_out = c_Data_1_state[1'd0];

assign c_Data_TDATA = c_Data_1_data_out;

assign c_Data_TVALID = c_Data_1_state[1'd0];

assign grp_MAC_8x2_fu_123_p_read10 = {{b_Data_0_data_out[47:32]}};

assign grp_MAC_8x2_fu_123_p_read11 = {{b_Data_0_data_out[63:48]}};

assign grp_MAC_8x2_fu_123_p_read12 = {{b_Data_0_data_out[79:64]}};

assign grp_MAC_8x2_fu_123_p_read13 = {{b_Data_0_data_out[95:80]}};

assign grp_MAC_8x2_fu_123_p_read14 = {{b_Data_0_data_out[111:96]}};

assign grp_MAC_8x2_fu_123_p_read15 = {{b_Data_0_data_out[127:112]}};

assign grp_MAC_8x2_fu_123_p_read16 = {{b_Data_0_data_out[143:128]}};

assign grp_MAC_8x2_fu_123_p_read17 = {{b_Data_0_data_out[159:144]}};

assign grp_MAC_8x2_fu_123_p_read18 = {{b_Data_0_data_out[175:160]}};

assign grp_MAC_8x2_fu_123_p_read19 = {{b_Data_0_data_out[191:176]}};

assign grp_MAC_8x2_fu_123_p_read20 = {{b_Data_0_data_out[207:192]}};

assign grp_MAC_8x2_fu_123_p_read21 = {{b_Data_0_data_out[223:208]}};

assign grp_MAC_8x2_fu_123_p_read22 = {{b_Data_0_data_out[239:224]}};

assign grp_MAC_8x2_fu_123_p_read23 = {{b_Data_0_data_out[255:240]}};

assign grp_MAC_8x2_fu_123_p_read9 = {{b_Data_0_data_out[31:16]}};

assign tmp_10_fu_420_p1 = b_Data_0_data_out[15:0];

assign tmp_11_fu_434_p1 = b_Data_0_data_out[15:0];

assign tmp_12_fu_448_p1 = b_Data_0_data_out[15:0];

assign tmp_13_fu_462_p1 = b_Data_0_data_out[15:0];

assign tmp_14_fu_476_p1 = b_Data_0_data_out[15:0];

assign tmp_15_fu_490_p1 = b_Data_0_data_out[15:0];

assign tmp_16_fu_504_p1 = b_Data_0_data_out[15:0];

assign tmp_1_fu_425_p3 = {{grp_MAC_8x2_fu_123_ap_return_1}, {grp_MAC_8x2_fu_123_ap_return_0}};

assign tmp_2_fu_439_p3 = {{grp_MAC_8x2_fu_123_ap_return_1}, {grp_MAC_8x2_fu_123_ap_return_0}};

assign tmp_3_fu_453_p3 = {{grp_MAC_8x2_fu_123_ap_return_1}, {grp_MAC_8x2_fu_123_ap_return_0}};

assign tmp_4_fu_467_p3 = {{grp_MAC_8x2_fu_123_ap_return_1}, {grp_MAC_8x2_fu_123_ap_return_0}};

assign tmp_5_fu_481_p3 = {{grp_MAC_8x2_fu_123_ap_return_1}, {grp_MAC_8x2_fu_123_ap_return_0}};

assign tmp_6_fu_495_p3 = {{grp_MAC_8x2_fu_123_ap_return_1}, {grp_MAC_8x2_fu_123_ap_return_0}};

assign tmp_7_fu_509_p3 = {{grp_MAC_8x2_fu_123_ap_return_1}, {grp_MAC_8x2_fu_123_ap_return_0}};

assign tmp_8_fu_324_p1 = a_Data_0_data_out[15:0];

assign tmp_9_fu_406_p1 = b_Data_0_data_out[15:0];

assign tmp_fu_411_p3 = {{grp_MAC_8x2_fu_123_ap_return_1}, {grp_MAC_8x2_fu_123_ap_return_0}};

endmodule //MAC_Tree_1x8x2
