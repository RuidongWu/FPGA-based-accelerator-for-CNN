// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="MAC_Tree_1x4x8,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xazu3eg-sfvc784-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=6.257000,HLS_SYN_LAT=1,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=32,HLS_SYN_FF=1678,HLS_SYN_LUT=525,HLS_VERSION=2018_3}" *)

module MAC_Tree_1x4x8 (
        ap_clk,
        ap_rst_n,
        a_Data_TDATA,
        a_Data_TVALID,
        a_Data_TREADY,
        b_Bind_TDATA,
        b_Bind_TVALID,
        b_Bind_TREADY,
        c_Data_TDATA,
        c_Data_TVALID,
        c_Data_TREADY
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst_n;
input  [63:0] a_Data_TDATA;
input   a_Data_TVALID;
output   a_Data_TREADY;
input  [511:0] b_Bind_TDATA;
input   b_Bind_TVALID;
output   b_Bind_TREADY;
output  [255:0] c_Data_TDATA;
output   c_Data_TVALID;
input   c_Data_TREADY;

 reg    ap_rst_n_inv;
reg   [63:0] a_Data_0_data_out;
wire    a_Data_0_vld_in;
wire    a_Data_0_vld_out;
wire    a_Data_0_ack_in;
reg    a_Data_0_ack_out;
reg   [63:0] a_Data_0_payload_A;
reg   [63:0] a_Data_0_payload_B;
reg    a_Data_0_sel_rd;
reg    a_Data_0_sel_wr;
wire    a_Data_0_sel;
wire    a_Data_0_load_A;
wire    a_Data_0_load_B;
reg   [1:0] a_Data_0_state;
wire    a_Data_0_state_cmp_full;
reg   [511:0] b_Bind_0_data_out;
wire    b_Bind_0_vld_in;
wire    b_Bind_0_vld_out;
wire    b_Bind_0_ack_in;
reg    b_Bind_0_ack_out;
reg   [511:0] b_Bind_0_payload_A;
reg   [511:0] b_Bind_0_payload_B;
reg    b_Bind_0_sel_rd;
reg    b_Bind_0_sel_wr;
wire    b_Bind_0_sel;
wire    b_Bind_0_load_A;
wire    b_Bind_0_load_B;
reg   [1:0] b_Bind_0_state;
wire    b_Bind_0_state_cmp_full;
reg   [255:0] c_Data_1_data_out;
reg    c_Data_1_vld_in;
wire    c_Data_1_vld_out;
wire    c_Data_1_ack_in;
wire    c_Data_1_ack_out;
reg   [255:0] c_Data_1_payload_A;
reg   [255:0] c_Data_1_payload_B;
reg    c_Data_1_sel_rd;
reg    c_Data_1_sel_wr;
wire    c_Data_1_sel;
wire    c_Data_1_load_A;
wire    c_Data_1_load_B;
reg   [1:0] c_Data_1_state;
wire    c_Data_1_state_cmp_full;
reg    a_Data_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_pp0_stage0;
reg    b_Bind_TDATA_blk_n;
reg    c_Data_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter1;
wire   [255:0] tmp_36_fu_721_p9;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
reg    ap_block_pp0_stage0_subdone;
reg    ap_block_pp0_stage0_01001;
wire   [15:0] tmp_fu_197_p1;
wire  signed [15:0] tmp_37_fu_205_p1;
wire   [15:0] tmp_2_fu_213_p4;
wire  signed [15:0] tmp_3_fu_227_p4;
wire   [15:0] tmp_4_fu_241_p4;
wire  signed [15:0] tmp_5_fu_255_p4;
wire   [15:0] tmp_6_fu_269_p4;
wire  signed [15:0] tmp_7_fu_283_p4;
wire  signed [31:0] grp_fu_742_p3;
wire  signed [31:0] grp_fu_757_p3;
wire  signed [15:0] tmp_8_fu_301_p4;
wire  signed [15:0] tmp_9_fu_315_p4;
wire  signed [15:0] tmp_10_fu_329_p4;
wire  signed [15:0] tmp_11_fu_343_p4;
wire  signed [31:0] grp_fu_772_p3;
wire  signed [31:0] grp_fu_787_p3;
wire  signed [15:0] tmp_12_fu_361_p4;
wire  signed [15:0] tmp_13_fu_375_p4;
wire  signed [15:0] tmp_14_fu_389_p4;
wire  signed [15:0] tmp_15_fu_403_p4;
wire  signed [31:0] grp_fu_802_p3;
wire  signed [31:0] grp_fu_817_p3;
wire  signed [15:0] tmp_16_fu_421_p4;
wire  signed [15:0] tmp_17_fu_435_p4;
wire  signed [15:0] tmp_18_fu_449_p4;
wire  signed [15:0] tmp_19_fu_463_p4;
wire  signed [31:0] grp_fu_832_p3;
wire  signed [31:0] grp_fu_847_p3;
wire  signed [15:0] tmp_20_fu_481_p4;
wire  signed [15:0] tmp_21_fu_495_p4;
wire  signed [15:0] tmp_22_fu_509_p4;
wire  signed [15:0] tmp_23_fu_523_p4;
wire  signed [31:0] grp_fu_862_p3;
wire  signed [31:0] grp_fu_877_p3;
wire  signed [15:0] tmp_24_fu_541_p4;
wire  signed [15:0] tmp_25_fu_555_p4;
wire  signed [15:0] tmp_26_fu_569_p4;
wire  signed [15:0] tmp_27_fu_583_p4;
wire  signed [31:0] grp_fu_892_p3;
wire  signed [31:0] grp_fu_907_p3;
wire  signed [15:0] tmp_28_fu_601_p4;
wire  signed [15:0] tmp_29_fu_615_p4;
wire  signed [15:0] tmp_30_fu_629_p4;
wire  signed [15:0] tmp_31_fu_643_p4;
wire  signed [31:0] grp_fu_922_p3;
wire  signed [31:0] grp_fu_937_p3;
wire  signed [15:0] tmp_32_fu_661_p4;
wire  signed [15:0] tmp_33_fu_675_p4;
wire  signed [15:0] tmp_34_fu_689_p4;
wire  signed [15:0] tmp_35_fu_703_p4;
wire  signed [31:0] grp_fu_952_p3;
wire  signed [31:0] grp_fu_967_p3;
(* use_dsp48 = "no" *) wire   [31:0] tmp_4_7_3_fu_717_p2;
(* use_dsp48 = "no" *) wire   [31:0] tmp_4_6_3_fu_657_p2;
(* use_dsp48 = "no" *) wire   [31:0] tmp_4_5_3_fu_597_p2;
(* use_dsp48 = "no" *) wire   [31:0] tmp_4_4_3_fu_537_p2;
(* use_dsp48 = "no" *) wire   [31:0] tmp_4_3_3_fu_477_p2;
(* use_dsp48 = "no" *) wire   [31:0] tmp_4_2_3_fu_417_p2;
(* use_dsp48 = "no" *) wire   [31:0] tmp_4_1_3_fu_357_p2;
(* use_dsp48 = "no" *) wire   [31:0] tmp_4_0_3_fu_297_p2;
wire  signed [15:0] grp_fu_742_p0;
wire  signed [31:0] tmp_1_fu_201_p1;
wire  signed [31:0] tmp_0_1_fu_750_p2;
wire  signed [15:0] tmp_0_1_fu_750_p0;
wire  signed [31:0] tmp_6_0_1_fu_223_p1;
wire  signed [15:0] grp_fu_757_p0;
wire  signed [31:0] tmp_6_0_2_fu_251_p1;
wire  signed [31:0] tmp_0_3_fu_765_p2;
wire  signed [15:0] tmp_0_3_fu_765_p0;
wire  signed [31:0] tmp_6_0_3_fu_279_p1;
wire  signed [15:0] grp_fu_772_p0;
wire  signed [31:0] tmp_1_1_fu_780_p2;
wire  signed [15:0] tmp_1_1_fu_780_p0;
wire  signed [15:0] grp_fu_787_p0;
wire  signed [31:0] tmp_1_3_fu_795_p2;
wire  signed [15:0] tmp_1_3_fu_795_p0;
wire  signed [15:0] grp_fu_802_p0;
wire  signed [31:0] tmp_2_1_fu_810_p2;
wire  signed [15:0] tmp_2_1_fu_810_p0;
wire  signed [15:0] grp_fu_817_p0;
wire  signed [31:0] tmp_2_3_fu_825_p2;
wire  signed [15:0] tmp_2_3_fu_825_p0;
wire  signed [15:0] grp_fu_832_p0;
wire  signed [31:0] tmp_3_1_fu_840_p2;
wire  signed [15:0] tmp_3_1_fu_840_p0;
wire  signed [15:0] grp_fu_847_p0;
wire  signed [31:0] tmp_3_3_fu_855_p2;
wire  signed [15:0] tmp_3_3_fu_855_p0;
wire  signed [15:0] grp_fu_862_p0;
wire  signed [31:0] tmp_4_1_fu_870_p2;
wire  signed [15:0] tmp_4_1_fu_870_p0;
wire  signed [15:0] grp_fu_877_p0;
wire  signed [31:0] tmp_4_3_fu_885_p2;
wire  signed [15:0] tmp_4_3_fu_885_p0;
wire  signed [15:0] grp_fu_892_p0;
wire  signed [31:0] tmp_5_1_fu_900_p2;
wire  signed [15:0] tmp_5_1_fu_900_p0;
wire  signed [15:0] grp_fu_907_p0;
wire  signed [31:0] tmp_5_3_fu_915_p2;
wire  signed [15:0] tmp_5_3_fu_915_p0;
wire  signed [15:0] grp_fu_922_p0;
wire  signed [31:0] tmp_6_1_fu_930_p2;
wire  signed [15:0] tmp_6_1_fu_930_p0;
wire  signed [15:0] grp_fu_937_p0;
wire  signed [31:0] tmp_6_3_fu_945_p2;
wire  signed [15:0] tmp_6_3_fu_945_p0;
wire  signed [15:0] grp_fu_952_p0;
wire  signed [31:0] tmp_7_1_fu_960_p2;
wire  signed [15:0] tmp_7_1_fu_960_p0;
wire  signed [15:0] grp_fu_967_p0;
wire  signed [31:0] tmp_7_3_fu_975_p2;
wire  signed [15:0] tmp_7_3_fu_975_p0;
reg   [0:0] ap_NS_fsm;
wire    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 a_Data_0_sel_rd = 1'b0;
#0 a_Data_0_sel_wr = 1'b0;
#0 a_Data_0_state = 2'd0;
#0 b_Bind_0_sel_rd = 1'b0;
#0 b_Bind_0_sel_wr = 1'b0;
#0 b_Bind_0_state = 2'd0;
#0 c_Data_1_sel_rd = 1'b0;
#0 c_Data_1_sel_wr = 1'b0;
#0 c_Data_1_state = 2'd0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

MAC_Tree_1x4x8_mabkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
MAC_Tree_1x4x8_mabkb_U1(
    .din0(grp_fu_742_p0),
    .din1(tmp_37_fu_205_p1),
    .din2(tmp_0_1_fu_750_p2),
    .dout(grp_fu_742_p3)
);

MAC_Tree_1x4x8_mucud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
MAC_Tree_1x4x8_mucud_U2(
    .din0(tmp_0_1_fu_750_p0),
    .din1(tmp_3_fu_227_p4),
    .dout(tmp_0_1_fu_750_p2)
);

MAC_Tree_1x4x8_mabkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
MAC_Tree_1x4x8_mabkb_U3(
    .din0(grp_fu_757_p0),
    .din1(tmp_5_fu_255_p4),
    .din2(tmp_0_3_fu_765_p2),
    .dout(grp_fu_757_p3)
);

MAC_Tree_1x4x8_mucud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
MAC_Tree_1x4x8_mucud_U4(
    .din0(tmp_0_3_fu_765_p0),
    .din1(tmp_7_fu_283_p4),
    .dout(tmp_0_3_fu_765_p2)
);

MAC_Tree_1x4x8_mabkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
MAC_Tree_1x4x8_mabkb_U5(
    .din0(grp_fu_772_p0),
    .din1(tmp_8_fu_301_p4),
    .din2(tmp_1_1_fu_780_p2),
    .dout(grp_fu_772_p3)
);

MAC_Tree_1x4x8_mucud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
MAC_Tree_1x4x8_mucud_U6(
    .din0(tmp_1_1_fu_780_p0),
    .din1(tmp_9_fu_315_p4),
    .dout(tmp_1_1_fu_780_p2)
);

MAC_Tree_1x4x8_mabkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
MAC_Tree_1x4x8_mabkb_U7(
    .din0(grp_fu_787_p0),
    .din1(tmp_10_fu_329_p4),
    .din2(tmp_1_3_fu_795_p2),
    .dout(grp_fu_787_p3)
);

MAC_Tree_1x4x8_mucud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
MAC_Tree_1x4x8_mucud_U8(
    .din0(tmp_1_3_fu_795_p0),
    .din1(tmp_11_fu_343_p4),
    .dout(tmp_1_3_fu_795_p2)
);

MAC_Tree_1x4x8_mabkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
MAC_Tree_1x4x8_mabkb_U9(
    .din0(grp_fu_802_p0),
    .din1(tmp_12_fu_361_p4),
    .din2(tmp_2_1_fu_810_p2),
    .dout(grp_fu_802_p3)
);

MAC_Tree_1x4x8_mucud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
MAC_Tree_1x4x8_mucud_U10(
    .din0(tmp_2_1_fu_810_p0),
    .din1(tmp_13_fu_375_p4),
    .dout(tmp_2_1_fu_810_p2)
);

MAC_Tree_1x4x8_mabkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
MAC_Tree_1x4x8_mabkb_U11(
    .din0(grp_fu_817_p0),
    .din1(tmp_14_fu_389_p4),
    .din2(tmp_2_3_fu_825_p2),
    .dout(grp_fu_817_p3)
);

MAC_Tree_1x4x8_mucud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
MAC_Tree_1x4x8_mucud_U12(
    .din0(tmp_2_3_fu_825_p0),
    .din1(tmp_15_fu_403_p4),
    .dout(tmp_2_3_fu_825_p2)
);

MAC_Tree_1x4x8_mabkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
MAC_Tree_1x4x8_mabkb_U13(
    .din0(grp_fu_832_p0),
    .din1(tmp_16_fu_421_p4),
    .din2(tmp_3_1_fu_840_p2),
    .dout(grp_fu_832_p3)
);

MAC_Tree_1x4x8_mucud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
MAC_Tree_1x4x8_mucud_U14(
    .din0(tmp_3_1_fu_840_p0),
    .din1(tmp_17_fu_435_p4),
    .dout(tmp_3_1_fu_840_p2)
);

MAC_Tree_1x4x8_mabkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
MAC_Tree_1x4x8_mabkb_U15(
    .din0(grp_fu_847_p0),
    .din1(tmp_18_fu_449_p4),
    .din2(tmp_3_3_fu_855_p2),
    .dout(grp_fu_847_p3)
);

MAC_Tree_1x4x8_mucud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
MAC_Tree_1x4x8_mucud_U16(
    .din0(tmp_3_3_fu_855_p0),
    .din1(tmp_19_fu_463_p4),
    .dout(tmp_3_3_fu_855_p2)
);

MAC_Tree_1x4x8_mabkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
MAC_Tree_1x4x8_mabkb_U17(
    .din0(grp_fu_862_p0),
    .din1(tmp_20_fu_481_p4),
    .din2(tmp_4_1_fu_870_p2),
    .dout(grp_fu_862_p3)
);

MAC_Tree_1x4x8_mucud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
MAC_Tree_1x4x8_mucud_U18(
    .din0(tmp_4_1_fu_870_p0),
    .din1(tmp_21_fu_495_p4),
    .dout(tmp_4_1_fu_870_p2)
);

MAC_Tree_1x4x8_mabkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
MAC_Tree_1x4x8_mabkb_U19(
    .din0(grp_fu_877_p0),
    .din1(tmp_22_fu_509_p4),
    .din2(tmp_4_3_fu_885_p2),
    .dout(grp_fu_877_p3)
);

MAC_Tree_1x4x8_mucud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
MAC_Tree_1x4x8_mucud_U20(
    .din0(tmp_4_3_fu_885_p0),
    .din1(tmp_23_fu_523_p4),
    .dout(tmp_4_3_fu_885_p2)
);

MAC_Tree_1x4x8_mabkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
MAC_Tree_1x4x8_mabkb_U21(
    .din0(grp_fu_892_p0),
    .din1(tmp_24_fu_541_p4),
    .din2(tmp_5_1_fu_900_p2),
    .dout(grp_fu_892_p3)
);

MAC_Tree_1x4x8_mucud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
MAC_Tree_1x4x8_mucud_U22(
    .din0(tmp_5_1_fu_900_p0),
    .din1(tmp_25_fu_555_p4),
    .dout(tmp_5_1_fu_900_p2)
);

MAC_Tree_1x4x8_mabkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
MAC_Tree_1x4x8_mabkb_U23(
    .din0(grp_fu_907_p0),
    .din1(tmp_26_fu_569_p4),
    .din2(tmp_5_3_fu_915_p2),
    .dout(grp_fu_907_p3)
);

MAC_Tree_1x4x8_mucud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
MAC_Tree_1x4x8_mucud_U24(
    .din0(tmp_5_3_fu_915_p0),
    .din1(tmp_27_fu_583_p4),
    .dout(tmp_5_3_fu_915_p2)
);

MAC_Tree_1x4x8_mabkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
MAC_Tree_1x4x8_mabkb_U25(
    .din0(grp_fu_922_p0),
    .din1(tmp_28_fu_601_p4),
    .din2(tmp_6_1_fu_930_p2),
    .dout(grp_fu_922_p3)
);

MAC_Tree_1x4x8_mucud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
MAC_Tree_1x4x8_mucud_U26(
    .din0(tmp_6_1_fu_930_p0),
    .din1(tmp_29_fu_615_p4),
    .dout(tmp_6_1_fu_930_p2)
);

MAC_Tree_1x4x8_mabkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
MAC_Tree_1x4x8_mabkb_U27(
    .din0(grp_fu_937_p0),
    .din1(tmp_30_fu_629_p4),
    .din2(tmp_6_3_fu_945_p2),
    .dout(grp_fu_937_p3)
);

MAC_Tree_1x4x8_mucud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
MAC_Tree_1x4x8_mucud_U28(
    .din0(tmp_6_3_fu_945_p0),
    .din1(tmp_31_fu_643_p4),
    .dout(tmp_6_3_fu_945_p2)
);

MAC_Tree_1x4x8_mabkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
MAC_Tree_1x4x8_mabkb_U29(
    .din0(grp_fu_952_p0),
    .din1(tmp_32_fu_661_p4),
    .din2(tmp_7_1_fu_960_p2),
    .dout(grp_fu_952_p3)
);

MAC_Tree_1x4x8_mucud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
MAC_Tree_1x4x8_mucud_U30(
    .din0(tmp_7_1_fu_960_p0),
    .din1(tmp_33_fu_675_p4),
    .dout(tmp_7_1_fu_960_p2)
);

MAC_Tree_1x4x8_mabkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
MAC_Tree_1x4x8_mabkb_U31(
    .din0(grp_fu_967_p0),
    .din1(tmp_34_fu_689_p4),
    .din2(tmp_7_3_fu_975_p2),
    .dout(grp_fu_967_p3)
);

MAC_Tree_1x4x8_mucud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
MAC_Tree_1x4x8_mucud_U32(
    .din0(tmp_7_3_fu_975_p0),
    .din1(tmp_35_fu_703_p4),
    .dout(tmp_7_3_fu_975_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        a_Data_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == a_Data_0_ack_out) & (1'b1 == a_Data_0_vld_out))) begin
            a_Data_0_sel_rd <= ~a_Data_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        a_Data_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == a_Data_0_ack_in) & (1'b1 == a_Data_0_vld_in))) begin
            a_Data_0_sel_wr <= ~a_Data_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        a_Data_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == a_Data_0_vld_in) & (2'd2 == a_Data_0_state)) | ((1'b0 == a_Data_0_vld_in) & (2'd3 == a_Data_0_state) & (1'b1 == a_Data_0_ack_out)))) begin
            a_Data_0_state <= 2'd2;
        end else if ((((1'b0 == a_Data_0_ack_out) & (2'd1 == a_Data_0_state)) | ((1'b0 == a_Data_0_ack_out) & (2'd3 == a_Data_0_state) & (1'b1 == a_Data_0_vld_in)))) begin
            a_Data_0_state <= 2'd1;
        end else if (((~((1'b0 == a_Data_0_vld_in) & (1'b1 == a_Data_0_ack_out)) & ~((1'b0 == a_Data_0_ack_out) & (1'b1 == a_Data_0_vld_in)) & (2'd3 == a_Data_0_state)) | ((2'd1 == a_Data_0_state) & (1'b1 == a_Data_0_ack_out)) | ((2'd2 == a_Data_0_state) & (1'b1 == a_Data_0_vld_in)))) begin
            a_Data_0_state <= 2'd3;
        end else begin
            a_Data_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        b_Bind_0_sel_rd <= 1'b0;
    end else begin
        if (((b_Bind_0_ack_out == 1'b1) & (b_Bind_0_vld_out == 1'b1))) begin
            b_Bind_0_sel_rd <= ~b_Bind_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        b_Bind_0_sel_wr <= 1'b0;
    end else begin
        if (((b_Bind_0_ack_in == 1'b1) & (b_Bind_0_vld_in == 1'b1))) begin
            b_Bind_0_sel_wr <= ~b_Bind_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        b_Bind_0_state <= 2'd0;
    end else begin
        if ((((b_Bind_0_state == 2'd2) & (b_Bind_0_vld_in == 1'b0)) | ((b_Bind_0_state == 2'd3) & (b_Bind_0_vld_in == 1'b0) & (b_Bind_0_ack_out == 1'b1)))) begin
            b_Bind_0_state <= 2'd2;
        end else if ((((b_Bind_0_state == 2'd3) & (b_Bind_0_ack_out == 1'b0) & (b_Bind_0_vld_in == 1'b1)) | ((b_Bind_0_state == 2'd1) & (b_Bind_0_ack_out == 1'b0)))) begin
            b_Bind_0_state <= 2'd1;
        end else if ((((b_Bind_0_state == 2'd2) & (b_Bind_0_vld_in == 1'b1)) | (~((b_Bind_0_vld_in == 1'b0) & (b_Bind_0_ack_out == 1'b1)) & ~((b_Bind_0_ack_out == 1'b0) & (b_Bind_0_vld_in == 1'b1)) & (b_Bind_0_state == 2'd3)) | ((b_Bind_0_state == 2'd1) & (b_Bind_0_ack_out == 1'b1)))) begin
            b_Bind_0_state <= 2'd3;
        end else begin
            b_Bind_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        c_Data_1_sel_rd <= 1'b0;
    end else begin
        if (((c_Data_1_ack_out == 1'b1) & (c_Data_1_vld_out == 1'b1))) begin
            c_Data_1_sel_rd <= ~c_Data_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        c_Data_1_sel_wr <= 1'b0;
    end else begin
        if (((c_Data_1_ack_in == 1'b1) & (c_Data_1_vld_in == 1'b1))) begin
            c_Data_1_sel_wr <= ~c_Data_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        c_Data_1_state <= 2'd0;
    end else begin
        if ((((c_Data_1_state == 2'd2) & (c_Data_1_vld_in == 1'b0)) | ((c_Data_1_state == 2'd3) & (c_Data_1_vld_in == 1'b0) & (c_Data_1_ack_out == 1'b1)))) begin
            c_Data_1_state <= 2'd2;
        end else if ((((c_Data_1_state == 2'd1) & (c_Data_1_ack_out == 1'b0)) | ((c_Data_1_state == 2'd3) & (c_Data_1_ack_out == 1'b0) & (c_Data_1_vld_in == 1'b1)))) begin
            c_Data_1_state <= 2'd1;
        end else if (((~((c_Data_1_vld_in == 1'b0) & (c_Data_1_ack_out == 1'b1)) & ~((c_Data_1_ack_out == 1'b0) & (c_Data_1_vld_in == 1'b1)) & (c_Data_1_state == 2'd3)) | ((c_Data_1_state == 2'd1) & (c_Data_1_ack_out == 1'b1)) | ((c_Data_1_state == 2'd2) & (c_Data_1_vld_in == 1'b1)))) begin
            c_Data_1_state <= 2'd3;
        end else begin
            c_Data_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == a_Data_0_load_A)) begin
        a_Data_0_payload_A <= a_Data_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == a_Data_0_load_B)) begin
        a_Data_0_payload_B <= a_Data_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((b_Bind_0_load_A == 1'b1)) begin
        b_Bind_0_payload_A <= b_Bind_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((b_Bind_0_load_B == 1'b1)) begin
        b_Bind_0_payload_B <= b_Bind_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((c_Data_1_load_A == 1'b1)) begin
        c_Data_1_payload_A <= tmp_36_fu_721_p9;
    end
end

always @ (posedge ap_clk) begin
    if ((c_Data_1_load_B == 1'b1)) begin
        c_Data_1_payload_B <= tmp_36_fu_721_p9;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_Data_0_ack_out = 1'b1;
    end else begin
        a_Data_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == a_Data_0_sel)) begin
        a_Data_0_data_out = a_Data_0_payload_B;
    end else begin
        a_Data_0_data_out = a_Data_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_Data_TDATA_blk_n = a_Data_0_state[1'd0];
    end else begin
        a_Data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_Bind_0_ack_out = 1'b1;
    end else begin
        b_Bind_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((b_Bind_0_sel == 1'b1)) begin
        b_Bind_0_data_out = b_Bind_0_payload_B;
    end else begin
        b_Bind_0_data_out = b_Bind_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_Bind_TDATA_blk_n = b_Bind_0_state[1'd0];
    end else begin
        b_Bind_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((c_Data_1_sel == 1'b1)) begin
        c_Data_1_data_out = c_Data_1_payload_B;
    end else begin
        c_Data_1_data_out = c_Data_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_Data_1_vld_in = 1'b1;
    end else begin
        c_Data_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        c_Data_TDATA_blk_n = c_Data_1_state[1'd1];
    end else begin
        c_Data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_Data_0_ack_in = a_Data_0_state[1'd1];

assign a_Data_0_load_A = (~a_Data_0_sel_wr & a_Data_0_state_cmp_full);

assign a_Data_0_load_B = (a_Data_0_state_cmp_full & a_Data_0_sel_wr);

assign a_Data_0_sel = a_Data_0_sel_rd;

assign a_Data_0_state_cmp_full = ((a_Data_0_state != 2'd1) ? 1'b1 : 1'b0);

assign a_Data_0_vld_in = a_Data_TVALID;

assign a_Data_0_vld_out = a_Data_0_state[1'd0];

assign a_Data_TREADY = a_Data_0_state[1'd1];

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((c_Data_1_ack_in == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b1 == 1'b1) & ((b_Bind_0_vld_out == 1'b0) | (1'b0 == a_Data_0_vld_out))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((c_Data_1_ack_in == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b1 == 1'b1) & ((b_Bind_0_vld_out == 1'b0) | (1'b0 == a_Data_0_vld_out) | (c_Data_1_ack_in == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((c_Data_1_ack_in == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b1 == 1'b1) & ((b_Bind_0_vld_out == 1'b0) | (1'b0 == a_Data_0_vld_out) | (c_Data_1_ack_in == 1'b0))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((b_Bind_0_vld_out == 1'b0) | (1'b0 == a_Data_0_vld_out));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (c_Data_1_ack_in == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign b_Bind_0_ack_in = b_Bind_0_state[1'd1];

assign b_Bind_0_load_A = (~b_Bind_0_sel_wr & b_Bind_0_state_cmp_full);

assign b_Bind_0_load_B = (b_Bind_0_state_cmp_full & b_Bind_0_sel_wr);

assign b_Bind_0_sel = b_Bind_0_sel_rd;

assign b_Bind_0_state_cmp_full = ((b_Bind_0_state != 2'd1) ? 1'b1 : 1'b0);

assign b_Bind_0_vld_in = b_Bind_TVALID;

assign b_Bind_0_vld_out = b_Bind_0_state[1'd0];

assign b_Bind_TREADY = b_Bind_0_state[1'd1];

assign c_Data_1_ack_in = c_Data_1_state[1'd1];

assign c_Data_1_ack_out = c_Data_TREADY;

assign c_Data_1_load_A = (~c_Data_1_sel_wr & c_Data_1_state_cmp_full);

assign c_Data_1_load_B = (c_Data_1_state_cmp_full & c_Data_1_sel_wr);

assign c_Data_1_sel = c_Data_1_sel_rd;

assign c_Data_1_state_cmp_full = ((c_Data_1_state != 2'd1) ? 1'b1 : 1'b0);

assign c_Data_1_vld_out = c_Data_1_state[1'd0];

assign c_Data_TDATA = c_Data_1_data_out;

assign c_Data_TVALID = c_Data_1_state[1'd0];

assign grp_fu_742_p0 = tmp_1_fu_201_p1;

assign grp_fu_757_p0 = tmp_6_0_2_fu_251_p1;

assign grp_fu_772_p0 = tmp_1_fu_201_p1;

assign grp_fu_787_p0 = tmp_6_0_2_fu_251_p1;

assign grp_fu_802_p0 = tmp_1_fu_201_p1;

assign grp_fu_817_p0 = tmp_6_0_2_fu_251_p1;

assign grp_fu_832_p0 = tmp_1_fu_201_p1;

assign grp_fu_847_p0 = tmp_6_0_2_fu_251_p1;

assign grp_fu_862_p0 = tmp_1_fu_201_p1;

assign grp_fu_877_p0 = tmp_6_0_2_fu_251_p1;

assign grp_fu_892_p0 = tmp_1_fu_201_p1;

assign grp_fu_907_p0 = tmp_6_0_2_fu_251_p1;

assign grp_fu_922_p0 = tmp_1_fu_201_p1;

assign grp_fu_937_p0 = tmp_6_0_2_fu_251_p1;

assign grp_fu_952_p0 = tmp_1_fu_201_p1;

assign grp_fu_967_p0 = tmp_6_0_2_fu_251_p1;

assign tmp_0_1_fu_750_p0 = tmp_6_0_1_fu_223_p1;

assign tmp_0_3_fu_765_p0 = tmp_6_0_3_fu_279_p1;

assign tmp_10_fu_329_p4 = {{b_Bind_0_data_out[111:96]}};

assign tmp_11_fu_343_p4 = {{b_Bind_0_data_out[127:112]}};

assign tmp_12_fu_361_p4 = {{b_Bind_0_data_out[143:128]}};

assign tmp_13_fu_375_p4 = {{b_Bind_0_data_out[159:144]}};

assign tmp_14_fu_389_p4 = {{b_Bind_0_data_out[175:160]}};

assign tmp_15_fu_403_p4 = {{b_Bind_0_data_out[191:176]}};

assign tmp_16_fu_421_p4 = {{b_Bind_0_data_out[207:192]}};

assign tmp_17_fu_435_p4 = {{b_Bind_0_data_out[223:208]}};

assign tmp_18_fu_449_p4 = {{b_Bind_0_data_out[239:224]}};

assign tmp_19_fu_463_p4 = {{b_Bind_0_data_out[255:240]}};

assign tmp_1_1_fu_780_p0 = tmp_6_0_1_fu_223_p1;

assign tmp_1_3_fu_795_p0 = tmp_6_0_3_fu_279_p1;

assign tmp_1_fu_201_p1 = $signed(tmp_fu_197_p1);

assign tmp_20_fu_481_p4 = {{b_Bind_0_data_out[271:256]}};

assign tmp_21_fu_495_p4 = {{b_Bind_0_data_out[287:272]}};

assign tmp_22_fu_509_p4 = {{b_Bind_0_data_out[303:288]}};

assign tmp_23_fu_523_p4 = {{b_Bind_0_data_out[319:304]}};

assign tmp_24_fu_541_p4 = {{b_Bind_0_data_out[335:320]}};

assign tmp_25_fu_555_p4 = {{b_Bind_0_data_out[351:336]}};

assign tmp_26_fu_569_p4 = {{b_Bind_0_data_out[367:352]}};

assign tmp_27_fu_583_p4 = {{b_Bind_0_data_out[383:368]}};

assign tmp_28_fu_601_p4 = {{b_Bind_0_data_out[399:384]}};

assign tmp_29_fu_615_p4 = {{b_Bind_0_data_out[415:400]}};

assign tmp_2_1_fu_810_p0 = tmp_6_0_1_fu_223_p1;

assign tmp_2_3_fu_825_p0 = tmp_6_0_3_fu_279_p1;

assign tmp_2_fu_213_p4 = {{a_Data_0_data_out[31:16]}};

assign tmp_30_fu_629_p4 = {{b_Bind_0_data_out[431:416]}};

assign tmp_31_fu_643_p4 = {{b_Bind_0_data_out[447:432]}};

assign tmp_32_fu_661_p4 = {{b_Bind_0_data_out[463:448]}};

assign tmp_33_fu_675_p4 = {{b_Bind_0_data_out[479:464]}};

assign tmp_34_fu_689_p4 = {{b_Bind_0_data_out[495:480]}};

assign tmp_35_fu_703_p4 = {{b_Bind_0_data_out[511:496]}};

assign tmp_36_fu_721_p9 = {{{{{{{{tmp_4_7_3_fu_717_p2}, {tmp_4_6_3_fu_657_p2}}, {tmp_4_5_3_fu_597_p2}}, {tmp_4_4_3_fu_537_p2}}, {tmp_4_3_3_fu_477_p2}}, {tmp_4_2_3_fu_417_p2}}, {tmp_4_1_3_fu_357_p2}}, {tmp_4_0_3_fu_297_p2}};

assign tmp_37_fu_205_p1 = b_Bind_0_data_out[15:0];

assign tmp_3_1_fu_840_p0 = tmp_6_0_1_fu_223_p1;

assign tmp_3_3_fu_855_p0 = tmp_6_0_3_fu_279_p1;

assign tmp_3_fu_227_p4 = {{b_Bind_0_data_out[31:16]}};

assign tmp_4_0_3_fu_297_p2 = ($signed(grp_fu_742_p3) + $signed(grp_fu_757_p3));

assign tmp_4_1_3_fu_357_p2 = ($signed(grp_fu_772_p3) + $signed(grp_fu_787_p3));

assign tmp_4_1_fu_870_p0 = tmp_6_0_1_fu_223_p1;

assign tmp_4_2_3_fu_417_p2 = ($signed(grp_fu_802_p3) + $signed(grp_fu_817_p3));

assign tmp_4_3_3_fu_477_p2 = ($signed(grp_fu_832_p3) + $signed(grp_fu_847_p3));

assign tmp_4_3_fu_885_p0 = tmp_6_0_3_fu_279_p1;

assign tmp_4_4_3_fu_537_p2 = ($signed(grp_fu_862_p3) + $signed(grp_fu_877_p3));

assign tmp_4_5_3_fu_597_p2 = ($signed(grp_fu_892_p3) + $signed(grp_fu_907_p3));

assign tmp_4_6_3_fu_657_p2 = ($signed(grp_fu_922_p3) + $signed(grp_fu_937_p3));

assign tmp_4_7_3_fu_717_p2 = ($signed(grp_fu_952_p3) + $signed(grp_fu_967_p3));

assign tmp_4_fu_241_p4 = {{a_Data_0_data_out[47:32]}};

assign tmp_5_1_fu_900_p0 = tmp_6_0_1_fu_223_p1;

assign tmp_5_3_fu_915_p0 = tmp_6_0_3_fu_279_p1;

assign tmp_5_fu_255_p4 = {{b_Bind_0_data_out[47:32]}};

assign tmp_6_0_1_fu_223_p1 = $signed(tmp_2_fu_213_p4);

assign tmp_6_0_2_fu_251_p1 = $signed(tmp_4_fu_241_p4);

assign tmp_6_0_3_fu_279_p1 = $signed(tmp_6_fu_269_p4);

assign tmp_6_1_fu_930_p0 = tmp_6_0_1_fu_223_p1;

assign tmp_6_3_fu_945_p0 = tmp_6_0_3_fu_279_p1;

assign tmp_6_fu_269_p4 = {{a_Data_0_data_out[63:48]}};

assign tmp_7_1_fu_960_p0 = tmp_6_0_1_fu_223_p1;

assign tmp_7_3_fu_975_p0 = tmp_6_0_3_fu_279_p1;

assign tmp_7_fu_283_p4 = {{b_Bind_0_data_out[63:48]}};

assign tmp_8_fu_301_p4 = {{b_Bind_0_data_out[79:64]}};

assign tmp_9_fu_315_p4 = {{b_Bind_0_data_out[95:80]}};

assign tmp_fu_197_p1 = a_Data_0_data_out[15:0];

endmodule //MAC_Tree_1x4x8
