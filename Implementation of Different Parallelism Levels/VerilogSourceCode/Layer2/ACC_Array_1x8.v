// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="ACC_Array_1x8,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xazu3eg-sfvc784-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=2.091750,HLS_SYN_LAT=2,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1175,HLS_SYN_LUT=1004,HLS_VERSION=2018_3}" *)

module ACC_Array_1x8 (
        ap_clk,
        ap_rst_n,
        c_Data_TDATA,
        c_Data_TVALID,
        c_Data_TREADY,
        Bias_Data,
        d_Data_TDATA,
        d_Data_TVALID,
        d_Data_TREADY
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst_n;
input  [255:0] c_Data_TDATA;
input   c_Data_TVALID;
output   c_Data_TREADY;
input  [127:0] Bias_Data;
output  [127:0] d_Data_TDATA;
output   d_Data_TVALID;
input   d_Data_TREADY;

 reg    ap_rst_n_inv;
reg   [255:0] c_Data_0_data_out;
wire    c_Data_0_vld_in;
wire    c_Data_0_vld_out;
wire    c_Data_0_ack_in;
reg    c_Data_0_ack_out;
reg   [255:0] c_Data_0_payload_A;
reg   [255:0] c_Data_0_payload_B;
reg    c_Data_0_sel_rd;
reg    c_Data_0_sel_wr;
wire    c_Data_0_sel;
wire    c_Data_0_load_A;
wire    c_Data_0_load_B;
reg   [1:0] c_Data_0_state;
wire    c_Data_0_state_cmp_full;
reg   [127:0] d_Data_1_data_out;
reg    d_Data_1_vld_in;
wire    d_Data_1_vld_out;
wire    d_Data_1_ack_in;
wire    d_Data_1_ack_out;
reg   [127:0] d_Data_1_payload_A;
reg   [127:0] d_Data_1_payload_B;
reg    d_Data_1_sel_rd;
reg    d_Data_1_sel_wr;
wire    d_Data_1_sel;
wire    d_Data_1_load_A;
wire    d_Data_1_load_B;
reg   [1:0] d_Data_1_state;
wire    d_Data_1_state_cmp_full;
reg   [7:0] cnt;
reg   [31:0] d_t_0;
reg   [31:0] d_t_1;
reg   [31:0] d_t_2;
reg   [31:0] d_t_3;
reg   [31:0] d_t_4;
reg   [31:0] d_t_5;
reg   [31:0] d_t_6;
reg   [31:0] d_t_7;
reg    c_Data_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_pp0_stage0;
wire   [0:0] tmp_fu_260_p2;
wire   [0:0] tmp_1_fu_305_p2;
reg    d_Data_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] tmp_reg_766;
reg   [0:0] tmp_1_reg_770;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] tmp_reg_766_pp0_iter1_reg;
reg   [0:0] tmp_1_reg_770_pp0_iter1_reg;
reg    ap_predicate_op18_read_state1;
reg    ap_predicate_op46_read_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg    ap_predicate_op122_write_state2;
reg    ap_block_state2_io;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_predicate_op132_write_state3;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage0_11001;
reg   [15:0] tmp_s_reg_774;
reg   [15:0] tmp_1_45_reg_779;
reg   [15:0] tmp_2_46_reg_784;
reg   [15:0] tmp_3_47_reg_789;
reg   [15:0] tmp_4_48_reg_794;
reg   [15:0] tmp_5_49_reg_799;
reg   [15:0] tmp_6_reg_804;
reg   [15:0] tmp_7_50_reg_809;
wire   [127:0] tmp_29_fu_753_p9;
reg    ap_block_pp0_stage0_subdone;
wire   [7:0] tmp_6_51_fu_369_p2;
wire   [31:0] tmp_39_fu_315_p2;
wire   [31:0] tmp_3_fu_497_p2;
wire   [31:0] grp_fu_161_p2;
wire   [31:0] tmp_5_1_fu_531_p2;
wire   [31:0] grp_fu_176_p2;
wire   [31:0] tmp_5_2_fu_565_p2;
wire   [31:0] grp_fu_191_p2;
wire   [31:0] tmp_5_3_fu_599_p2;
wire   [31:0] grp_fu_206_p2;
wire   [31:0] tmp_5_4_fu_633_p2;
wire   [31:0] grp_fu_221_p2;
wire   [31:0] tmp_5_5_fu_667_p2;
wire   [31:0] grp_fu_236_p2;
wire   [31:0] tmp_5_6_fu_701_p2;
wire   [31:0] grp_fu_251_p2;
wire   [31:0] tmp_5_7_fu_735_p2;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] grp_fu_151_p4;
wire   [31:0] grp_fu_166_p4;
wire   [31:0] grp_fu_181_p4;
wire   [31:0] grp_fu_196_p4;
wire   [31:0] grp_fu_211_p4;
wire   [31:0] grp_fu_226_p4;
wire   [31:0] grp_fu_241_p4;
wire   [31:0] tmp_38_fu_311_p1;
wire   [31:0] tmp_21_fu_387_p1;
wire   [31:0] tmp_30_fu_391_p2;
wire   [15:0] tmp_2_fu_477_p1;
wire   [22:0] tmp_4_fu_481_p3;
wire   [31:0] tmp_5_fu_493_p1;
wire  signed [31:0] tmp_4_cast_fu_489_p1;
wire   [15:0] tmp_7_fu_509_p4;
wire   [22:0] tmp_4_1_fu_519_p3;
wire  signed [31:0] tmp_4_1_cast_fu_527_p1;
wire   [15:0] tmp_9_fu_543_p4;
wire   [22:0] tmp_4_2_fu_553_p3;
wire  signed [31:0] tmp_4_2_cast_fu_561_p1;
wire   [15:0] tmp_11_fu_577_p4;
wire   [22:0] tmp_4_3_fu_587_p3;
wire  signed [31:0] tmp_4_3_cast_fu_595_p1;
wire   [15:0] tmp_13_fu_611_p4;
wire   [22:0] tmp_4_4_fu_621_p3;
wire  signed [31:0] tmp_4_4_cast_fu_629_p1;
wire   [15:0] tmp_15_fu_645_p4;
wire   [22:0] tmp_4_5_fu_655_p3;
wire  signed [31:0] tmp_4_5_cast_fu_663_p1;
wire   [15:0] tmp_17_fu_679_p4;
wire   [22:0] tmp_4_6_fu_689_p3;
wire  signed [31:0] tmp_4_6_cast_fu_697_p1;
wire   [15:0] tmp_19_fu_713_p4;
wire   [22:0] tmp_4_7_fu_723_p3;
wire  signed [31:0] tmp_4_7_cast_fu_731_p1;
reg   [0:0] ap_NS_fsm;
wire    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_256;

// power-on initialization
initial begin
#0 c_Data_0_sel_rd = 1'b0;
#0 c_Data_0_sel_wr = 1'b0;
#0 c_Data_0_state = 2'd0;
#0 d_Data_1_sel_rd = 1'b0;
#0 d_Data_1_sel_wr = 1'b0;
#0 d_Data_1_state = 2'd0;
#0 cnt = 8'd0;
#0 d_t_0 = 32'd0;
#0 d_t_1 = 32'd0;
#0 d_t_2 = 32'd0;
#0 d_t_3 = 32'd0;
#0 d_t_4 = 32'd0;
#0 d_t_5 = 32'd0;
#0 d_t_6 = 32'd0;
#0 d_t_7 = 32'd0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        c_Data_0_sel_rd <= 1'b0;
    end else begin
        if (((c_Data_0_ack_out == 1'b1) & (c_Data_0_vld_out == 1'b1))) begin
            c_Data_0_sel_rd <= ~c_Data_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        c_Data_0_sel_wr <= 1'b0;
    end else begin
        if (((c_Data_0_ack_in == 1'b1) & (c_Data_0_vld_in == 1'b1))) begin
            c_Data_0_sel_wr <= ~c_Data_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        c_Data_0_state <= 2'd0;
    end else begin
        if ((((c_Data_0_vld_in == 1'b0) & (c_Data_0_state == 2'd2)) | ((c_Data_0_vld_in == 1'b0) & (c_Data_0_state == 2'd3) & (c_Data_0_ack_out == 1'b1)))) begin
            c_Data_0_state <= 2'd2;
        end else if ((((c_Data_0_ack_out == 1'b0) & (c_Data_0_state == 2'd1)) | ((c_Data_0_ack_out == 1'b0) & (c_Data_0_state == 2'd3) & (c_Data_0_vld_in == 1'b1)))) begin
            c_Data_0_state <= 2'd1;
        end else if (((~((c_Data_0_vld_in == 1'b0) & (c_Data_0_ack_out == 1'b1)) & ~((c_Data_0_ack_out == 1'b0) & (c_Data_0_vld_in == 1'b1)) & (c_Data_0_state == 2'd3)) | ((c_Data_0_state == 2'd1) & (c_Data_0_ack_out == 1'b1)) | ((c_Data_0_state == 2'd2) & (c_Data_0_vld_in == 1'b1)))) begin
            c_Data_0_state <= 2'd3;
        end else begin
            c_Data_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        d_Data_1_sel_rd <= 1'b0;
    end else begin
        if (((d_Data_1_ack_out == 1'b1) & (d_Data_1_vld_out == 1'b1))) begin
            d_Data_1_sel_rd <= ~d_Data_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        d_Data_1_sel_wr <= 1'b0;
    end else begin
        if (((d_Data_1_ack_in == 1'b1) & (d_Data_1_vld_in == 1'b1))) begin
            d_Data_1_sel_wr <= ~d_Data_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        d_Data_1_state <= 2'd0;
    end else begin
        if ((((d_Data_1_state == 2'd2) & (d_Data_1_vld_in == 1'b0)) | ((d_Data_1_state == 2'd3) & (d_Data_1_vld_in == 1'b0) & (d_Data_1_ack_out == 1'b1)))) begin
            d_Data_1_state <= 2'd2;
        end else if ((((d_Data_1_state == 2'd3) & (d_Data_1_ack_out == 1'b0) & (d_Data_1_vld_in == 1'b1)) | ((d_Data_1_state == 2'd1) & (d_Data_1_ack_out == 1'b0)))) begin
            d_Data_1_state <= 2'd1;
        end else if ((((d_Data_1_state == 2'd2) & (d_Data_1_vld_in == 1'b1)) | (~((d_Data_1_vld_in == 1'b0) & (d_Data_1_ack_out == 1'b1)) & ~((d_Data_1_ack_out == 1'b0) & (d_Data_1_vld_in == 1'b1)) & (d_Data_1_state == 2'd3)) | ((d_Data_1_state == 2'd1) & (d_Data_1_ack_out == 1'b1)))) begin
            d_Data_1_state <= 2'd3;
        end else begin
            d_Data_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_256)) begin
        if ((tmp_fu_260_p2 == 1'd1)) begin
            cnt <= 8'd1;
        end else if (((tmp_1_fu_305_p2 == 1'd1) & (tmp_fu_260_p2 == 1'd0))) begin
            cnt <= 8'd0;
        end else if (((tmp_1_fu_305_p2 == 1'd0) & (tmp_fu_260_p2 == 1'd0))) begin
            cnt <= tmp_6_51_fu_369_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_256)) begin
        if ((tmp_fu_260_p2 == 1'd1)) begin
            d_t_0 <= tmp_3_fu_497_p2;
        end else if (((tmp_1_fu_305_p2 == 1'd0) & (tmp_fu_260_p2 == 1'd0))) begin
            d_t_0 <= tmp_39_fu_315_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_256)) begin
        if ((tmp_fu_260_p2 == 1'd1)) begin
            d_t_1 <= tmp_5_1_fu_531_p2;
        end else if (((tmp_1_fu_305_p2 == 1'd0) & (tmp_fu_260_p2 == 1'd0))) begin
            d_t_1 <= grp_fu_161_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_256)) begin
        if ((tmp_fu_260_p2 == 1'd1)) begin
            d_t_2 <= tmp_5_2_fu_565_p2;
        end else if (((tmp_1_fu_305_p2 == 1'd0) & (tmp_fu_260_p2 == 1'd0))) begin
            d_t_2 <= grp_fu_176_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_256)) begin
        if ((tmp_fu_260_p2 == 1'd1)) begin
            d_t_3 <= tmp_5_3_fu_599_p2;
        end else if (((tmp_1_fu_305_p2 == 1'd0) & (tmp_fu_260_p2 == 1'd0))) begin
            d_t_3 <= grp_fu_191_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_256)) begin
        if ((tmp_fu_260_p2 == 1'd1)) begin
            d_t_4 <= tmp_5_4_fu_633_p2;
        end else if (((tmp_1_fu_305_p2 == 1'd0) & (tmp_fu_260_p2 == 1'd0))) begin
            d_t_4 <= grp_fu_206_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_256)) begin
        if ((tmp_fu_260_p2 == 1'd1)) begin
            d_t_5 <= tmp_5_5_fu_667_p2;
        end else if (((tmp_1_fu_305_p2 == 1'd0) & (tmp_fu_260_p2 == 1'd0))) begin
            d_t_5 <= grp_fu_221_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_256)) begin
        if ((tmp_fu_260_p2 == 1'd1)) begin
            d_t_6 <= tmp_5_6_fu_701_p2;
        end else if (((tmp_1_fu_305_p2 == 1'd0) & (tmp_fu_260_p2 == 1'd0))) begin
            d_t_6 <= grp_fu_236_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_256)) begin
        if ((tmp_fu_260_p2 == 1'd1)) begin
            d_t_7 <= tmp_5_7_fu_735_p2;
        end else if (((tmp_1_fu_305_p2 == 1'd0) & (tmp_fu_260_p2 == 1'd0))) begin
            d_t_7 <= grp_fu_251_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((c_Data_0_load_A == 1'b1)) begin
        c_Data_0_payload_A <= c_Data_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((c_Data_0_load_B == 1'b1)) begin
        c_Data_0_payload_B <= c_Data_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((d_Data_1_load_A == 1'b1)) begin
        d_Data_1_payload_A <= tmp_29_fu_753_p9;
    end
end

always @ (posedge ap_clk) begin
    if ((d_Data_1_load_B == 1'b1)) begin
        d_Data_1_payload_B <= tmp_29_fu_753_p9;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_fu_305_p2 == 1'd1) & (tmp_fu_260_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_1_45_reg_779 <= {{grp_fu_161_p2[31:16]}};
        tmp_2_46_reg_784 <= {{grp_fu_176_p2[31:16]}};
        tmp_3_47_reg_789 <= {{grp_fu_191_p2[31:16]}};
        tmp_4_48_reg_794 <= {{grp_fu_206_p2[31:16]}};
        tmp_5_49_reg_799 <= {{grp_fu_221_p2[31:16]}};
        tmp_6_reg_804 <= {{grp_fu_236_p2[31:16]}};
        tmp_7_50_reg_809 <= {{grp_fu_251_p2[31:16]}};
        tmp_s_reg_774 <= {{tmp_30_fu_391_p2[31:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_260_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_1_reg_770 <= tmp_1_fu_305_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_1_reg_770_pp0_iter1_reg <= tmp_1_reg_770;
        tmp_reg_766 <= tmp_fu_260_p2;
        tmp_reg_766_pp0_iter1_reg <= tmp_reg_766;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    if ((((ap_predicate_op46_read_state1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_predicate_op18_read_state1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((tmp_fu_260_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        c_Data_0_ack_out = 1'b1;
    end else begin
        c_Data_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((c_Data_0_sel == 1'b1)) begin
        c_Data_0_data_out = c_Data_0_payload_B;
    end else begin
        c_Data_0_data_out = c_Data_0_payload_A;
    end
end

always @ (*) begin
    if ((((tmp_1_fu_305_p2 == 1'd0) & (tmp_fu_260_p2 == 1'd0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((tmp_1_fu_305_p2 == 1'd1) & (tmp_fu_260_p2 == 1'd0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((tmp_fu_260_p2 == 1'd1) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)))) begin
        c_Data_TDATA_blk_n = c_Data_0_state[1'd0];
    end else begin
        c_Data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((d_Data_1_sel == 1'b1)) begin
        d_Data_1_data_out = d_Data_1_payload_B;
    end else begin
        d_Data_1_data_out = d_Data_1_payload_A;
    end
end

always @ (*) begin
    if (((ap_predicate_op122_write_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        d_Data_1_vld_in = 1'b1;
    end else begin
        d_Data_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_1_reg_770_pp0_iter1_reg == 1'd1) & (tmp_reg_766_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((tmp_1_reg_770 == 1'd1) & (tmp_reg_766 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)))) begin
        d_Data_TDATA_blk_n = d_Data_1_state[1'd1];
    end else begin
        d_Data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((d_Data_1_ack_in == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b1 == 1'b1) & (((c_Data_0_vld_out == 1'b0) & (ap_predicate_op46_read_state1 == 1'b1)) | ((c_Data_0_vld_out == 1'b0) & (ap_predicate_op18_read_state1 == 1'b1)) | ((tmp_fu_260_p2 == 1'd1) & (c_Data_0_vld_out == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & ((d_Data_1_ack_in == 1'b0) | (1'b1 == ap_block_state3_io))) | ((1'b1 == ap_block_state2_io) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b1 == 1'b1) & (((c_Data_0_vld_out == 1'b0) & (ap_predicate_op46_read_state1 == 1'b1)) | ((c_Data_0_vld_out == 1'b0) & (ap_predicate_op18_read_state1 == 1'b1)) | ((tmp_fu_260_p2 == 1'd1) & (c_Data_0_vld_out == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter2 == 1'b1) & ((d_Data_1_ack_in == 1'b0) | (1'b1 == ap_block_state3_io))) | ((1'b1 == ap_block_state2_io) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b1 == 1'b1) & (((c_Data_0_vld_out == 1'b0) & (ap_predicate_op46_read_state1 == 1'b1)) | ((c_Data_0_vld_out == 1'b0) & (ap_predicate_op18_read_state1 == 1'b1)) | ((tmp_fu_260_p2 == 1'd1) & (c_Data_0_vld_out == 1'b0)))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (((c_Data_0_vld_out == 1'b0) & (ap_predicate_op46_read_state1 == 1'b1)) | ((c_Data_0_vld_out == 1'b0) & (ap_predicate_op18_read_state1 == 1'b1)) | ((tmp_fu_260_p2 == 1'd1) & (c_Data_0_vld_out == 1'b0)));
end

always @ (*) begin
    ap_block_state2_io = ((d_Data_1_ack_in == 1'b0) & (ap_predicate_op122_write_state2 == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((d_Data_1_ack_in == 1'b0) & (ap_predicate_op132_write_state3 == 1'b1));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (d_Data_1_ack_in == 1'b0);
end

always @ (*) begin
    ap_condition_256 = ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_op122_write_state2 = ((tmp_1_reg_770 == 1'd1) & (tmp_reg_766 == 1'd0));
end

always @ (*) begin
    ap_predicate_op132_write_state3 = ((tmp_1_reg_770_pp0_iter1_reg == 1'd1) & (tmp_reg_766_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op18_read_state1 = ((tmp_1_fu_305_p2 == 1'd0) & (tmp_fu_260_p2 == 1'd0));
end

always @ (*) begin
    ap_predicate_op46_read_state1 = ((tmp_1_fu_305_p2 == 1'd1) & (tmp_fu_260_p2 == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign c_Data_0_ack_in = c_Data_0_state[1'd1];

assign c_Data_0_load_A = (~c_Data_0_sel_wr & c_Data_0_state_cmp_full);

assign c_Data_0_load_B = (c_Data_0_state_cmp_full & c_Data_0_sel_wr);

assign c_Data_0_sel = c_Data_0_sel_rd;

assign c_Data_0_state_cmp_full = ((c_Data_0_state != 2'd1) ? 1'b1 : 1'b0);

assign c_Data_0_vld_in = c_Data_TVALID;

assign c_Data_0_vld_out = c_Data_0_state[1'd0];

assign c_Data_TREADY = c_Data_0_state[1'd1];

assign d_Data_1_ack_in = d_Data_1_state[1'd1];

assign d_Data_1_ack_out = d_Data_TREADY;

assign d_Data_1_load_A = (~d_Data_1_sel_wr & d_Data_1_state_cmp_full);

assign d_Data_1_load_B = (d_Data_1_state_cmp_full & d_Data_1_sel_wr);

assign d_Data_1_sel = d_Data_1_sel_rd;

assign d_Data_1_state_cmp_full = ((d_Data_1_state != 2'd1) ? 1'b1 : 1'b0);

assign d_Data_1_vld_out = d_Data_1_state[1'd0];

assign d_Data_TDATA = d_Data_1_data_out;

assign d_Data_TVALID = d_Data_1_state[1'd0];

assign grp_fu_151_p4 = {{c_Data_0_data_out[63:32]}};

assign grp_fu_161_p2 = (grp_fu_151_p4 + d_t_1);

assign grp_fu_166_p4 = {{c_Data_0_data_out[95:64]}};

assign grp_fu_176_p2 = (grp_fu_166_p4 + d_t_2);

assign grp_fu_181_p4 = {{c_Data_0_data_out[127:96]}};

assign grp_fu_191_p2 = (grp_fu_181_p4 + d_t_3);

assign grp_fu_196_p4 = {{c_Data_0_data_out[159:128]}};

assign grp_fu_206_p2 = (grp_fu_196_p4 + d_t_4);

assign grp_fu_211_p4 = {{c_Data_0_data_out[191:160]}};

assign grp_fu_221_p2 = (grp_fu_211_p4 + d_t_5);

assign grp_fu_226_p4 = {{c_Data_0_data_out[223:192]}};

assign grp_fu_236_p2 = (grp_fu_226_p4 + d_t_6);

assign grp_fu_241_p4 = {{c_Data_0_data_out[255:224]}};

assign grp_fu_251_p2 = (grp_fu_241_p4 + d_t_7);

assign tmp_11_fu_577_p4 = {{Bias_Data[63:48]}};

assign tmp_13_fu_611_p4 = {{Bias_Data[79:64]}};

assign tmp_15_fu_645_p4 = {{Bias_Data[95:80]}};

assign tmp_17_fu_679_p4 = {{Bias_Data[111:96]}};

assign tmp_19_fu_713_p4 = {{Bias_Data[127:112]}};

assign tmp_1_fu_305_p2 = ((cnt == 8'd8) ? 1'b1 : 1'b0);

assign tmp_21_fu_387_p1 = c_Data_0_data_out[31:0];

assign tmp_29_fu_753_p9 = {{{{{{{{tmp_7_50_reg_809}, {tmp_6_reg_804}}, {tmp_5_49_reg_799}}, {tmp_4_48_reg_794}}, {tmp_3_47_reg_789}}, {tmp_2_46_reg_784}}, {tmp_1_45_reg_779}}, {tmp_s_reg_774}};

assign tmp_2_fu_477_p1 = Bias_Data[15:0];

assign tmp_30_fu_391_p2 = (tmp_21_fu_387_p1 + d_t_0);

assign tmp_38_fu_311_p1 = c_Data_0_data_out[31:0];

assign tmp_39_fu_315_p2 = (tmp_38_fu_311_p1 + d_t_0);

assign tmp_3_fu_497_p2 = ($signed(tmp_5_fu_493_p1) + $signed(tmp_4_cast_fu_489_p1));

assign tmp_4_1_cast_fu_527_p1 = $signed(tmp_4_1_fu_519_p3);

assign tmp_4_1_fu_519_p3 = {{tmp_7_fu_509_p4}, {7'd0}};

assign tmp_4_2_cast_fu_561_p1 = $signed(tmp_4_2_fu_553_p3);

assign tmp_4_2_fu_553_p3 = {{tmp_9_fu_543_p4}, {7'd0}};

assign tmp_4_3_cast_fu_595_p1 = $signed(tmp_4_3_fu_587_p3);

assign tmp_4_3_fu_587_p3 = {{tmp_11_fu_577_p4}, {7'd0}};

assign tmp_4_4_cast_fu_629_p1 = $signed(tmp_4_4_fu_621_p3);

assign tmp_4_4_fu_621_p3 = {{tmp_13_fu_611_p4}, {7'd0}};

assign tmp_4_5_cast_fu_663_p1 = $signed(tmp_4_5_fu_655_p3);

assign tmp_4_5_fu_655_p3 = {{tmp_15_fu_645_p4}, {7'd0}};

assign tmp_4_6_cast_fu_697_p1 = $signed(tmp_4_6_fu_689_p3);

assign tmp_4_6_fu_689_p3 = {{tmp_17_fu_679_p4}, {7'd0}};

assign tmp_4_7_cast_fu_731_p1 = $signed(tmp_4_7_fu_723_p3);

assign tmp_4_7_fu_723_p3 = {{tmp_19_fu_713_p4}, {7'd0}};

assign tmp_4_cast_fu_489_p1 = $signed(tmp_4_fu_481_p3);

assign tmp_4_fu_481_p3 = {{tmp_2_fu_477_p1}, {7'd0}};

assign tmp_5_1_fu_531_p2 = ($signed(grp_fu_151_p4) + $signed(tmp_4_1_cast_fu_527_p1));

assign tmp_5_2_fu_565_p2 = ($signed(grp_fu_166_p4) + $signed(tmp_4_2_cast_fu_561_p1));

assign tmp_5_3_fu_599_p2 = ($signed(grp_fu_181_p4) + $signed(tmp_4_3_cast_fu_595_p1));

assign tmp_5_4_fu_633_p2 = ($signed(grp_fu_196_p4) + $signed(tmp_4_4_cast_fu_629_p1));

assign tmp_5_5_fu_667_p2 = ($signed(grp_fu_211_p4) + $signed(tmp_4_5_cast_fu_663_p1));

assign tmp_5_6_fu_701_p2 = ($signed(grp_fu_226_p4) + $signed(tmp_4_6_cast_fu_697_p1));

assign tmp_5_7_fu_735_p2 = ($signed(grp_fu_241_p4) + $signed(tmp_4_7_cast_fu_731_p1));

assign tmp_5_fu_493_p1 = c_Data_0_data_out[31:0];

assign tmp_6_51_fu_369_p2 = (8'd1 + cnt);

assign tmp_7_fu_509_p4 = {{Bias_Data[31:16]}};

assign tmp_9_fu_543_p4 = {{Bias_Data[47:32]}};

assign tmp_fu_260_p2 = ((cnt == 8'd0) ? 1'b1 : 1'b0);

endmodule //ACC_Array_1x8
