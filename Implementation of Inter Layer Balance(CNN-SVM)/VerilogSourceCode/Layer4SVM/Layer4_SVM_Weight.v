// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Layer4_SVM_Weight,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xazu3eg-sfvc784-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.809000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=0,HLS_SYN_FF=2065,HLS_SYN_LUT=699,HLS_VERSION=2018_3}" *)

module Layer4_SVM_Weight (
        ap_clk,
        ap_rst_n,
        svm_weight_TDATA,
        svm_weight_TVALID,
        svm_weight_TREADY,
        w_Data_TDATA,
        w_Data_TVALID,
        w_Data_TREADY,
        Bias_Data
);

parameter    ap_ST_fsm_state1 = 51'd1;
parameter    ap_ST_fsm_state2 = 51'd2;
parameter    ap_ST_fsm_state3 = 51'd4;
parameter    ap_ST_fsm_state4 = 51'd8;
parameter    ap_ST_fsm_state5 = 51'd16;
parameter    ap_ST_fsm_state6 = 51'd32;
parameter    ap_ST_fsm_state7 = 51'd64;
parameter    ap_ST_fsm_state8 = 51'd128;
parameter    ap_ST_fsm_state9 = 51'd256;
parameter    ap_ST_fsm_state10 = 51'd512;
parameter    ap_ST_fsm_state11 = 51'd1024;
parameter    ap_ST_fsm_state12 = 51'd2048;
parameter    ap_ST_fsm_state13 = 51'd4096;
parameter    ap_ST_fsm_state14 = 51'd8192;
parameter    ap_ST_fsm_state15 = 51'd16384;
parameter    ap_ST_fsm_state16 = 51'd32768;
parameter    ap_ST_fsm_state17 = 51'd65536;
parameter    ap_ST_fsm_state18 = 51'd131072;
parameter    ap_ST_fsm_state19 = 51'd262144;
parameter    ap_ST_fsm_state20 = 51'd524288;
parameter    ap_ST_fsm_state21 = 51'd1048576;
parameter    ap_ST_fsm_state22 = 51'd2097152;
parameter    ap_ST_fsm_state23 = 51'd4194304;
parameter    ap_ST_fsm_state24 = 51'd8388608;
parameter    ap_ST_fsm_state25 = 51'd16777216;
parameter    ap_ST_fsm_state26 = 51'd33554432;
parameter    ap_ST_fsm_state27 = 51'd67108864;
parameter    ap_ST_fsm_state28 = 51'd134217728;
parameter    ap_ST_fsm_state29 = 51'd268435456;
parameter    ap_ST_fsm_state30 = 51'd536870912;
parameter    ap_ST_fsm_state31 = 51'd1073741824;
parameter    ap_ST_fsm_state32 = 51'd2147483648;
parameter    ap_ST_fsm_state33 = 51'd4294967296;
parameter    ap_ST_fsm_state34 = 51'd8589934592;
parameter    ap_ST_fsm_state35 = 51'd17179869184;
parameter    ap_ST_fsm_state36 = 51'd34359738368;
parameter    ap_ST_fsm_state37 = 51'd68719476736;
parameter    ap_ST_fsm_state38 = 51'd137438953472;
parameter    ap_ST_fsm_state39 = 51'd274877906944;
parameter    ap_ST_fsm_state40 = 51'd549755813888;
parameter    ap_ST_fsm_state41 = 51'd1099511627776;
parameter    ap_ST_fsm_state42 = 51'd2199023255552;
parameter    ap_ST_fsm_state43 = 51'd4398046511104;
parameter    ap_ST_fsm_state44 = 51'd8796093022208;
parameter    ap_ST_fsm_state45 = 51'd17592186044416;
parameter    ap_ST_fsm_state46 = 51'd35184372088832;
parameter    ap_ST_fsm_state47 = 51'd70368744177664;
parameter    ap_ST_fsm_state48 = 51'd140737488355328;
parameter    ap_ST_fsm_state49 = 51'd281474976710656;
parameter    ap_ST_fsm_pp1_stage0 = 51'd562949953421312;
parameter    ap_ST_fsm_state53 = 51'd1125899906842624;

input   ap_clk;
input   ap_rst_n;
input  [15:0] svm_weight_TDATA;
input   svm_weight_TVALID;
output   svm_weight_TREADY;
output  [255:0] w_Data_TDATA;
output   w_Data_TVALID;
input   w_Data_TREADY;
output  [719:0] Bias_Data;

 reg    ap_rst_n_inv;
reg   [15:0] svm_weight_0_data_out;
wire    svm_weight_0_vld_in;
wire    svm_weight_0_vld_out;
wire    svm_weight_0_ack_in;
reg    svm_weight_0_ack_out;
reg   [15:0] svm_weight_0_payload_A;
reg   [15:0] svm_weight_0_payload_B;
reg    svm_weight_0_sel_rd;
reg    svm_weight_0_sel_wr;
wire    svm_weight_0_sel;
wire    svm_weight_0_load_A;
wire    svm_weight_0_load_B;
reg   [1:0] svm_weight_0_state;
wire    svm_weight_0_state_cmp_full;
reg   [255:0] w_Data_1_data_out;
reg    w_Data_1_vld_in;
wire    w_Data_1_vld_out;
wire    w_Data_1_ack_in;
wire    w_Data_1_ack_out;
reg   [255:0] w_Data_1_payload_A;
reg   [255:0] w_Data_1_payload_B;
reg    w_Data_1_sel_rd;
reg    w_Data_1_sel_wr;
wire    w_Data_1_sel;
wire    w_Data_1_load_A;
wire    w_Data_1_load_B;
reg   [1:0] w_Data_1_state;
wire    w_Data_1_state_cmp_full;
reg   [719:0] Bias_Data_1_data_reg;
reg    Bias_Data_1_vld_reg;
reg    Bias_Data_1_vld_in;
reg   [8:0] weight_buf_0_address0;
reg    weight_buf_0_ce0;
reg    weight_buf_0_we0;
wire   [15:0] weight_buf_0_q0;
wire   [8:0] weight_buf_0_address1;
reg    weight_buf_0_ce1;
wire   [15:0] weight_buf_0_q1;
reg   [8:0] weight_buf_1_address0;
reg    weight_buf_1_ce0;
reg    weight_buf_1_we0;
wire   [15:0] weight_buf_1_q0;
wire   [8:0] weight_buf_1_address1;
reg    weight_buf_1_ce1;
wire   [15:0] weight_buf_1_q1;
reg   [8:0] weight_buf_2_address0;
reg    weight_buf_2_ce0;
reg    weight_buf_2_we0;
wire   [15:0] weight_buf_2_q0;
wire   [8:0] weight_buf_2_address1;
reg    weight_buf_2_ce1;
wire   [15:0] weight_buf_2_q1;
reg   [8:0] weight_buf_3_address0;
reg    weight_buf_3_ce0;
reg    weight_buf_3_we0;
wire   [15:0] weight_buf_3_q0;
wire   [8:0] weight_buf_3_address1;
reg    weight_buf_3_ce1;
wire   [15:0] weight_buf_3_q1;
reg   [8:0] weight_buf_4_address0;
reg    weight_buf_4_ce0;
reg    weight_buf_4_we0;
wire   [15:0] weight_buf_4_q0;
wire   [8:0] weight_buf_4_address1;
reg    weight_buf_4_ce1;
wire   [15:0] weight_buf_4_q1;
reg   [8:0] weight_buf_5_address0;
reg    weight_buf_5_ce0;
reg    weight_buf_5_we0;
wire   [15:0] weight_buf_5_q0;
wire   [8:0] weight_buf_5_address1;
reg    weight_buf_5_ce1;
wire   [15:0] weight_buf_5_q1;
reg   [8:0] weight_buf_6_address0;
reg    weight_buf_6_ce0;
reg    weight_buf_6_we0;
wire   [15:0] weight_buf_6_q0;
wire   [8:0] weight_buf_6_address1;
reg    weight_buf_6_ce1;
wire   [15:0] weight_buf_6_q1;
reg   [8:0] weight_buf_7_address0;
reg    weight_buf_7_ce0;
reg    weight_buf_7_we0;
wire   [15:0] weight_buf_7_q0;
wire   [8:0] weight_buf_7_address1;
reg    weight_buf_7_ce1;
wire   [15:0] weight_buf_7_q1;
reg    svm_weight_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [50:0] ap_CS_fsm;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond_flatten_fu_456_p2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state47;
reg    w_Data_TDATA_blk_n;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] exitcond3_reg_924;
reg    ap_enable_reg_pp1_iter2;
reg   [0:0] exitcond3_reg_924_pp1_iter1_reg;
reg   [7:0] i2_reg_445;
wire   [11:0] indvar_flatten_next_fu_462_p2;
reg    ap_block_state2;
wire   [7:0] tmp_mid2_v_fu_488_p3;
wire   [4:0] j_1_fu_530_p2;
reg   [15:0] svm_weight_read_reg_699;
reg   [15:0] svm_weight_read_1_reg_704;
reg   [15:0] svm_weight_read_2_reg_709;
reg   [15:0] svm_weight_read_3_reg_714;
reg   [15:0] svm_weight_read_4_reg_719;
reg   [15:0] svm_weight_read_5_reg_724;
reg   [15:0] svm_weight_read_6_reg_729;
reg   [15:0] svm_weight_read_7_reg_734;
reg   [15:0] svm_weight_read_8_reg_739;
reg   [15:0] svm_weight_read_9_reg_744;
reg   [15:0] svm_weight_read_10_reg_749;
reg   [15:0] svm_weight_read_11_reg_754;
reg   [15:0] svm_weight_read_12_reg_759;
reg   [15:0] svm_weight_read_13_reg_764;
reg   [15:0] svm_weight_read_14_reg_769;
reg   [15:0] svm_weight_read_15_reg_774;
reg   [15:0] svm_weight_read_16_reg_779;
reg   [15:0] svm_weight_read_17_reg_784;
reg   [15:0] svm_weight_read_18_reg_789;
reg   [15:0] svm_weight_read_19_reg_794;
reg   [15:0] svm_weight_read_20_reg_799;
reg   [15:0] svm_weight_read_21_reg_804;
reg   [15:0] svm_weight_read_22_reg_809;
reg   [15:0] svm_weight_read_23_reg_814;
reg   [15:0] svm_weight_read_24_reg_819;
reg   [15:0] svm_weight_read_25_reg_824;
reg   [15:0] svm_weight_read_26_reg_829;
reg   [15:0] svm_weight_read_27_reg_834;
reg   [15:0] svm_weight_read_28_reg_839;
reg   [15:0] svm_weight_read_29_reg_844;
reg   [15:0] svm_weight_read_30_reg_849;
reg   [15:0] svm_weight_read_31_reg_854;
reg   [15:0] svm_weight_read_32_reg_859;
reg   [15:0] svm_weight_read_33_reg_864;
reg   [15:0] svm_weight_read_34_reg_869;
reg   [15:0] svm_weight_read_35_reg_874;
reg   [15:0] svm_weight_read_36_reg_879;
reg   [15:0] svm_weight_read_37_reg_884;
reg   [15:0] svm_weight_read_38_reg_889;
reg   [15:0] svm_weight_read_39_reg_894;
reg   [15:0] svm_weight_read_40_reg_899;
reg   [15:0] svm_weight_read_41_reg_904;
reg   [15:0] svm_weight_read_42_reg_909;
reg   [15:0] svm_weight_read_43_reg_914;
wire   [719:0] tmp_1_fu_536_p46;
wire   [0:0] exitcond3_fu_587_p2;
wire    ap_block_state50_pp1_stage0_iter0;
wire    ap_block_state51_pp1_stage0_iter1;
reg    ap_block_state51_io;
wire    ap_block_state52_pp1_stage0_iter2;
reg    ap_block_state52_io;
reg    ap_block_pp1_stage0_11001;
wire   [7:0] i_2_fu_593_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [255:0] tmp_7_fu_641_p17;
wire    ap_CS_fsm_state49;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state50;
reg   [11:0] indvar_flatten_reg_412;
wire    ap_CS_fsm_state1;
reg   [7:0] i_reg_423;
reg   [4:0] j_reg_434;
wire   [63:0] tmp_2_fu_518_p1;
wire   [63:0] tmp_8_fu_607_p1;
wire   [63:0] tmp_s_fu_625_p3;
wire    ap_block_pp1_stage0_01001;
wire   [3:0] arrayNo_cast_fu_496_p4;
wire   [0:0] exitcond_fu_474_p2;
wire   [7:0] i_1_fu_468_p2;
wire   [4:0] j_mid2_fu_480_p3;
wire   [0:0] tmp_3_fu_506_p1;
wire   [8:0] tmp_fu_510_p3;
wire   [8:0] tmp_6_fu_599_p3;
wire   [8:0] tmp_9_fu_619_p2;
reg   [50:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 svm_weight_0_sel_rd = 1'b0;
#0 svm_weight_0_sel_wr = 1'b0;
#0 svm_weight_0_state = 2'd0;
#0 w_Data_1_sel_rd = 1'b0;
#0 w_Data_1_sel_wr = 1'b0;
#0 w_Data_1_state = 2'd0;
#0 Bias_Data_1_data_reg = 720'd0;
#0 Bias_Data_1_vld_reg = 1'b0;
#0 ap_CS_fsm = 51'd1;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
end

Layer4_SVM_Weightbkb #(
    .DataWidth( 16 ),
    .AddressRange( 360 ),
    .AddressWidth( 9 ))
weight_buf_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(weight_buf_0_address0),
    .ce0(weight_buf_0_ce0),
    .we0(weight_buf_0_we0),
    .d0(svm_weight_0_data_out),
    .q0(weight_buf_0_q0),
    .address1(weight_buf_0_address1),
    .ce1(weight_buf_0_ce1),
    .q1(weight_buf_0_q1)
);

Layer4_SVM_Weightbkb #(
    .DataWidth( 16 ),
    .AddressRange( 360 ),
    .AddressWidth( 9 ))
weight_buf_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(weight_buf_1_address0),
    .ce0(weight_buf_1_ce0),
    .we0(weight_buf_1_we0),
    .d0(svm_weight_0_data_out),
    .q0(weight_buf_1_q0),
    .address1(weight_buf_1_address1),
    .ce1(weight_buf_1_ce1),
    .q1(weight_buf_1_q1)
);

Layer4_SVM_Weightbkb #(
    .DataWidth( 16 ),
    .AddressRange( 360 ),
    .AddressWidth( 9 ))
weight_buf_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(weight_buf_2_address0),
    .ce0(weight_buf_2_ce0),
    .we0(weight_buf_2_we0),
    .d0(svm_weight_0_data_out),
    .q0(weight_buf_2_q0),
    .address1(weight_buf_2_address1),
    .ce1(weight_buf_2_ce1),
    .q1(weight_buf_2_q1)
);

Layer4_SVM_Weightbkb #(
    .DataWidth( 16 ),
    .AddressRange( 360 ),
    .AddressWidth( 9 ))
weight_buf_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(weight_buf_3_address0),
    .ce0(weight_buf_3_ce0),
    .we0(weight_buf_3_we0),
    .d0(svm_weight_0_data_out),
    .q0(weight_buf_3_q0),
    .address1(weight_buf_3_address1),
    .ce1(weight_buf_3_ce1),
    .q1(weight_buf_3_q1)
);

Layer4_SVM_Weightbkb #(
    .DataWidth( 16 ),
    .AddressRange( 360 ),
    .AddressWidth( 9 ))
weight_buf_4_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(weight_buf_4_address0),
    .ce0(weight_buf_4_ce0),
    .we0(weight_buf_4_we0),
    .d0(svm_weight_0_data_out),
    .q0(weight_buf_4_q0),
    .address1(weight_buf_4_address1),
    .ce1(weight_buf_4_ce1),
    .q1(weight_buf_4_q1)
);

Layer4_SVM_Weightbkb #(
    .DataWidth( 16 ),
    .AddressRange( 360 ),
    .AddressWidth( 9 ))
weight_buf_5_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(weight_buf_5_address0),
    .ce0(weight_buf_5_ce0),
    .we0(weight_buf_5_we0),
    .d0(svm_weight_0_data_out),
    .q0(weight_buf_5_q0),
    .address1(weight_buf_5_address1),
    .ce1(weight_buf_5_ce1),
    .q1(weight_buf_5_q1)
);

Layer4_SVM_Weightbkb #(
    .DataWidth( 16 ),
    .AddressRange( 360 ),
    .AddressWidth( 9 ))
weight_buf_6_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(weight_buf_6_address0),
    .ce0(weight_buf_6_ce0),
    .we0(weight_buf_6_we0),
    .d0(svm_weight_0_data_out),
    .q0(weight_buf_6_q0),
    .address1(weight_buf_6_address1),
    .ce1(weight_buf_6_ce1),
    .q1(weight_buf_6_q1)
);

Layer4_SVM_Weightbkb #(
    .DataWidth( 16 ),
    .AddressRange( 360 ),
    .AddressWidth( 9 ))
weight_buf_7_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(weight_buf_7_address0),
    .ce0(weight_buf_7_ce0),
    .we0(weight_buf_7_we0),
    .d0(svm_weight_0_data_out),
    .q0(weight_buf_7_q0),
    .address1(weight_buf_7_address1),
    .ce1(weight_buf_7_ce1),
    .q1(weight_buf_7_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state50) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state49)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state50)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state50);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state49)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        svm_weight_0_sel_rd <= 1'b0;
    end else begin
        if (((svm_weight_0_ack_out == 1'b1) & (svm_weight_0_vld_out == 1'b1))) begin
            svm_weight_0_sel_rd <= ~svm_weight_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        svm_weight_0_sel_wr <= 1'b0;
    end else begin
        if (((svm_weight_0_ack_in == 1'b1) & (svm_weight_0_vld_in == 1'b1))) begin
            svm_weight_0_sel_wr <= ~svm_weight_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        svm_weight_0_state <= 2'd0;
    end else begin
        if ((((svm_weight_0_state == 2'd2) & (svm_weight_0_vld_in == 1'b0)) | ((svm_weight_0_state == 2'd3) & (svm_weight_0_vld_in == 1'b0) & (svm_weight_0_ack_out == 1'b1)))) begin
            svm_weight_0_state <= 2'd2;
        end else if ((((svm_weight_0_state == 2'd1) & (svm_weight_0_ack_out == 1'b0)) | ((svm_weight_0_state == 2'd3) & (svm_weight_0_ack_out == 1'b0) & (svm_weight_0_vld_in == 1'b1)))) begin
            svm_weight_0_state <= 2'd1;
        end else if (((~((svm_weight_0_vld_in == 1'b0) & (svm_weight_0_ack_out == 1'b1)) & ~((svm_weight_0_ack_out == 1'b0) & (svm_weight_0_vld_in == 1'b1)) & (svm_weight_0_state == 2'd3)) | ((svm_weight_0_state == 2'd1) & (svm_weight_0_ack_out == 1'b1)) | ((svm_weight_0_state == 2'd2) & (svm_weight_0_vld_in == 1'b1)))) begin
            svm_weight_0_state <= 2'd3;
        end else begin
            svm_weight_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        w_Data_1_sel_rd <= 1'b0;
    end else begin
        if (((w_Data_1_ack_out == 1'b1) & (w_Data_1_vld_out == 1'b1))) begin
            w_Data_1_sel_rd <= ~w_Data_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        w_Data_1_sel_wr <= 1'b0;
    end else begin
        if (((w_Data_1_ack_in == 1'b1) & (w_Data_1_vld_in == 1'b1))) begin
            w_Data_1_sel_wr <= ~w_Data_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        w_Data_1_state <= 2'd0;
    end else begin
        if ((((w_Data_1_state == 2'd2) & (w_Data_1_vld_in == 1'b0)) | ((w_Data_1_state == 2'd3) & (w_Data_1_vld_in == 1'b0) & (w_Data_1_ack_out == 1'b1)))) begin
            w_Data_1_state <= 2'd2;
        end else if ((((w_Data_1_state == 2'd1) & (w_Data_1_ack_out == 1'b0)) | ((w_Data_1_state == 2'd3) & (w_Data_1_ack_out == 1'b0) & (w_Data_1_vld_in == 1'b1)))) begin
            w_Data_1_state <= 2'd1;
        end else if (((~((w_Data_1_vld_in == 1'b0) & (w_Data_1_ack_out == 1'b1)) & ~((w_Data_1_ack_out == 1'b0) & (w_Data_1_vld_in == 1'b1)) & (w_Data_1_state == 2'd3)) | ((w_Data_1_state == 2'd1) & (w_Data_1_ack_out == 1'b1)) | ((w_Data_1_state == 2'd2) & (w_Data_1_vld_in == 1'b1)))) begin
            w_Data_1_state <= 2'd3;
        end else begin
            w_Data_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_587_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i2_reg_445 <= i_2_fu_593_p2;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        i2_reg_445 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((exitcond_flatten_fu_456_p2 == 1'd0) & (svm_weight_0_vld_out == 1'b0)) & (exitcond_flatten_fu_456_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_423 <= tmp_mid2_v_fu_488_p3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        i_reg_423 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((exitcond_flatten_fu_456_p2 == 1'd0) & (svm_weight_0_vld_out == 1'b0)) & (exitcond_flatten_fu_456_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten_reg_412 <= indvar_flatten_next_fu_462_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        indvar_flatten_reg_412 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((exitcond_flatten_fu_456_p2 == 1'd0) & (svm_weight_0_vld_out == 1'b0)) & (exitcond_flatten_fu_456_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_434 <= j_1_fu_530_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        j_reg_434 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == Bias_Data_1_vld_reg) & (1'b1 == Bias_Data_1_vld_in)) | ((1'b1 == 1'b1) & (1'b1 == Bias_Data_1_vld_in) & (1'b1 == Bias_Data_1_vld_reg)))) begin
        Bias_Data_1_data_reg <= tmp_1_fu_536_p46;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        exitcond3_reg_924 <= exitcond3_fu_587_p2;
        exitcond3_reg_924_pp1_iter1_reg <= exitcond3_reg_924;
    end
end

always @ (posedge ap_clk) begin
    if ((svm_weight_0_load_A == 1'b1)) begin
        svm_weight_0_payload_A <= svm_weight_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((svm_weight_0_load_B == 1'b1)) begin
        svm_weight_0_payload_B <= svm_weight_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
        svm_weight_read_10_reg_749 <= svm_weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
        svm_weight_read_11_reg_754 <= svm_weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
        svm_weight_read_12_reg_759 <= svm_weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
        svm_weight_read_13_reg_764 <= svm_weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        svm_weight_read_14_reg_769 <= svm_weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
        svm_weight_read_15_reg_774 <= svm_weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
        svm_weight_read_16_reg_779 <= svm_weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
        svm_weight_read_17_reg_784 <= svm_weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
        svm_weight_read_18_reg_789 <= svm_weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        svm_weight_read_19_reg_794 <= svm_weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        svm_weight_read_1_reg_704 <= svm_weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
        svm_weight_read_20_reg_799 <= svm_weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
        svm_weight_read_21_reg_804 <= svm_weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
        svm_weight_read_22_reg_809 <= svm_weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state26))) begin
        svm_weight_read_23_reg_814 <= svm_weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
        svm_weight_read_24_reg_819 <= svm_weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state28))) begin
        svm_weight_read_25_reg_824 <= svm_weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
        svm_weight_read_26_reg_829 <= svm_weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state30))) begin
        svm_weight_read_27_reg_834 <= svm_weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state31))) begin
        svm_weight_read_28_reg_839 <= svm_weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state32))) begin
        svm_weight_read_29_reg_844 <= svm_weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        svm_weight_read_2_reg_709 <= svm_weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state33))) begin
        svm_weight_read_30_reg_849 <= svm_weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state34))) begin
        svm_weight_read_31_reg_854 <= svm_weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state35))) begin
        svm_weight_read_32_reg_859 <= svm_weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state36))) begin
        svm_weight_read_33_reg_864 <= svm_weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state37))) begin
        svm_weight_read_34_reg_869 <= svm_weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state38))) begin
        svm_weight_read_35_reg_874 <= svm_weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state39))) begin
        svm_weight_read_36_reg_879 <= svm_weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state40))) begin
        svm_weight_read_37_reg_884 <= svm_weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state41))) begin
        svm_weight_read_38_reg_889 <= svm_weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state42))) begin
        svm_weight_read_39_reg_894 <= svm_weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        svm_weight_read_3_reg_714 <= svm_weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state43))) begin
        svm_weight_read_40_reg_899 <= svm_weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state44))) begin
        svm_weight_read_41_reg_904 <= svm_weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state45))) begin
        svm_weight_read_42_reg_909 <= svm_weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state46))) begin
        svm_weight_read_43_reg_914 <= svm_weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        svm_weight_read_4_reg_719 <= svm_weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        svm_weight_read_5_reg_724 <= svm_weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        svm_weight_read_6_reg_729 <= svm_weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        svm_weight_read_7_reg_734 <= svm_weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        svm_weight_read_8_reg_739 <= svm_weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        svm_weight_read_9_reg_744 <= svm_weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        svm_weight_read_reg_699 <= svm_weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((w_Data_1_load_A == 1'b1)) begin
        w_Data_1_payload_A <= tmp_7_fu_641_p17;
    end
end

always @ (posedge ap_clk) begin
    if ((w_Data_1_load_B == 1'b1)) begin
        w_Data_1_payload_B <= tmp_7_fu_641_p17;
    end
end

always @ (*) begin
    if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state47))) begin
        Bias_Data_1_vld_in = 1'b1;
    end else begin
        Bias_Data_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond3_fu_587_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state50 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state50 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if ((((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state47)) | ((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state46)) | ((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state45)) | ((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state44)) | ((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state43)) | ((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state42)) | ((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state41)) | ((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state40)) | ((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state39)) | ((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state38)) | ((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state37)) | ((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state36)) | ((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state35)) | ((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state34)) | ((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state33)) | ((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state32)) | ((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state31)) | ((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state30)) | ((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state29)) | ((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state28)) | ((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state27)) | ((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state26)) | ((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state25)) | ((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state24)) | ((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state23)) | ((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state22)) | ((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state21)) | ((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state20)) | ((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state19)) | ((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state18)) | ((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state17)) | ((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | ((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state15)) | ((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state14)) | ((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state13)) | ((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state12)) | ((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state11)) | ((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state10)) | ((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state7)) | ((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state5)) | ((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | (~((exitcond_flatten_fu_456_p2 == 1'd0) & (svm_weight_0_vld_out == 1'b0)) & (exitcond_flatten_fu_456_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        svm_weight_0_ack_out = 1'b1;
    end else begin
        svm_weight_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((svm_weight_0_sel == 1'b1)) begin
        svm_weight_0_data_out = svm_weight_0_payload_B;
    end else begin
        svm_weight_0_data_out = svm_weight_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((exitcond_flatten_fu_456_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        svm_weight_TDATA_blk_n = svm_weight_0_state[1'd0];
    end else begin
        svm_weight_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((w_Data_1_sel == 1'b1)) begin
        w_Data_1_data_out = w_Data_1_payload_B;
    end else begin
        w_Data_1_data_out = w_Data_1_payload_A;
    end
end

always @ (*) begin
    if (((exitcond3_reg_924 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        w_Data_1_vld_in = 1'b1;
    end else begin
        w_Data_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond3_reg_924_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((exitcond3_reg_924 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        w_Data_TDATA_blk_n = w_Data_1_state[1'd1];
    end else begin
        w_Data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        weight_buf_0_address0 = tmp_8_fu_607_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        weight_buf_0_address0 = tmp_2_fu_518_p1;
    end else begin
        weight_buf_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | (~((exitcond_flatten_fu_456_p2 == 1'd0) & (svm_weight_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        weight_buf_0_ce0 = 1'b1;
    end else begin
        weight_buf_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        weight_buf_0_ce1 = 1'b1;
    end else begin
        weight_buf_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_flatten_fu_456_p2 == 1'd0) & (svm_weight_0_vld_out == 1'b0)) & (arrayNo_cast_fu_496_p4 == 4'd0) & (exitcond_flatten_fu_456_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        weight_buf_0_we0 = 1'b1;
    end else begin
        weight_buf_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        weight_buf_1_address0 = tmp_8_fu_607_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        weight_buf_1_address0 = tmp_2_fu_518_p1;
    end else begin
        weight_buf_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | (~((exitcond_flatten_fu_456_p2 == 1'd0) & (svm_weight_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        weight_buf_1_ce0 = 1'b1;
    end else begin
        weight_buf_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        weight_buf_1_ce1 = 1'b1;
    end else begin
        weight_buf_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_flatten_fu_456_p2 == 1'd0) & (svm_weight_0_vld_out == 1'b0)) & (arrayNo_cast_fu_496_p4 == 4'd1) & (exitcond_flatten_fu_456_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        weight_buf_1_we0 = 1'b1;
    end else begin
        weight_buf_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        weight_buf_2_address0 = tmp_8_fu_607_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        weight_buf_2_address0 = tmp_2_fu_518_p1;
    end else begin
        weight_buf_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | (~((exitcond_flatten_fu_456_p2 == 1'd0) & (svm_weight_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        weight_buf_2_ce0 = 1'b1;
    end else begin
        weight_buf_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        weight_buf_2_ce1 = 1'b1;
    end else begin
        weight_buf_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_flatten_fu_456_p2 == 1'd0) & (svm_weight_0_vld_out == 1'b0)) & (arrayNo_cast_fu_496_p4 == 4'd2) & (exitcond_flatten_fu_456_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        weight_buf_2_we0 = 1'b1;
    end else begin
        weight_buf_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        weight_buf_3_address0 = tmp_8_fu_607_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        weight_buf_3_address0 = tmp_2_fu_518_p1;
    end else begin
        weight_buf_3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | (~((exitcond_flatten_fu_456_p2 == 1'd0) & (svm_weight_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        weight_buf_3_ce0 = 1'b1;
    end else begin
        weight_buf_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        weight_buf_3_ce1 = 1'b1;
    end else begin
        weight_buf_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_flatten_fu_456_p2 == 1'd0) & (svm_weight_0_vld_out == 1'b0)) & (arrayNo_cast_fu_496_p4 == 4'd3) & (exitcond_flatten_fu_456_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        weight_buf_3_we0 = 1'b1;
    end else begin
        weight_buf_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        weight_buf_4_address0 = tmp_8_fu_607_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        weight_buf_4_address0 = tmp_2_fu_518_p1;
    end else begin
        weight_buf_4_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | (~((exitcond_flatten_fu_456_p2 == 1'd0) & (svm_weight_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        weight_buf_4_ce0 = 1'b1;
    end else begin
        weight_buf_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        weight_buf_4_ce1 = 1'b1;
    end else begin
        weight_buf_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_flatten_fu_456_p2 == 1'd0) & (svm_weight_0_vld_out == 1'b0)) & (arrayNo_cast_fu_496_p4 == 4'd4) & (exitcond_flatten_fu_456_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        weight_buf_4_we0 = 1'b1;
    end else begin
        weight_buf_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        weight_buf_5_address0 = tmp_8_fu_607_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        weight_buf_5_address0 = tmp_2_fu_518_p1;
    end else begin
        weight_buf_5_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | (~((exitcond_flatten_fu_456_p2 == 1'd0) & (svm_weight_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        weight_buf_5_ce0 = 1'b1;
    end else begin
        weight_buf_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        weight_buf_5_ce1 = 1'b1;
    end else begin
        weight_buf_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_flatten_fu_456_p2 == 1'd0) & (svm_weight_0_vld_out == 1'b0)) & (arrayNo_cast_fu_496_p4 == 4'd5) & (exitcond_flatten_fu_456_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        weight_buf_5_we0 = 1'b1;
    end else begin
        weight_buf_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        weight_buf_6_address0 = tmp_8_fu_607_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        weight_buf_6_address0 = tmp_2_fu_518_p1;
    end else begin
        weight_buf_6_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | (~((exitcond_flatten_fu_456_p2 == 1'd0) & (svm_weight_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        weight_buf_6_ce0 = 1'b1;
    end else begin
        weight_buf_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        weight_buf_6_ce1 = 1'b1;
    end else begin
        weight_buf_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_flatten_fu_456_p2 == 1'd0) & (svm_weight_0_vld_out == 1'b0)) & (arrayNo_cast_fu_496_p4 == 4'd6) & (exitcond_flatten_fu_456_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        weight_buf_6_we0 = 1'b1;
    end else begin
        weight_buf_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        weight_buf_7_address0 = tmp_8_fu_607_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        weight_buf_7_address0 = tmp_2_fu_518_p1;
    end else begin
        weight_buf_7_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | (~((exitcond_flatten_fu_456_p2 == 1'd0) & (svm_weight_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        weight_buf_7_ce0 = 1'b1;
    end else begin
        weight_buf_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        weight_buf_7_ce1 = 1'b1;
    end else begin
        weight_buf_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((~(arrayNo_cast_fu_496_p4 == 4'd0) & ~(arrayNo_cast_fu_496_p4 == 4'd1) & ~(arrayNo_cast_fu_496_p4 == 4'd2) & ~(arrayNo_cast_fu_496_p4 == 4'd3) & ~(arrayNo_cast_fu_496_p4 == 4'd4) & ~(arrayNo_cast_fu_496_p4 == 4'd5) & ~(arrayNo_cast_fu_496_p4 == 4'd6) & ~((exitcond_flatten_fu_456_p2 == 1'd0) & (svm_weight_0_vld_out == 1'b0)) & (exitcond_flatten_fu_456_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        weight_buf_7_we0 = 1'b1;
    end else begin
        weight_buf_7_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if ((~((exitcond_flatten_fu_456_p2 == 1'd0) & (svm_weight_0_vld_out == 1'b0)) & (exitcond_flatten_fu_456_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((exitcond_flatten_fu_456_p2 == 1'd0) & (svm_weight_0_vld_out == 1'b0)) & (exitcond_flatten_fu_456_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state28))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state29 : begin
            if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state31 : begin
            if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state31))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state32 : begin
            if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state32))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state33 : begin
            if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state34 : begin
            if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state34))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state35 : begin
            if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state35))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state36 : begin
            if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state36))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_state37 : begin
            if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state37))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        ap_ST_fsm_state38 : begin
            if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state38))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_state39 : begin
            if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state39))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end
        end
        ap_ST_fsm_state40 : begin
            if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state40))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end
        end
        ap_ST_fsm_state41 : begin
            if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state41))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state42 : begin
            if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state42))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        ap_ST_fsm_state43 : begin
            if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state43))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_state44 : begin
            if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state44))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state45 : begin
            if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state45))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        ap_ST_fsm_state46 : begin
            if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state46))) begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        ap_ST_fsm_state47 : begin
            if (((svm_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state47))) begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((exitcond3_fu_587_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((exitcond3_fu_587_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Bias_Data = Bias_Data_1_data_reg;

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((1'b1 == ap_block_state52_io) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b1 == ap_block_state51_io) & (ap_enable_reg_pp1_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((1'b1 == ap_block_state52_io) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b1 == ap_block_state51_io) & (ap_enable_reg_pp1_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state2 = ((exitcond_flatten_fu_456_p2 == 1'd0) & (svm_weight_0_vld_out == 1'b0));
end

assign ap_block_state50_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state51_io = ((exitcond3_reg_924 == 1'd0) & (w_Data_1_ack_in == 1'b0));
end

assign ap_block_state51_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state52_io = ((exitcond3_reg_924_pp1_iter1_reg == 1'd0) & (w_Data_1_ack_in == 1'b0));
end

assign ap_block_state52_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign arrayNo_cast_fu_496_p4 = {{j_mid2_fu_480_p3[4:1]}};

assign exitcond3_fu_587_p2 = ((i2_reg_445 == 8'd180) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_456_p2 = ((indvar_flatten_reg_412 == 12'd2880) ? 1'b1 : 1'b0);

assign exitcond_fu_474_p2 = ((j_reg_434 == 5'd16) ? 1'b1 : 1'b0);

assign i_1_fu_468_p2 = (8'd1 + i_reg_423);

assign i_2_fu_593_p2 = (i2_reg_445 + 8'd1);

assign indvar_flatten_next_fu_462_p2 = (indvar_flatten_reg_412 + 12'd1);

assign j_1_fu_530_p2 = (j_mid2_fu_480_p3 + 5'd1);

assign j_mid2_fu_480_p3 = ((exitcond_fu_474_p2[0:0] === 1'b1) ? 5'd0 : j_reg_434);

assign svm_weight_0_ack_in = svm_weight_0_state[1'd1];

assign svm_weight_0_load_A = (svm_weight_0_state_cmp_full & ~svm_weight_0_sel_wr);

assign svm_weight_0_load_B = (svm_weight_0_state_cmp_full & svm_weight_0_sel_wr);

assign svm_weight_0_sel = svm_weight_0_sel_rd;

assign svm_weight_0_state_cmp_full = ((svm_weight_0_state != 2'd1) ? 1'b1 : 1'b0);

assign svm_weight_0_vld_in = svm_weight_TVALID;

assign svm_weight_0_vld_out = svm_weight_0_state[1'd0];

assign svm_weight_TREADY = svm_weight_0_state[1'd1];

assign tmp_1_fu_536_p46 = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{svm_weight_0_data_out}, {svm_weight_read_43_reg_914}}, {svm_weight_read_42_reg_909}}, {svm_weight_read_41_reg_904}}, {svm_weight_read_40_reg_899}}, {svm_weight_read_39_reg_894}}, {svm_weight_read_38_reg_889}}, {svm_weight_read_37_reg_884}}, {svm_weight_read_36_reg_879}}, {svm_weight_read_35_reg_874}}, {svm_weight_read_34_reg_869}}, {svm_weight_read_33_reg_864}}, {svm_weight_read_32_reg_859}}, {svm_weight_read_31_reg_854}}, {svm_weight_read_30_reg_849}}, {svm_weight_read_29_reg_844}}, {svm_weight_read_28_reg_839}}, {svm_weight_read_27_reg_834}}, {svm_weight_read_26_reg_829}}, {svm_weight_read_25_reg_824}}, {svm_weight_read_24_reg_819}}, {svm_weight_read_23_reg_814}}, {svm_weight_read_22_reg_809}}, {svm_weight_read_21_reg_804}}, {svm_weight_read_20_reg_799}}, {svm_weight_read_19_reg_794}}, {svm_weight_read_18_reg_789}}, {svm_weight_read_17_reg_784}}, {svm_weight_read_16_reg_779}}, {svm_weight_read_15_reg_774}}, {svm_weight_read_14_reg_769}}, {svm_weight_read_13_reg_764}}, {svm_weight_read_12_reg_759}}, {svm_weight_read_11_reg_754}}, {svm_weight_read_10_reg_749}}, {svm_weight_read_9_reg_744}}, {svm_weight_read_8_reg_739}}, {svm_weight_read_7_reg_734}}, {svm_weight_read_6_reg_729}}, {svm_weight_read_5_reg_724}}, {svm_weight_read_4_reg_719}}, {svm_weight_read_3_reg_714}}, {svm_weight_read_2_reg_709}}, {svm_weight_read_1_reg_704}}, {svm_weight_read_reg_699}};

assign tmp_2_fu_518_p1 = tmp_fu_510_p3;

assign tmp_3_fu_506_p1 = j_mid2_fu_480_p3[0:0];

assign tmp_6_fu_599_p3 = {{i2_reg_445}, {1'd0}};

assign tmp_7_fu_641_p17 = {{{{{{{{{{{{{{{{weight_buf_7_q1}, {weight_buf_7_q0}}, {weight_buf_6_q1}}, {weight_buf_6_q0}}, {weight_buf_5_q1}}, {weight_buf_5_q0}}, {weight_buf_4_q1}}, {weight_buf_4_q0}}, {weight_buf_3_q1}}, {weight_buf_3_q0}}, {weight_buf_2_q1}}, {weight_buf_2_q0}}, {weight_buf_1_q1}}, {weight_buf_1_q0}}, {weight_buf_0_q1}}, {weight_buf_0_q0}};

assign tmp_8_fu_607_p1 = tmp_6_fu_599_p3;

assign tmp_9_fu_619_p2 = (tmp_6_fu_599_p3 | 9'd1);

assign tmp_fu_510_p3 = {{tmp_mid2_v_fu_488_p3}, {tmp_3_fu_506_p1}};

assign tmp_mid2_v_fu_488_p3 = ((exitcond_fu_474_p2[0:0] === 1'b1) ? i_1_fu_468_p2 : i_reg_423);

assign tmp_s_fu_625_p3 = {{55'd0}, {tmp_9_fu_619_p2}};

assign w_Data_1_ack_in = w_Data_1_state[1'd1];

assign w_Data_1_ack_out = w_Data_TREADY;

assign w_Data_1_load_A = (w_Data_1_state_cmp_full & ~w_Data_1_sel_wr);

assign w_Data_1_load_B = (w_Data_1_state_cmp_full & w_Data_1_sel_wr);

assign w_Data_1_sel = w_Data_1_sel_rd;

assign w_Data_1_state_cmp_full = ((w_Data_1_state != 2'd1) ? 1'b1 : 1'b0);

assign w_Data_1_vld_out = w_Data_1_state[1'd0];

assign w_Data_TDATA = w_Data_1_data_out;

assign w_Data_TVALID = w_Data_1_state[1'd0];

assign weight_buf_0_address1 = tmp_s_fu_625_p3;

assign weight_buf_1_address1 = tmp_s_fu_625_p3;

assign weight_buf_2_address1 = tmp_s_fu_625_p3;

assign weight_buf_3_address1 = tmp_s_fu_625_p3;

assign weight_buf_4_address1 = tmp_s_fu_625_p3;

assign weight_buf_5_address1 = tmp_s_fu_625_p3;

assign weight_buf_6_address1 = tmp_s_fu_625_p3;

assign weight_buf_7_address1 = tmp_s_fu_625_p3;

endmodule //Layer4_SVM_Weight
