// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Kernel_DMA,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xazu3eg-sfvc784-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.357000,HLS_SYN_LAT=4441,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=263,HLS_SYN_LUT=829,HLS_VERSION=2018_3}" *)

module Kernel_DMA (
        ap_clk,
        ap_rst_n,
        weight_TDATA,
        weight_TVALID,
        weight_TREADY,
        L1_weight_TDATA,
        L1_weight_TVALID,
        L1_weight_TREADY,
        L2_weight_TDATA,
        L2_weight_TVALID,
        L2_weight_TREADY,
        L3_weight_TDATA,
        L3_weight_TVALID,
        L3_weight_TREADY,
        L4_weight_TDATA,
        L4_weight_TVALID,
        L4_weight_TREADY
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_pp0_stage0 = 9'd2;
parameter    ap_ST_fsm_state5 = 9'd4;
parameter    ap_ST_fsm_pp1_stage0 = 9'd8;
parameter    ap_ST_fsm_state9 = 9'd16;
parameter    ap_ST_fsm_pp2_stage0 = 9'd32;
parameter    ap_ST_fsm_state13 = 9'd64;
parameter    ap_ST_fsm_pp3_stage0 = 9'd128;
parameter    ap_ST_fsm_state17 = 9'd256;

input   ap_clk;
input   ap_rst_n;
input  [15:0] weight_TDATA;
input   weight_TVALID;
output   weight_TREADY;
output  [15:0] L1_weight_TDATA;
output   L1_weight_TVALID;
input   L1_weight_TREADY;
output  [15:0] L2_weight_TDATA;
output   L2_weight_TVALID;
input   L2_weight_TREADY;
output  [15:0] L3_weight_TDATA;
output   L3_weight_TVALID;
input   L3_weight_TREADY;
output  [15:0] L4_weight_TDATA;
output   L4_weight_TVALID;
input   L4_weight_TREADY;

 reg    ap_rst_n_inv;
reg   [15:0] weight_0_data_out;
wire    weight_0_vld_in;
wire    weight_0_vld_out;
wire    weight_0_ack_in;
reg    weight_0_ack_out;
reg   [15:0] weight_0_payload_A;
reg   [15:0] weight_0_payload_B;
reg    weight_0_sel_rd;
reg    weight_0_sel_wr;
wire    weight_0_sel;
wire    weight_0_load_A;
wire    weight_0_load_B;
reg   [1:0] weight_0_state;
wire    weight_0_state_cmp_full;
reg   [15:0] L1_weight_1_data_out;
reg    L1_weight_1_vld_in;
wire    L1_weight_1_vld_out;
wire    L1_weight_1_ack_in;
wire    L1_weight_1_ack_out;
reg   [15:0] L1_weight_1_payload_A;
reg   [15:0] L1_weight_1_payload_B;
reg    L1_weight_1_sel_rd;
reg    L1_weight_1_sel_wr;
wire    L1_weight_1_sel;
wire    L1_weight_1_load_A;
wire    L1_weight_1_load_B;
reg   [1:0] L1_weight_1_state;
wire    L1_weight_1_state_cmp_full;
reg   [15:0] L2_weight_1_data_out;
reg    L2_weight_1_vld_in;
wire    L2_weight_1_vld_out;
wire    L2_weight_1_ack_in;
wire    L2_weight_1_ack_out;
reg   [15:0] L2_weight_1_payload_A;
reg   [15:0] L2_weight_1_payload_B;
reg    L2_weight_1_sel_rd;
reg    L2_weight_1_sel_wr;
wire    L2_weight_1_sel;
wire    L2_weight_1_load_A;
wire    L2_weight_1_load_B;
reg   [1:0] L2_weight_1_state;
wire    L2_weight_1_state_cmp_full;
reg   [15:0] L3_weight_1_data_out;
reg    L3_weight_1_vld_in;
wire    L3_weight_1_vld_out;
wire    L3_weight_1_ack_in;
wire    L3_weight_1_ack_out;
reg   [15:0] L3_weight_1_payload_A;
reg   [15:0] L3_weight_1_payload_B;
reg    L3_weight_1_sel_rd;
reg    L3_weight_1_sel_wr;
wire    L3_weight_1_sel;
wire    L3_weight_1_load_A;
wire    L3_weight_1_load_B;
reg   [1:0] L3_weight_1_state;
wire    L3_weight_1_state_cmp_full;
reg   [15:0] L4_weight_1_data_out;
reg    L4_weight_1_vld_in;
wire    L4_weight_1_vld_out;
wire    L4_weight_1_ack_in;
wire    L4_weight_1_ack_out;
reg   [15:0] L4_weight_1_payload_A;
reg   [15:0] L4_weight_1_payload_B;
reg    L4_weight_1_sel_rd;
reg    L4_weight_1_sel_wr;
wire    L4_weight_1_sel;
wire    L4_weight_1_load_A;
wire    L4_weight_1_load_B;
reg   [1:0] L4_weight_1_state;
wire    L4_weight_1_state_cmp_full;
reg    weight_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] exitcond_fu_170_p2;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_pp1_stage0;
wire   [0:0] exitcond9_fu_182_p2;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_pp2_stage0;
wire   [0:0] exitcond7_fu_194_p2;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter0;
wire    ap_block_pp3_stage0;
wire   [0:0] exitcond5_fu_206_p2;
reg    L1_weight_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] exitcond_reg_218;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] exitcond_reg_218_pp0_iter1_reg;
reg    L2_weight_TDATA_blk_n;
reg    ap_enable_reg_pp1_iter1;
reg   [0:0] exitcond9_reg_227;
reg    ap_enable_reg_pp1_iter2;
reg   [0:0] exitcond9_reg_227_pp1_iter1_reg;
reg    L3_weight_TDATA_blk_n;
reg    ap_enable_reg_pp2_iter1;
reg   [0:0] exitcond7_reg_236;
reg    ap_enable_reg_pp2_iter2;
reg   [0:0] exitcond7_reg_236_pp2_iter1_reg;
reg    L4_weight_TDATA_blk_n;
reg    ap_enable_reg_pp3_iter1;
reg   [0:0] exitcond5_reg_245;
reg    ap_enable_reg_pp3_iter2;
reg   [0:0] exitcond5_reg_245_pp3_iter1_reg;
reg   [5:0] p_01_rec_reg_118;
reg   [8:0] p_02_rec_reg_129;
reg   [10:0] p_03_rec_reg_140;
reg   [11:0] p_04_rec_reg_151;
reg   [15:0] reg_162;
reg    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state3_io;
wire    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_state4_io;
reg    ap_block_pp0_stage0_11001;
reg    ap_block_state6_pp1_stage0_iter0;
wire    ap_block_state7_pp1_stage0_iter1;
reg    ap_block_state7_io;
wire    ap_block_state8_pp1_stage0_iter2;
reg    ap_block_state8_io;
reg    ap_block_pp1_stage0_11001;
reg    ap_block_state10_pp2_stage0_iter0;
wire    ap_block_state11_pp2_stage0_iter1;
reg    ap_block_state11_io;
wire    ap_block_state12_pp2_stage0_iter2;
reg    ap_block_state12_io;
reg    ap_block_pp2_stage0_11001;
reg    ap_block_state14_pp3_stage0_iter0;
wire    ap_block_state15_pp3_stage0_iter1;
reg    ap_block_state15_io;
wire    ap_block_state16_pp3_stage0_iter2;
reg    ap_block_state16_io;
reg    ap_block_pp3_stage0_11001;
wire   [5:0] p_rec1_fu_176_p2;
wire   [8:0] p_rec2_fu_188_p2;
wire   [10:0] p_rec6_fu_200_p2;
wire   [11:0] p_rec_fu_212_p2;
wire    ap_CS_fsm_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_CS_fsm_state5;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state6;
wire    ap_CS_fsm_state9;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state10;
wire    ap_CS_fsm_state13;
reg    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state14;
reg    ap_block_pp0_stage0_01001;
reg    ap_block_pp1_stage0_01001;
reg    ap_block_pp2_stage0_01001;
reg    ap_block_pp3_stage0_01001;
reg   [8:0] ap_NS_fsm;
wire    ap_CS_fsm_state17;
reg    ap_block_state17;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;

// power-on initialization
initial begin
#0 weight_0_sel_rd = 1'b0;
#0 weight_0_sel_wr = 1'b0;
#0 weight_0_state = 2'd0;
#0 L1_weight_1_sel_rd = 1'b0;
#0 L1_weight_1_sel_wr = 1'b0;
#0 L1_weight_1_state = 2'd0;
#0 L2_weight_1_sel_rd = 1'b0;
#0 L2_weight_1_sel_wr = 1'b0;
#0 L2_weight_1_state = 2'd0;
#0 L3_weight_1_sel_rd = 1'b0;
#0 L3_weight_1_sel_wr = 1'b0;
#0 L3_weight_1_state = 2'd0;
#0 L4_weight_1_sel_rd = 1'b0;
#0 L4_weight_1_sel_wr = 1'b0;
#0 L4_weight_1_state = 2'd0;
#0 ap_CS_fsm = 9'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        L1_weight_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == L1_weight_1_ack_out) & (1'b1 == L1_weight_1_vld_out))) begin
            L1_weight_1_sel_rd <= ~L1_weight_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        L1_weight_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == L1_weight_1_ack_in) & (1'b1 == L1_weight_1_vld_in))) begin
            L1_weight_1_sel_wr <= ~L1_weight_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        L1_weight_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == L1_weight_1_state) & (1'b0 == L1_weight_1_vld_in)) | ((2'd3 == L1_weight_1_state) & (1'b0 == L1_weight_1_vld_in) & (1'b1 == L1_weight_1_ack_out)))) begin
            L1_weight_1_state <= 2'd2;
        end else if ((((2'd1 == L1_weight_1_state) & (1'b0 == L1_weight_1_ack_out)) | ((2'd3 == L1_weight_1_state) & (1'b0 == L1_weight_1_ack_out) & (1'b1 == L1_weight_1_vld_in)))) begin
            L1_weight_1_state <= 2'd1;
        end else if (((~((1'b0 == L1_weight_1_vld_in) & (1'b1 == L1_weight_1_ack_out)) & ~((1'b0 == L1_weight_1_ack_out) & (1'b1 == L1_weight_1_vld_in)) & (2'd3 == L1_weight_1_state)) | ((2'd1 == L1_weight_1_state) & (1'b1 == L1_weight_1_ack_out)) | ((2'd2 == L1_weight_1_state) & (1'b1 == L1_weight_1_vld_in)))) begin
            L1_weight_1_state <= 2'd3;
        end else begin
            L1_weight_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        L2_weight_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == L2_weight_1_ack_out) & (1'b1 == L2_weight_1_vld_out))) begin
            L2_weight_1_sel_rd <= ~L2_weight_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        L2_weight_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == L2_weight_1_ack_in) & (1'b1 == L2_weight_1_vld_in))) begin
            L2_weight_1_sel_wr <= ~L2_weight_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        L2_weight_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == L2_weight_1_state) & (1'b0 == L2_weight_1_vld_in)) | ((2'd3 == L2_weight_1_state) & (1'b0 == L2_weight_1_vld_in) & (1'b1 == L2_weight_1_ack_out)))) begin
            L2_weight_1_state <= 2'd2;
        end else if ((((2'd1 == L2_weight_1_state) & (1'b0 == L2_weight_1_ack_out)) | ((2'd3 == L2_weight_1_state) & (1'b0 == L2_weight_1_ack_out) & (1'b1 == L2_weight_1_vld_in)))) begin
            L2_weight_1_state <= 2'd1;
        end else if (((~((1'b0 == L2_weight_1_vld_in) & (1'b1 == L2_weight_1_ack_out)) & ~((1'b0 == L2_weight_1_ack_out) & (1'b1 == L2_weight_1_vld_in)) & (2'd3 == L2_weight_1_state)) | ((2'd1 == L2_weight_1_state) & (1'b1 == L2_weight_1_ack_out)) | ((2'd2 == L2_weight_1_state) & (1'b1 == L2_weight_1_vld_in)))) begin
            L2_weight_1_state <= 2'd3;
        end else begin
            L2_weight_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        L3_weight_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == L3_weight_1_ack_out) & (1'b1 == L3_weight_1_vld_out))) begin
            L3_weight_1_sel_rd <= ~L3_weight_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        L3_weight_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == L3_weight_1_ack_in) & (1'b1 == L3_weight_1_vld_in))) begin
            L3_weight_1_sel_wr <= ~L3_weight_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        L3_weight_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == L3_weight_1_state) & (1'b0 == L3_weight_1_vld_in)) | ((2'd3 == L3_weight_1_state) & (1'b0 == L3_weight_1_vld_in) & (1'b1 == L3_weight_1_ack_out)))) begin
            L3_weight_1_state <= 2'd2;
        end else if ((((2'd1 == L3_weight_1_state) & (1'b0 == L3_weight_1_ack_out)) | ((2'd3 == L3_weight_1_state) & (1'b0 == L3_weight_1_ack_out) & (1'b1 == L3_weight_1_vld_in)))) begin
            L3_weight_1_state <= 2'd1;
        end else if (((~((1'b0 == L3_weight_1_vld_in) & (1'b1 == L3_weight_1_ack_out)) & ~((1'b0 == L3_weight_1_ack_out) & (1'b1 == L3_weight_1_vld_in)) & (2'd3 == L3_weight_1_state)) | ((2'd1 == L3_weight_1_state) & (1'b1 == L3_weight_1_ack_out)) | ((2'd2 == L3_weight_1_state) & (1'b1 == L3_weight_1_vld_in)))) begin
            L3_weight_1_state <= 2'd3;
        end else begin
            L3_weight_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        L4_weight_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == L4_weight_1_ack_out) & (1'b1 == L4_weight_1_vld_out))) begin
            L4_weight_1_sel_rd <= ~L4_weight_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        L4_weight_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == L4_weight_1_ack_in) & (1'b1 == L4_weight_1_vld_in))) begin
            L4_weight_1_sel_wr <= ~L4_weight_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        L4_weight_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == L4_weight_1_state) & (1'b0 == L4_weight_1_vld_in)) | ((2'd3 == L4_weight_1_state) & (1'b0 == L4_weight_1_vld_in) & (1'b1 == L4_weight_1_ack_out)))) begin
            L4_weight_1_state <= 2'd2;
        end else if ((((2'd1 == L4_weight_1_state) & (1'b0 == L4_weight_1_ack_out)) | ((2'd3 == L4_weight_1_state) & (1'b0 == L4_weight_1_ack_out) & (1'b1 == L4_weight_1_vld_in)))) begin
            L4_weight_1_state <= 2'd1;
        end else if (((~((1'b0 == L4_weight_1_vld_in) & (1'b1 == L4_weight_1_ack_out)) & ~((1'b0 == L4_weight_1_ack_out) & (1'b1 == L4_weight_1_vld_in)) & (2'd3 == L4_weight_1_state)) | ((2'd1 == L4_weight_1_state) & (1'b1 == L4_weight_1_ack_out)) | ((2'd2 == L4_weight_1_state) & (1'b1 == L4_weight_1_vld_in)))) begin
            L4_weight_1_state <= 2'd3;
        end else begin
            L4_weight_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state1)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state1)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state6) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state6)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state6);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state10) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state10)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state10);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state14) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state13)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state14)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state14);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end else if ((1'b1 == ap_CS_fsm_state13)) begin
            ap_enable_reg_pp3_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        weight_0_sel_rd <= 1'b0;
    end else begin
        if (((weight_0_ack_out == 1'b1) & (weight_0_vld_out == 1'b1))) begin
            weight_0_sel_rd <= ~weight_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        weight_0_sel_wr <= 1'b0;
    end else begin
        if (((weight_0_ack_in == 1'b1) & (weight_0_vld_in == 1'b1))) begin
            weight_0_sel_wr <= ~weight_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        weight_0_state <= 2'd0;
    end else begin
        if ((((weight_0_state == 2'd2) & (weight_0_vld_in == 1'b0)) | ((weight_0_state == 2'd3) & (weight_0_vld_in == 1'b0) & (weight_0_ack_out == 1'b1)))) begin
            weight_0_state <= 2'd2;
        end else if ((((weight_0_state == 2'd1) & (weight_0_ack_out == 1'b0)) | ((weight_0_state == 2'd3) & (weight_0_ack_out == 1'b0) & (weight_0_vld_in == 1'b1)))) begin
            weight_0_state <= 2'd1;
        end else if (((~((weight_0_vld_in == 1'b0) & (weight_0_ack_out == 1'b1)) & ~((weight_0_ack_out == 1'b0) & (weight_0_vld_in == 1'b1)) & (weight_0_state == 2'd3)) | ((weight_0_state == 2'd1) & (weight_0_ack_out == 1'b1)) | ((weight_0_state == 2'd2) & (weight_0_vld_in == 1'b1)))) begin
            weight_0_state <= 2'd3;
        end else begin
            weight_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_fu_170_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_01_rec_reg_118 <= p_rec1_fu_176_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        p_01_rec_reg_118 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        p_02_rec_reg_129 <= 9'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond9_fu_182_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        p_02_rec_reg_129 <= p_rec2_fu_188_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        p_03_rec_reg_140 <= 11'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond7_fu_194_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        p_03_rec_reg_140 <= p_rec6_fu_200_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        p_04_rec_reg_151 <= 12'd0;
    end else if (((1'b0 == ap_block_pp3_stage0_11001) & (exitcond5_fu_206_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        p_04_rec_reg_151 <= p_rec_fu_212_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == L1_weight_1_load_A)) begin
        L1_weight_1_payload_A <= reg_162;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == L1_weight_1_load_B)) begin
        L1_weight_1_payload_B <= reg_162;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == L2_weight_1_load_A)) begin
        L2_weight_1_payload_A <= reg_162;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == L2_weight_1_load_B)) begin
        L2_weight_1_payload_B <= reg_162;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == L3_weight_1_load_A)) begin
        L3_weight_1_payload_A <= reg_162;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == L3_weight_1_load_B)) begin
        L3_weight_1_payload_B <= reg_162;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == L4_weight_1_load_A)) begin
        L4_weight_1_payload_A <= reg_162;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == L4_weight_1_load_B)) begin
        L4_weight_1_payload_B <= reg_162;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        exitcond5_reg_245 <= exitcond5_fu_206_p2;
        exitcond5_reg_245_pp3_iter1_reg <= exitcond5_reg_245;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        exitcond7_reg_236 <= exitcond7_fu_194_p2;
        exitcond7_reg_236_pp2_iter1_reg <= exitcond7_reg_236;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        exitcond9_reg_227 <= exitcond9_fu_182_p2;
        exitcond9_reg_227_pp1_iter1_reg <= exitcond9_reg_227;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_reg_218 <= exitcond_fu_170_p2;
        exitcond_reg_218_pp0_iter1_reg <= exitcond_reg_218;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp3_stage0_11001) & (exitcond5_fu_206_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_pp2_stage0_11001) & (exitcond7_fu_194_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (exitcond9_fu_182_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_fu_170_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        reg_162 <= weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((weight_0_load_A == 1'b1)) begin
        weight_0_payload_A <= weight_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((weight_0_load_B == 1'b1)) begin
        weight_0_payload_B <= weight_TDATA;
    end
end

always @ (*) begin
    if ((1'b1 == L1_weight_1_sel)) begin
        L1_weight_1_data_out = L1_weight_1_payload_B;
    end else begin
        L1_weight_1_data_out = L1_weight_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_reg_218 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        L1_weight_1_vld_in = 1'b1;
    end else begin
        L1_weight_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond_reg_218_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((exitcond_reg_218 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        L1_weight_TDATA_blk_n = L1_weight_1_state[1'd1];
    end else begin
        L1_weight_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == L2_weight_1_sel)) begin
        L2_weight_1_data_out = L2_weight_1_payload_B;
    end else begin
        L2_weight_1_data_out = L2_weight_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond9_reg_227 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        L2_weight_1_vld_in = 1'b1;
    end else begin
        L2_weight_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond9_reg_227_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((exitcond9_reg_227 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        L2_weight_TDATA_blk_n = L2_weight_1_state[1'd1];
    end else begin
        L2_weight_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == L3_weight_1_sel)) begin
        L3_weight_1_data_out = L3_weight_1_payload_B;
    end else begin
        L3_weight_1_data_out = L3_weight_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond7_reg_236 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        L3_weight_1_vld_in = 1'b1;
    end else begin
        L3_weight_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond7_reg_236_pp2_iter1_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((exitcond7_reg_236 == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
        L3_weight_TDATA_blk_n = L3_weight_1_state[1'd1];
    end else begin
        L3_weight_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == L4_weight_1_sel)) begin
        L4_weight_1_data_out = L4_weight_1_payload_B;
    end else begin
        L4_weight_1_data_out = L4_weight_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (exitcond5_reg_245 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        L4_weight_1_vld_in = 1'b1;
    end else begin
        L4_weight_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond5_reg_245_pp3_iter1_reg == 1'd0) & (1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter2 == 1'b1)) | ((exitcond5_reg_245 == 1'd0) & (1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)))) begin
        L4_weight_TDATA_blk_n = L4_weight_1_state[1'd1];
    end else begin
        L4_weight_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((exitcond_fu_170_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond9_fu_182_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state6 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state6 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond7_fu_194_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state10 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state10 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond5_fu_206_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state14 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state14 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter2 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp3_stage0_11001) & (exitcond5_fu_206_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_pp2_stage0_11001) & (exitcond7_fu_194_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (exitcond9_fu_182_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_fu_170_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        weight_0_ack_out = 1'b1;
    end else begin
        weight_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((weight_0_sel == 1'b1)) begin
        weight_0_data_out = weight_0_payload_B;
    end else begin
        weight_0_data_out = weight_0_payload_A;
    end
end

always @ (*) begin
    if ((((exitcond5_fu_206_p2 == 1'd0) & (1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((exitcond7_fu_194_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((exitcond9_fu_182_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((exitcond_fu_170_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        weight_TDATA_blk_n = weight_0_state[1'd0];
    end else begin
        weight_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_fu_170_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_fu_170_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (exitcond9_fu_182_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (exitcond9_fu_182_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (exitcond7_fu_194_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (exitcond7_fu_194_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (exitcond5_fu_206_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b1)) | ((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (exitcond5_fu_206_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state17 : begin
            if ((~((1'b0 == L1_weight_1_ack_in) | (1'b0 == L4_weight_1_ack_in) | (1'b0 == L3_weight_1_ack_in) | (1'b0 == L2_weight_1_ack_in)) & (L4_weight_1_state[1'd0] == 1'b0) & (L3_weight_1_state[1'd0] == 1'b0) & (L2_weight_1_state[1'd0] == 1'b0) & (L1_weight_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign L1_weight_1_ack_in = L1_weight_1_state[1'd1];

assign L1_weight_1_ack_out = L1_weight_TREADY;

assign L1_weight_1_load_A = (~L1_weight_1_sel_wr & L1_weight_1_state_cmp_full);

assign L1_weight_1_load_B = (L1_weight_1_state_cmp_full & L1_weight_1_sel_wr);

assign L1_weight_1_sel = L1_weight_1_sel_rd;

assign L1_weight_1_state_cmp_full = ((L1_weight_1_state != 2'd1) ? 1'b1 : 1'b0);

assign L1_weight_1_vld_out = L1_weight_1_state[1'd0];

assign L1_weight_TDATA = L1_weight_1_data_out;

assign L1_weight_TVALID = L1_weight_1_state[1'd0];

assign L2_weight_1_ack_in = L2_weight_1_state[1'd1];

assign L2_weight_1_ack_out = L2_weight_TREADY;

assign L2_weight_1_load_A = (~L2_weight_1_sel_wr & L2_weight_1_state_cmp_full);

assign L2_weight_1_load_B = (L2_weight_1_state_cmp_full & L2_weight_1_sel_wr);

assign L2_weight_1_sel = L2_weight_1_sel_rd;

assign L2_weight_1_state_cmp_full = ((L2_weight_1_state != 2'd1) ? 1'b1 : 1'b0);

assign L2_weight_1_vld_out = L2_weight_1_state[1'd0];

assign L2_weight_TDATA = L2_weight_1_data_out;

assign L2_weight_TVALID = L2_weight_1_state[1'd0];

assign L3_weight_1_ack_in = L3_weight_1_state[1'd1];

assign L3_weight_1_ack_out = L3_weight_TREADY;

assign L3_weight_1_load_A = (~L3_weight_1_sel_wr & L3_weight_1_state_cmp_full);

assign L3_weight_1_load_B = (L3_weight_1_state_cmp_full & L3_weight_1_sel_wr);

assign L3_weight_1_sel = L3_weight_1_sel_rd;

assign L3_weight_1_state_cmp_full = ((L3_weight_1_state != 2'd1) ? 1'b1 : 1'b0);

assign L3_weight_1_vld_out = L3_weight_1_state[1'd0];

assign L3_weight_TDATA = L3_weight_1_data_out;

assign L3_weight_TVALID = L3_weight_1_state[1'd0];

assign L4_weight_1_ack_in = L4_weight_1_state[1'd1];

assign L4_weight_1_ack_out = L4_weight_TREADY;

assign L4_weight_1_load_A = (~L4_weight_1_sel_wr & L4_weight_1_state_cmp_full);

assign L4_weight_1_load_B = (L4_weight_1_state_cmp_full & L4_weight_1_sel_wr);

assign L4_weight_1_sel = L4_weight_1_sel_rd;

assign L4_weight_1_state_cmp_full = ((L4_weight_1_state != 2'd1) ? 1'b1 : 1'b0);

assign L4_weight_1_vld_out = L4_weight_1_state[1'd0];

assign L4_weight_TDATA = L4_weight_1_data_out;

assign L4_weight_TVALID = L4_weight_1_state[1'd0];

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((exitcond_fu_170_p2 == 1'd0) & (weight_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b1 == ap_block_state3_io) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((exitcond_fu_170_p2 == 1'd0) & (weight_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b1 == ap_block_state3_io) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((exitcond_fu_170_p2 == 1'd0) & (weight_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = ((exitcond9_fu_182_p2 == 1'd0) & (weight_0_vld_out == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((1'b1 == ap_block_state8_io) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b1 == ap_block_state7_io) & (ap_enable_reg_pp1_iter1 == 1'b1)) | ((exitcond9_fu_182_p2 == 1'd0) & (weight_0_vld_out == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((1'b1 == ap_block_state8_io) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b1 == ap_block_state7_io) & (ap_enable_reg_pp1_iter1 == 1'b1)) | ((exitcond9_fu_182_p2 == 1'd0) & (weight_0_vld_out == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_01001 = ((exitcond7_fu_194_p2 == 1'd0) & (weight_0_vld_out == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp2_stage0_11001 = (((1'b1 == ap_block_state12_io) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((1'b1 == ap_block_state11_io) & (ap_enable_reg_pp2_iter1 == 1'b1)) | ((exitcond7_fu_194_p2 == 1'd0) & (weight_0_vld_out == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = (((1'b1 == ap_block_state12_io) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((1'b1 == ap_block_state11_io) & (ap_enable_reg_pp2_iter1 == 1'b1)) | ((exitcond7_fu_194_p2 == 1'd0) & (weight_0_vld_out == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1)));
end

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage0_01001 = ((exitcond5_fu_206_p2 == 1'd0) & (weight_0_vld_out == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp3_stage0_11001 = (((1'b1 == ap_block_state16_io) & (ap_enable_reg_pp3_iter2 == 1'b1)) | ((1'b1 == ap_block_state15_io) & (ap_enable_reg_pp3_iter1 == 1'b1)) | ((exitcond5_fu_206_p2 == 1'd0) & (weight_0_vld_out == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp3_stage0_subdone = (((1'b1 == ap_block_state16_io) & (ap_enable_reg_pp3_iter2 == 1'b1)) | ((1'b1 == ap_block_state15_io) & (ap_enable_reg_pp3_iter1 == 1'b1)) | ((exitcond5_fu_206_p2 == 1'd0) & (weight_0_vld_out == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_state10_pp2_stage0_iter0 = ((exitcond7_fu_194_p2 == 1'd0) & (weight_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state11_io = ((exitcond7_reg_236 == 1'd0) & (1'b0 == L3_weight_1_ack_in));
end

assign ap_block_state11_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state12_io = ((exitcond7_reg_236_pp2_iter1_reg == 1'd0) & (1'b0 == L3_weight_1_ack_in));
end

assign ap_block_state12_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state14_pp3_stage0_iter0 = ((exitcond5_fu_206_p2 == 1'd0) & (weight_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state15_io = ((exitcond5_reg_245 == 1'd0) & (1'b0 == L4_weight_1_ack_in));
end

assign ap_block_state15_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state16_io = ((exitcond5_reg_245_pp3_iter1_reg == 1'd0) & (1'b0 == L4_weight_1_ack_in));
end

assign ap_block_state16_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state17 = ((1'b0 == L1_weight_1_ack_in) | (1'b0 == L4_weight_1_ack_in) | (1'b0 == L3_weight_1_ack_in) | (1'b0 == L2_weight_1_ack_in));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((exitcond_fu_170_p2 == 1'd0) & (weight_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state3_io = ((exitcond_reg_218 == 1'd0) & (1'b0 == L1_weight_1_ack_in));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = ((exitcond_reg_218_pp0_iter1_reg == 1'd0) & (1'b0 == L1_weight_1_ack_in));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp1_stage0_iter0 = ((exitcond9_fu_182_p2 == 1'd0) & (weight_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state7_io = ((exitcond9_reg_227 == 1'd0) & (1'b0 == L2_weight_1_ack_in));
end

assign ap_block_state7_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_io = ((exitcond9_reg_227_pp1_iter1_reg == 1'd0) & (1'b0 == L2_weight_1_ack_in));
end

assign ap_block_state8_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond5_fu_206_p2 = ((p_04_rec_reg_151 == 12'd2925) ? 1'b1 : 1'b0);

assign exitcond7_fu_194_p2 = ((p_03_rec_reg_140 == 11'd1168) ? 1'b1 : 1'b0);

assign exitcond9_fu_182_p2 = ((p_02_rec_reg_129 == 9'd296) ? 1'b1 : 1'b0);

assign exitcond_fu_170_p2 = ((p_01_rec_reg_118 == 6'd40) ? 1'b1 : 1'b0);

assign p_rec1_fu_176_p2 = (p_01_rec_reg_118 + 6'd1);

assign p_rec2_fu_188_p2 = (p_02_rec_reg_129 + 9'd1);

assign p_rec6_fu_200_p2 = (p_03_rec_reg_140 + 11'd1);

assign p_rec_fu_212_p2 = (p_04_rec_reg_151 + 12'd1);

assign weight_0_ack_in = weight_0_state[1'd1];

assign weight_0_load_A = (weight_0_state_cmp_full & ~weight_0_sel_wr);

assign weight_0_load_B = (weight_0_state_cmp_full & weight_0_sel_wr);

assign weight_0_sel = weight_0_sel_rd;

assign weight_0_state_cmp_full = ((weight_0_state != 2'd1) ? 1'b1 : 1'b0);

assign weight_0_vld_in = weight_TVALID;

assign weight_0_vld_out = weight_0_state[1'd0];

assign weight_TREADY = weight_0_state[1'd1];

endmodule //Kernel_DMA
