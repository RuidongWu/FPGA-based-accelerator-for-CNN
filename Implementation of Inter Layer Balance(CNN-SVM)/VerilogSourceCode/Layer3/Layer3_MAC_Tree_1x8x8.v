// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Layer3_MAC_Tree_1x8x8,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xazu3eg-sfvc784-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=7.146000,HLS_SYN_LAT=2,HLS_SYN_TPT=2,HLS_SYN_MEM=0,HLS_SYN_DSP=64,HLS_SYN_FF=2959,HLS_SYN_LUT=1220,HLS_VERSION=2018_3}" *)

module Layer3_MAC_Tree_1x8x8 (
        ap_clk,
        ap_rst_n,
        a_Data_TDATA,
        a_Data_TVALID,
        a_Data_TREADY,
        b_Data_TDATA,
        b_Data_TVALID,
        b_Data_TREADY,
        c_Data_TDATA,
        c_Data_TVALID,
        c_Data_TREADY
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst_n;
input  [127:0] a_Data_TDATA;
input   a_Data_TVALID;
output   a_Data_TREADY;
input  [1023:0] b_Data_TDATA;
input   b_Data_TVALID;
output   b_Data_TREADY;
output  [255:0] c_Data_TDATA;
output   c_Data_TVALID;
input   c_Data_TREADY;

 reg    ap_rst_n_inv;
reg   [127:0] a_Data_0_data_out;
wire    a_Data_0_vld_in;
wire    a_Data_0_vld_out;
wire    a_Data_0_ack_in;
reg    a_Data_0_ack_out;
reg   [127:0] a_Data_0_payload_A;
reg   [127:0] a_Data_0_payload_B;
reg    a_Data_0_sel_rd;
reg    a_Data_0_sel_wr;
wire    a_Data_0_sel;
wire    a_Data_0_load_A;
wire    a_Data_0_load_B;
reg   [1:0] a_Data_0_state;
wire    a_Data_0_state_cmp_full;
reg   [1023:0] b_Data_0_data_out;
wire    b_Data_0_vld_in;
wire    b_Data_0_vld_out;
wire    b_Data_0_ack_in;
reg    b_Data_0_ack_out;
reg   [1023:0] b_Data_0_payload_A;
reg   [1023:0] b_Data_0_payload_B;
reg    b_Data_0_sel_rd;
reg    b_Data_0_sel_wr;
wire    b_Data_0_sel;
wire    b_Data_0_load_A;
wire    b_Data_0_load_B;
reg   [1:0] b_Data_0_state;
wire    b_Data_0_state_cmp_full;
reg   [255:0] c_Data_1_data_in;
reg   [255:0] c_Data_1_data_out;
reg    c_Data_1_vld_in;
wire    c_Data_1_vld_out;
wire    c_Data_1_ack_in;
wire    c_Data_1_ack_out;
reg   [255:0] c_Data_1_payload_A;
reg   [255:0] c_Data_1_payload_B;
reg    c_Data_1_sel_rd;
reg    c_Data_1_sel_wr;
wire    c_Data_1_sel;
wire    c_Data_1_load_A;
wire    c_Data_1_load_B;
reg   [1:0] c_Data_1_state;
wire    c_Data_1_state_cmp_full;
reg    a_Data_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_pp0_stage0;
reg    b_Data_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg    c_Data_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter1;
wire   [15:0] tmp_48_fu_1116_p1;
reg   [15:0] tmp_48_reg_1250;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
reg   [15:0] p_1_assign_1_reg_1255;
reg   [15:0] p_2_assign_1_reg_1260;
reg   [15:0] p_3_assign_1_reg_1265;
reg   [15:0] p_4_assign_1_reg_1270;
reg   [15:0] p_5_assign_1_reg_1275;
reg   [15:0] p_6_assign_1_reg_1280;
reg   [15:0] p_7_assign_1_reg_1285;
wire   [255:0] tmp_fu_1203_p9;
wire   [255:0] tmp_1_fu_1229_p9;
reg    ap_block_state2_pp0_stage1_iter0;
reg    ap_block_pp0_stage1_11001;
reg    ap_block_pp0_stage0_subdone;
reg    ap_block_pp0_stage1_subdone;
wire    grp_MAC_8x8_fu_315_ap_ready;
reg   [15:0] grp_MAC_8x8_fu_315_p_read;
reg   [15:0] grp_MAC_8x8_fu_315_p_read1;
reg   [15:0] grp_MAC_8x8_fu_315_p_read2;
reg   [15:0] grp_MAC_8x8_fu_315_p_read3;
reg   [15:0] grp_MAC_8x8_fu_315_p_read4;
reg   [15:0] grp_MAC_8x8_fu_315_p_read5;
reg   [15:0] grp_MAC_8x8_fu_315_p_read6;
reg   [15:0] grp_MAC_8x8_fu_315_p_read7;
reg   [15:0] grp_MAC_8x8_fu_315_p_read8;
wire   [15:0] grp_MAC_8x8_fu_315_p_read9;
wire   [15:0] grp_MAC_8x8_fu_315_p_read10;
wire   [15:0] grp_MAC_8x8_fu_315_p_read11;
wire   [15:0] grp_MAC_8x8_fu_315_p_read12;
wire   [15:0] grp_MAC_8x8_fu_315_p_read13;
wire   [15:0] grp_MAC_8x8_fu_315_p_read14;
wire   [15:0] grp_MAC_8x8_fu_315_p_read15;
wire   [15:0] grp_MAC_8x8_fu_315_p_read16;
wire   [15:0] grp_MAC_8x8_fu_315_p_read17;
wire   [15:0] grp_MAC_8x8_fu_315_p_read18;
wire   [15:0] grp_MAC_8x8_fu_315_p_read19;
wire   [15:0] grp_MAC_8x8_fu_315_p_read20;
wire   [15:0] grp_MAC_8x8_fu_315_p_read21;
wire   [15:0] grp_MAC_8x8_fu_315_p_read22;
wire   [15:0] grp_MAC_8x8_fu_315_p_read23;
wire   [15:0] grp_MAC_8x8_fu_315_p_read24;
wire   [15:0] grp_MAC_8x8_fu_315_p_read25;
wire   [15:0] grp_MAC_8x8_fu_315_p_read26;
wire   [15:0] grp_MAC_8x8_fu_315_p_read27;
wire   [15:0] grp_MAC_8x8_fu_315_p_read28;
wire   [15:0] grp_MAC_8x8_fu_315_p_read29;
wire   [15:0] grp_MAC_8x8_fu_315_p_read30;
wire   [15:0] grp_MAC_8x8_fu_315_p_read31;
wire   [15:0] grp_MAC_8x8_fu_315_p_read32;
wire   [15:0] grp_MAC_8x8_fu_315_p_read33;
wire   [15:0] grp_MAC_8x8_fu_315_p_read34;
wire   [15:0] grp_MAC_8x8_fu_315_p_read35;
wire   [15:0] grp_MAC_8x8_fu_315_p_read36;
wire   [15:0] grp_MAC_8x8_fu_315_p_read37;
wire   [15:0] grp_MAC_8x8_fu_315_p_read38;
wire   [15:0] grp_MAC_8x8_fu_315_p_read39;
wire   [15:0] grp_MAC_8x8_fu_315_p_read40;
wire   [15:0] grp_MAC_8x8_fu_315_p_read41;
wire   [15:0] grp_MAC_8x8_fu_315_p_read42;
wire   [15:0] grp_MAC_8x8_fu_315_p_read43;
wire   [15:0] grp_MAC_8x8_fu_315_p_read44;
wire   [15:0] grp_MAC_8x8_fu_315_p_read45;
wire   [15:0] grp_MAC_8x8_fu_315_p_read46;
wire   [15:0] grp_MAC_8x8_fu_315_p_read47;
wire   [15:0] grp_MAC_8x8_fu_315_p_read48;
wire   [15:0] grp_MAC_8x8_fu_315_p_read49;
wire   [15:0] grp_MAC_8x8_fu_315_p_read50;
wire   [15:0] grp_MAC_8x8_fu_315_p_read51;
wire   [15:0] grp_MAC_8x8_fu_315_p_read52;
wire   [15:0] grp_MAC_8x8_fu_315_p_read53;
wire   [15:0] grp_MAC_8x8_fu_315_p_read54;
wire   [15:0] grp_MAC_8x8_fu_315_p_read55;
wire   [15:0] grp_MAC_8x8_fu_315_p_read56;
wire   [15:0] grp_MAC_8x8_fu_315_p_read57;
wire   [15:0] grp_MAC_8x8_fu_315_p_read58;
wire   [15:0] grp_MAC_8x8_fu_315_p_read59;
wire   [15:0] grp_MAC_8x8_fu_315_p_read60;
wire   [15:0] grp_MAC_8x8_fu_315_p_read61;
wire   [15:0] grp_MAC_8x8_fu_315_p_read62;
wire   [15:0] grp_MAC_8x8_fu_315_p_read63;
wire   [15:0] grp_MAC_8x8_fu_315_p_read64;
wire   [15:0] grp_MAC_8x8_fu_315_p_read65;
wire   [15:0] grp_MAC_8x8_fu_315_p_read66;
wire   [15:0] grp_MAC_8x8_fu_315_p_read67;
wire   [15:0] grp_MAC_8x8_fu_315_p_read68;
wire   [15:0] grp_MAC_8x8_fu_315_p_read69;
wire   [15:0] grp_MAC_8x8_fu_315_p_read70;
wire   [15:0] grp_MAC_8x8_fu_315_p_read71;
wire   [31:0] grp_MAC_8x8_fu_315_ap_return_0;
wire   [31:0] grp_MAC_8x8_fu_315_ap_return_1;
wire   [31:0] grp_MAC_8x8_fu_315_ap_return_2;
wire   [31:0] grp_MAC_8x8_fu_315_ap_return_3;
wire   [31:0] grp_MAC_8x8_fu_315_ap_return_4;
wire   [31:0] grp_MAC_8x8_fu_315_ap_return_5;
wire   [31:0] grp_MAC_8x8_fu_315_ap_return_6;
wire   [31:0] grp_MAC_8x8_fu_315_ap_return_7;
wire   [15:0] tmp_49_fu_1198_p1;
wire   [15:0] tmp_50_fu_1224_p1;
reg    ap_block_pp0_stage0_01001;
reg    ap_block_pp0_stage1_01001;
reg   [1:0] ap_NS_fsm;
wire    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 a_Data_0_sel_rd = 1'b0;
#0 a_Data_0_sel_wr = 1'b0;
#0 a_Data_0_state = 2'd0;
#0 b_Data_0_sel_rd = 1'b0;
#0 b_Data_0_sel_wr = 1'b0;
#0 b_Data_0_state = 2'd0;
#0 c_Data_1_sel_rd = 1'b0;
#0 c_Data_1_sel_wr = 1'b0;
#0 c_Data_1_state = 2'd0;
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

MAC_8x8 grp_MAC_8x8_fu_315(
    .ap_ready(grp_MAC_8x8_fu_315_ap_ready),
    .p_read(grp_MAC_8x8_fu_315_p_read),
    .p_read1(grp_MAC_8x8_fu_315_p_read1),
    .p_read2(grp_MAC_8x8_fu_315_p_read2),
    .p_read3(grp_MAC_8x8_fu_315_p_read3),
    .p_read4(grp_MAC_8x8_fu_315_p_read4),
    .p_read5(grp_MAC_8x8_fu_315_p_read5),
    .p_read6(grp_MAC_8x8_fu_315_p_read6),
    .p_read7(grp_MAC_8x8_fu_315_p_read7),
    .p_read8(grp_MAC_8x8_fu_315_p_read8),
    .p_read9(grp_MAC_8x8_fu_315_p_read9),
    .p_read10(grp_MAC_8x8_fu_315_p_read10),
    .p_read11(grp_MAC_8x8_fu_315_p_read11),
    .p_read12(grp_MAC_8x8_fu_315_p_read12),
    .p_read13(grp_MAC_8x8_fu_315_p_read13),
    .p_read14(grp_MAC_8x8_fu_315_p_read14),
    .p_read15(grp_MAC_8x8_fu_315_p_read15),
    .p_read16(grp_MAC_8x8_fu_315_p_read16),
    .p_read17(grp_MAC_8x8_fu_315_p_read17),
    .p_read18(grp_MAC_8x8_fu_315_p_read18),
    .p_read19(grp_MAC_8x8_fu_315_p_read19),
    .p_read20(grp_MAC_8x8_fu_315_p_read20),
    .p_read21(grp_MAC_8x8_fu_315_p_read21),
    .p_read22(grp_MAC_8x8_fu_315_p_read22),
    .p_read23(grp_MAC_8x8_fu_315_p_read23),
    .p_read24(grp_MAC_8x8_fu_315_p_read24),
    .p_read25(grp_MAC_8x8_fu_315_p_read25),
    .p_read26(grp_MAC_8x8_fu_315_p_read26),
    .p_read27(grp_MAC_8x8_fu_315_p_read27),
    .p_read28(grp_MAC_8x8_fu_315_p_read28),
    .p_read29(grp_MAC_8x8_fu_315_p_read29),
    .p_read30(grp_MAC_8x8_fu_315_p_read30),
    .p_read31(grp_MAC_8x8_fu_315_p_read31),
    .p_read32(grp_MAC_8x8_fu_315_p_read32),
    .p_read33(grp_MAC_8x8_fu_315_p_read33),
    .p_read34(grp_MAC_8x8_fu_315_p_read34),
    .p_read35(grp_MAC_8x8_fu_315_p_read35),
    .p_read36(grp_MAC_8x8_fu_315_p_read36),
    .p_read37(grp_MAC_8x8_fu_315_p_read37),
    .p_read38(grp_MAC_8x8_fu_315_p_read38),
    .p_read39(grp_MAC_8x8_fu_315_p_read39),
    .p_read40(grp_MAC_8x8_fu_315_p_read40),
    .p_read41(grp_MAC_8x8_fu_315_p_read41),
    .p_read42(grp_MAC_8x8_fu_315_p_read42),
    .p_read43(grp_MAC_8x8_fu_315_p_read43),
    .p_read44(grp_MAC_8x8_fu_315_p_read44),
    .p_read45(grp_MAC_8x8_fu_315_p_read45),
    .p_read46(grp_MAC_8x8_fu_315_p_read46),
    .p_read47(grp_MAC_8x8_fu_315_p_read47),
    .p_read48(grp_MAC_8x8_fu_315_p_read48),
    .p_read49(grp_MAC_8x8_fu_315_p_read49),
    .p_read50(grp_MAC_8x8_fu_315_p_read50),
    .p_read51(grp_MAC_8x8_fu_315_p_read51),
    .p_read52(grp_MAC_8x8_fu_315_p_read52),
    .p_read53(grp_MAC_8x8_fu_315_p_read53),
    .p_read54(grp_MAC_8x8_fu_315_p_read54),
    .p_read55(grp_MAC_8x8_fu_315_p_read55),
    .p_read56(grp_MAC_8x8_fu_315_p_read56),
    .p_read57(grp_MAC_8x8_fu_315_p_read57),
    .p_read58(grp_MAC_8x8_fu_315_p_read58),
    .p_read59(grp_MAC_8x8_fu_315_p_read59),
    .p_read60(grp_MAC_8x8_fu_315_p_read60),
    .p_read61(grp_MAC_8x8_fu_315_p_read61),
    .p_read62(grp_MAC_8x8_fu_315_p_read62),
    .p_read63(grp_MAC_8x8_fu_315_p_read63),
    .p_read64(grp_MAC_8x8_fu_315_p_read64),
    .p_read65(grp_MAC_8x8_fu_315_p_read65),
    .p_read66(grp_MAC_8x8_fu_315_p_read66),
    .p_read67(grp_MAC_8x8_fu_315_p_read67),
    .p_read68(grp_MAC_8x8_fu_315_p_read68),
    .p_read69(grp_MAC_8x8_fu_315_p_read69),
    .p_read70(grp_MAC_8x8_fu_315_p_read70),
    .p_read71(grp_MAC_8x8_fu_315_p_read71),
    .ap_return_0(grp_MAC_8x8_fu_315_ap_return_0),
    .ap_return_1(grp_MAC_8x8_fu_315_ap_return_1),
    .ap_return_2(grp_MAC_8x8_fu_315_ap_return_2),
    .ap_return_3(grp_MAC_8x8_fu_315_ap_return_3),
    .ap_return_4(grp_MAC_8x8_fu_315_ap_return_4),
    .ap_return_5(grp_MAC_8x8_fu_315_ap_return_5),
    .ap_return_6(grp_MAC_8x8_fu_315_ap_return_6),
    .ap_return_7(grp_MAC_8x8_fu_315_ap_return_7)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        a_Data_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == a_Data_0_ack_out) & (1'b1 == a_Data_0_vld_out))) begin
            a_Data_0_sel_rd <= ~a_Data_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        a_Data_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == a_Data_0_ack_in) & (1'b1 == a_Data_0_vld_in))) begin
            a_Data_0_sel_wr <= ~a_Data_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        a_Data_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == a_Data_0_vld_in) & (2'd2 == a_Data_0_state)) | ((1'b0 == a_Data_0_vld_in) & (2'd3 == a_Data_0_state) & (1'b1 == a_Data_0_ack_out)))) begin
            a_Data_0_state <= 2'd2;
        end else if ((((1'b0 == a_Data_0_ack_out) & (2'd1 == a_Data_0_state)) | ((1'b0 == a_Data_0_ack_out) & (2'd3 == a_Data_0_state) & (1'b1 == a_Data_0_vld_in)))) begin
            a_Data_0_state <= 2'd1;
        end else if (((~((1'b0 == a_Data_0_vld_in) & (1'b1 == a_Data_0_ack_out)) & ~((1'b0 == a_Data_0_ack_out) & (1'b1 == a_Data_0_vld_in)) & (2'd3 == a_Data_0_state)) | ((2'd1 == a_Data_0_state) & (1'b1 == a_Data_0_ack_out)) | ((2'd2 == a_Data_0_state) & (1'b1 == a_Data_0_vld_in)))) begin
            a_Data_0_state <= 2'd3;
        end else begin
            a_Data_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        b_Data_0_sel_rd <= 1'b0;
    end else begin
        if (((b_Data_0_ack_out == 1'b1) & (b_Data_0_vld_out == 1'b1))) begin
            b_Data_0_sel_rd <= ~b_Data_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        b_Data_0_sel_wr <= 1'b0;
    end else begin
        if (((b_Data_0_ack_in == 1'b1) & (b_Data_0_vld_in == 1'b1))) begin
            b_Data_0_sel_wr <= ~b_Data_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        b_Data_0_state <= 2'd0;
    end else begin
        if ((((b_Data_0_state == 2'd2) & (b_Data_0_vld_in == 1'b0)) | ((b_Data_0_state == 2'd3) & (b_Data_0_vld_in == 1'b0) & (b_Data_0_ack_out == 1'b1)))) begin
            b_Data_0_state <= 2'd2;
        end else if ((((b_Data_0_state == 2'd3) & (b_Data_0_ack_out == 1'b0) & (b_Data_0_vld_in == 1'b1)) | ((b_Data_0_state == 2'd1) & (b_Data_0_ack_out == 1'b0)))) begin
            b_Data_0_state <= 2'd1;
        end else if ((((b_Data_0_state == 2'd2) & (b_Data_0_vld_in == 1'b1)) | (~((b_Data_0_vld_in == 1'b0) & (b_Data_0_ack_out == 1'b1)) & ~((b_Data_0_ack_out == 1'b0) & (b_Data_0_vld_in == 1'b1)) & (b_Data_0_state == 2'd3)) | ((b_Data_0_state == 2'd1) & (b_Data_0_ack_out == 1'b1)))) begin
            b_Data_0_state <= 2'd3;
        end else begin
            b_Data_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        c_Data_1_sel_rd <= 1'b0;
    end else begin
        if (((c_Data_1_ack_out == 1'b1) & (c_Data_1_vld_out == 1'b1))) begin
            c_Data_1_sel_rd <= ~c_Data_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        c_Data_1_sel_wr <= 1'b0;
    end else begin
        if (((c_Data_1_ack_in == 1'b1) & (c_Data_1_vld_in == 1'b1))) begin
            c_Data_1_sel_wr <= ~c_Data_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        c_Data_1_state <= 2'd0;
    end else begin
        if ((((c_Data_1_state == 2'd2) & (c_Data_1_vld_in == 1'b0)) | ((c_Data_1_state == 2'd3) & (c_Data_1_vld_in == 1'b0) & (c_Data_1_ack_out == 1'b1)))) begin
            c_Data_1_state <= 2'd2;
        end else if ((((c_Data_1_state == 2'd1) & (c_Data_1_ack_out == 1'b0)) | ((c_Data_1_state == 2'd3) & (c_Data_1_ack_out == 1'b0) & (c_Data_1_vld_in == 1'b1)))) begin
            c_Data_1_state <= 2'd1;
        end else if (((~((c_Data_1_vld_in == 1'b0) & (c_Data_1_ack_out == 1'b1)) & ~((c_Data_1_ack_out == 1'b0) & (c_Data_1_vld_in == 1'b1)) & (c_Data_1_state == 2'd3)) | ((c_Data_1_state == 2'd1) & (c_Data_1_ack_out == 1'b1)) | ((c_Data_1_state == 2'd2) & (c_Data_1_vld_in == 1'b1)))) begin
            c_Data_1_state <= 2'd3;
        end else begin
            c_Data_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == a_Data_0_load_A)) begin
        a_Data_0_payload_A <= a_Data_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == a_Data_0_load_B)) begin
        a_Data_0_payload_B <= a_Data_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((b_Data_0_load_A == 1'b1)) begin
        b_Data_0_payload_A <= b_Data_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((b_Data_0_load_B == 1'b1)) begin
        b_Data_0_payload_B <= b_Data_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((c_Data_1_load_A == 1'b1)) begin
        c_Data_1_payload_A <= c_Data_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((c_Data_1_load_B == 1'b1)) begin
        c_Data_1_payload_B <= c_Data_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_1_assign_1_reg_1255 <= {{a_Data_0_data_out[31:16]}};
        p_2_assign_1_reg_1260 <= {{a_Data_0_data_out[47:32]}};
        p_3_assign_1_reg_1265 <= {{a_Data_0_data_out[63:48]}};
        p_4_assign_1_reg_1270 <= {{a_Data_0_data_out[79:64]}};
        p_5_assign_1_reg_1275 <= {{a_Data_0_data_out[95:80]}};
        p_6_assign_1_reg_1280 <= {{a_Data_0_data_out[111:96]}};
        p_7_assign_1_reg_1285 <= {{a_Data_0_data_out[127:112]}};
        tmp_48_reg_1250 <= tmp_48_fu_1116_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_Data_0_ack_out = 1'b1;
    end else begin
        a_Data_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == a_Data_0_sel)) begin
        a_Data_0_data_out = a_Data_0_payload_B;
    end else begin
        a_Data_0_data_out = a_Data_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_Data_TDATA_blk_n = a_Data_0_state[1'd0];
    end else begin
        a_Data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        b_Data_0_ack_out = 1'b1;
    end else begin
        b_Data_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((b_Data_0_sel == 1'b1)) begin
        b_Data_0_data_out = b_Data_0_payload_B;
    end else begin
        b_Data_0_data_out = b_Data_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        b_Data_TDATA_blk_n = b_Data_0_state[1'd0];
    end else begin
        b_Data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1_01001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            c_Data_1_data_in = tmp_1_fu_1229_p9;
        end else if (((1'b0 == ap_block_pp0_stage0_01001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            c_Data_1_data_in = tmp_fu_1203_p9;
        end else begin
            c_Data_1_data_in = 'bx;
        end
    end else begin
        c_Data_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((c_Data_1_sel == 1'b1)) begin
        c_Data_1_data_out = c_Data_1_payload_B;
    end else begin
        c_Data_1_data_out = c_Data_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        c_Data_1_vld_in = 1'b1;
    end else begin
        c_Data_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        c_Data_TDATA_blk_n = c_Data_1_state[1'd1];
    end else begin
        c_Data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_MAC_8x8_fu_315_p_read = tmp_48_reg_1250;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_MAC_8x8_fu_315_p_read = tmp_48_fu_1116_p1;
        end else begin
            grp_MAC_8x8_fu_315_p_read = 'bx;
        end
    end else begin
        grp_MAC_8x8_fu_315_p_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_MAC_8x8_fu_315_p_read1 = p_1_assign_1_reg_1255;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_MAC_8x8_fu_315_p_read1 = {{a_Data_0_data_out[31:16]}};
        end else begin
            grp_MAC_8x8_fu_315_p_read1 = 'bx;
        end
    end else begin
        grp_MAC_8x8_fu_315_p_read1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_MAC_8x8_fu_315_p_read2 = p_2_assign_1_reg_1260;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_MAC_8x8_fu_315_p_read2 = {{a_Data_0_data_out[47:32]}};
        end else begin
            grp_MAC_8x8_fu_315_p_read2 = 'bx;
        end
    end else begin
        grp_MAC_8x8_fu_315_p_read2 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_MAC_8x8_fu_315_p_read3 = p_3_assign_1_reg_1265;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_MAC_8x8_fu_315_p_read3 = {{a_Data_0_data_out[63:48]}};
        end else begin
            grp_MAC_8x8_fu_315_p_read3 = 'bx;
        end
    end else begin
        grp_MAC_8x8_fu_315_p_read3 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_MAC_8x8_fu_315_p_read4 = p_4_assign_1_reg_1270;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_MAC_8x8_fu_315_p_read4 = {{a_Data_0_data_out[79:64]}};
        end else begin
            grp_MAC_8x8_fu_315_p_read4 = 'bx;
        end
    end else begin
        grp_MAC_8x8_fu_315_p_read4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_MAC_8x8_fu_315_p_read5 = p_5_assign_1_reg_1275;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_MAC_8x8_fu_315_p_read5 = {{a_Data_0_data_out[95:80]}};
        end else begin
            grp_MAC_8x8_fu_315_p_read5 = 'bx;
        end
    end else begin
        grp_MAC_8x8_fu_315_p_read5 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_MAC_8x8_fu_315_p_read6 = p_6_assign_1_reg_1280;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_MAC_8x8_fu_315_p_read6 = {{a_Data_0_data_out[111:96]}};
        end else begin
            grp_MAC_8x8_fu_315_p_read6 = 'bx;
        end
    end else begin
        grp_MAC_8x8_fu_315_p_read6 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_MAC_8x8_fu_315_p_read7 = p_7_assign_1_reg_1285;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_MAC_8x8_fu_315_p_read7 = {{a_Data_0_data_out[127:112]}};
        end else begin
            grp_MAC_8x8_fu_315_p_read7 = 'bx;
        end
    end else begin
        grp_MAC_8x8_fu_315_p_read7 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_MAC_8x8_fu_315_p_read8 = tmp_50_fu_1224_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_MAC_8x8_fu_315_p_read8 = tmp_49_fu_1198_p1;
        end else begin
            grp_MAC_8x8_fu_315_p_read8 = 'bx;
        end
    end else begin
        grp_MAC_8x8_fu_315_p_read8 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_reset_idle_pp0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_reset_idle_pp0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_Data_0_ack_in = a_Data_0_state[1'd1];

assign a_Data_0_load_A = (~a_Data_0_sel_wr & a_Data_0_state_cmp_full);

assign a_Data_0_load_B = (a_Data_0_state_cmp_full & a_Data_0_sel_wr);

assign a_Data_0_sel = a_Data_0_sel_rd;

assign a_Data_0_state_cmp_full = ((a_Data_0_state != 2'd1) ? 1'b1 : 1'b0);

assign a_Data_0_vld_in = a_Data_TVALID;

assign a_Data_0_vld_out = a_Data_0_state[1'd0];

assign a_Data_TREADY = a_Data_0_state[1'd1];

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((c_Data_1_ack_in == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b1 == 1'b1) & ((b_Data_0_vld_out == 1'b0) | (1'b0 == a_Data_0_vld_out))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((c_Data_1_ack_in == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b1 == 1'b1) & ((b_Data_0_vld_out == 1'b0) | (1'b0 == a_Data_0_vld_out) | (c_Data_1_ack_in == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((c_Data_1_ack_in == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b1 == 1'b1) & ((b_Data_0_vld_out == 1'b0) | (1'b0 == a_Data_0_vld_out) | (c_Data_1_ack_in == 1'b0))));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((b_Data_0_vld_out == 1'b0) & (1'b1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((1'b1 == 1'b1) & ((b_Data_0_vld_out == 1'b0) | (c_Data_1_ack_in == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((1'b1 == 1'b1) & ((b_Data_0_vld_out == 1'b0) | (c_Data_1_ack_in == 1'b0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((b_Data_0_vld_out == 1'b0) | (1'b0 == a_Data_0_vld_out));
end

always @ (*) begin
    ap_block_state2_pp0_stage1_iter0 = (b_Data_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (c_Data_1_ack_in == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign b_Data_0_ack_in = b_Data_0_state[1'd1];

assign b_Data_0_load_A = (~b_Data_0_sel_wr & b_Data_0_state_cmp_full);

assign b_Data_0_load_B = (b_Data_0_state_cmp_full & b_Data_0_sel_wr);

assign b_Data_0_sel = b_Data_0_sel_rd;

assign b_Data_0_state_cmp_full = ((b_Data_0_state != 2'd1) ? 1'b1 : 1'b0);

assign b_Data_0_vld_in = b_Data_TVALID;

assign b_Data_0_vld_out = b_Data_0_state[1'd0];

assign b_Data_TREADY = b_Data_0_state[1'd1];

assign c_Data_1_ack_in = c_Data_1_state[1'd1];

assign c_Data_1_ack_out = c_Data_TREADY;

assign c_Data_1_load_A = (~c_Data_1_sel_wr & c_Data_1_state_cmp_full);

assign c_Data_1_load_B = (c_Data_1_state_cmp_full & c_Data_1_sel_wr);

assign c_Data_1_sel = c_Data_1_sel_rd;

assign c_Data_1_state_cmp_full = ((c_Data_1_state != 2'd1) ? 1'b1 : 1'b0);

assign c_Data_1_vld_out = c_Data_1_state[1'd0];

assign c_Data_TDATA = c_Data_1_data_out;

assign c_Data_TVALID = c_Data_1_state[1'd0];

assign grp_MAC_8x8_fu_315_p_read10 = {{b_Data_0_data_out[47:32]}};

assign grp_MAC_8x8_fu_315_p_read11 = {{b_Data_0_data_out[63:48]}};

assign grp_MAC_8x8_fu_315_p_read12 = {{b_Data_0_data_out[79:64]}};

assign grp_MAC_8x8_fu_315_p_read13 = {{b_Data_0_data_out[95:80]}};

assign grp_MAC_8x8_fu_315_p_read14 = {{b_Data_0_data_out[111:96]}};

assign grp_MAC_8x8_fu_315_p_read15 = {{b_Data_0_data_out[127:112]}};

assign grp_MAC_8x8_fu_315_p_read16 = {{b_Data_0_data_out[143:128]}};

assign grp_MAC_8x8_fu_315_p_read17 = {{b_Data_0_data_out[159:144]}};

assign grp_MAC_8x8_fu_315_p_read18 = {{b_Data_0_data_out[175:160]}};

assign grp_MAC_8x8_fu_315_p_read19 = {{b_Data_0_data_out[191:176]}};

assign grp_MAC_8x8_fu_315_p_read20 = {{b_Data_0_data_out[207:192]}};

assign grp_MAC_8x8_fu_315_p_read21 = {{b_Data_0_data_out[223:208]}};

assign grp_MAC_8x8_fu_315_p_read22 = {{b_Data_0_data_out[239:224]}};

assign grp_MAC_8x8_fu_315_p_read23 = {{b_Data_0_data_out[255:240]}};

assign grp_MAC_8x8_fu_315_p_read24 = {{b_Data_0_data_out[271:256]}};

assign grp_MAC_8x8_fu_315_p_read25 = {{b_Data_0_data_out[287:272]}};

assign grp_MAC_8x8_fu_315_p_read26 = {{b_Data_0_data_out[303:288]}};

assign grp_MAC_8x8_fu_315_p_read27 = {{b_Data_0_data_out[319:304]}};

assign grp_MAC_8x8_fu_315_p_read28 = {{b_Data_0_data_out[335:320]}};

assign grp_MAC_8x8_fu_315_p_read29 = {{b_Data_0_data_out[351:336]}};

assign grp_MAC_8x8_fu_315_p_read30 = {{b_Data_0_data_out[367:352]}};

assign grp_MAC_8x8_fu_315_p_read31 = {{b_Data_0_data_out[383:368]}};

assign grp_MAC_8x8_fu_315_p_read32 = {{b_Data_0_data_out[399:384]}};

assign grp_MAC_8x8_fu_315_p_read33 = {{b_Data_0_data_out[415:400]}};

assign grp_MAC_8x8_fu_315_p_read34 = {{b_Data_0_data_out[431:416]}};

assign grp_MAC_8x8_fu_315_p_read35 = {{b_Data_0_data_out[447:432]}};

assign grp_MAC_8x8_fu_315_p_read36 = {{b_Data_0_data_out[463:448]}};

assign grp_MAC_8x8_fu_315_p_read37 = {{b_Data_0_data_out[479:464]}};

assign grp_MAC_8x8_fu_315_p_read38 = {{b_Data_0_data_out[495:480]}};

assign grp_MAC_8x8_fu_315_p_read39 = {{b_Data_0_data_out[511:496]}};

assign grp_MAC_8x8_fu_315_p_read40 = {{b_Data_0_data_out[527:512]}};

assign grp_MAC_8x8_fu_315_p_read41 = {{b_Data_0_data_out[543:528]}};

assign grp_MAC_8x8_fu_315_p_read42 = {{b_Data_0_data_out[559:544]}};

assign grp_MAC_8x8_fu_315_p_read43 = {{b_Data_0_data_out[575:560]}};

assign grp_MAC_8x8_fu_315_p_read44 = {{b_Data_0_data_out[591:576]}};

assign grp_MAC_8x8_fu_315_p_read45 = {{b_Data_0_data_out[607:592]}};

assign grp_MAC_8x8_fu_315_p_read46 = {{b_Data_0_data_out[623:608]}};

assign grp_MAC_8x8_fu_315_p_read47 = {{b_Data_0_data_out[639:624]}};

assign grp_MAC_8x8_fu_315_p_read48 = {{b_Data_0_data_out[655:640]}};

assign grp_MAC_8x8_fu_315_p_read49 = {{b_Data_0_data_out[671:656]}};

assign grp_MAC_8x8_fu_315_p_read50 = {{b_Data_0_data_out[687:672]}};

assign grp_MAC_8x8_fu_315_p_read51 = {{b_Data_0_data_out[703:688]}};

assign grp_MAC_8x8_fu_315_p_read52 = {{b_Data_0_data_out[719:704]}};

assign grp_MAC_8x8_fu_315_p_read53 = {{b_Data_0_data_out[735:720]}};

assign grp_MAC_8x8_fu_315_p_read54 = {{b_Data_0_data_out[751:736]}};

assign grp_MAC_8x8_fu_315_p_read55 = {{b_Data_0_data_out[767:752]}};

assign grp_MAC_8x8_fu_315_p_read56 = {{b_Data_0_data_out[783:768]}};

assign grp_MAC_8x8_fu_315_p_read57 = {{b_Data_0_data_out[799:784]}};

assign grp_MAC_8x8_fu_315_p_read58 = {{b_Data_0_data_out[815:800]}};

assign grp_MAC_8x8_fu_315_p_read59 = {{b_Data_0_data_out[831:816]}};

assign grp_MAC_8x8_fu_315_p_read60 = {{b_Data_0_data_out[847:832]}};

assign grp_MAC_8x8_fu_315_p_read61 = {{b_Data_0_data_out[863:848]}};

assign grp_MAC_8x8_fu_315_p_read62 = {{b_Data_0_data_out[879:864]}};

assign grp_MAC_8x8_fu_315_p_read63 = {{b_Data_0_data_out[895:880]}};

assign grp_MAC_8x8_fu_315_p_read64 = {{b_Data_0_data_out[911:896]}};

assign grp_MAC_8x8_fu_315_p_read65 = {{b_Data_0_data_out[927:912]}};

assign grp_MAC_8x8_fu_315_p_read66 = {{b_Data_0_data_out[943:928]}};

assign grp_MAC_8x8_fu_315_p_read67 = {{b_Data_0_data_out[959:944]}};

assign grp_MAC_8x8_fu_315_p_read68 = {{b_Data_0_data_out[975:960]}};

assign grp_MAC_8x8_fu_315_p_read69 = {{b_Data_0_data_out[991:976]}};

assign grp_MAC_8x8_fu_315_p_read70 = {{b_Data_0_data_out[1007:992]}};

assign grp_MAC_8x8_fu_315_p_read71 = {{b_Data_0_data_out[1023:1008]}};

assign grp_MAC_8x8_fu_315_p_read9 = {{b_Data_0_data_out[31:16]}};

assign tmp_1_fu_1229_p9 = {{{{{{{{grp_MAC_8x8_fu_315_ap_return_7}, {grp_MAC_8x8_fu_315_ap_return_6}}, {grp_MAC_8x8_fu_315_ap_return_5}}, {grp_MAC_8x8_fu_315_ap_return_4}}, {grp_MAC_8x8_fu_315_ap_return_3}}, {grp_MAC_8x8_fu_315_ap_return_2}}, {grp_MAC_8x8_fu_315_ap_return_1}}, {grp_MAC_8x8_fu_315_ap_return_0}};

assign tmp_48_fu_1116_p1 = a_Data_0_data_out[15:0];

assign tmp_49_fu_1198_p1 = b_Data_0_data_out[15:0];

assign tmp_50_fu_1224_p1 = b_Data_0_data_out[15:0];

assign tmp_fu_1203_p9 = {{{{{{{{grp_MAC_8x8_fu_315_ap_return_7}, {grp_MAC_8x8_fu_315_ap_return_6}}, {grp_MAC_8x8_fu_315_ap_return_5}}, {grp_MAC_8x8_fu_315_ap_return_4}}, {grp_MAC_8x8_fu_315_ap_return_3}}, {grp_MAC_8x8_fu_315_ap_return_2}}, {grp_MAC_8x8_fu_315_ap_return_1}}, {grp_MAC_8x8_fu_315_ap_return_0}};

endmodule //Layer3_MAC_Tree_1x8x8
