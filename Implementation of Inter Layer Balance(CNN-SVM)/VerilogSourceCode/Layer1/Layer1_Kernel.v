// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Layer1_Kernel,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xazu3eg-sfvc784-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.208000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=695,HLS_SYN_LUT=708,HLS_VERSION=2018_3}" *)

module Layer1_Kernel (
        ap_clk,
        ap_rst_n,
        weight_TDATA,
        weight_TVALID,
        weight_TREADY,
        b_Data_TDATA,
        b_Data_TVALID,
        b_Data_TREADY,
        Bias_Data
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_pp1_stage0 = 16'd128;
parameter    ap_ST_fsm_pp1_stage1 = 16'd256;
parameter    ap_ST_fsm_pp1_stage2 = 16'd512;
parameter    ap_ST_fsm_pp1_stage3 = 16'd1024;
parameter    ap_ST_fsm_pp1_stage4 = 16'd2048;
parameter    ap_ST_fsm_pp1_stage5 = 16'd4096;
parameter    ap_ST_fsm_pp1_stage6 = 16'd8192;
parameter    ap_ST_fsm_pp1_stage7 = 16'd16384;
parameter    ap_ST_fsm_pp1_stage8 = 16'd32768;

input   ap_clk;
input   ap_rst_n;
input  [15:0] weight_TDATA;
input   weight_TVALID;
output   weight_TREADY;
output  [63:0] b_Data_TDATA;
output   b_Data_TVALID;
input   b_Data_TREADY;
output  [63:0] Bias_Data;

 reg    ap_rst_n_inv;
reg   [15:0] weight_0_data_out;
wire    weight_0_vld_in;
wire    weight_0_vld_out;
wire    weight_0_ack_in;
reg    weight_0_ack_out;
reg   [15:0] weight_0_payload_A;
reg   [15:0] weight_0_payload_B;
reg    weight_0_sel_rd;
reg    weight_0_sel_wr;
wire    weight_0_sel;
wire    weight_0_load_A;
wire    weight_0_load_B;
reg   [1:0] weight_0_state;
wire    weight_0_state_cmp_full;
reg   [63:0] b_Data_1_data_in;
reg   [63:0] b_Data_1_data_out;
reg    b_Data_1_vld_in;
wire    b_Data_1_vld_out;
wire    b_Data_1_ack_in;
wire    b_Data_1_ack_out;
reg   [63:0] b_Data_1_payload_A;
reg   [63:0] b_Data_1_payload_B;
reg    b_Data_1_sel_rd;
reg    b_Data_1_sel_wr;
wire    b_Data_1_sel;
wire    b_Data_1_load_A;
wire    b_Data_1_load_B;
reg   [1:0] b_Data_1_state;
wire    b_Data_1_state_cmp_full;
reg   [63:0] Bias_Data_1_data_reg;
reg    Bias_Data_1_vld_reg;
reg    Bias_Data_1_vld_in;
reg   [3:0] kernel_0_address0;
reg    kernel_0_ce0;
reg    kernel_0_we0;
wire   [15:0] kernel_0_q0;
reg   [3:0] kernel_0_address1;
reg    kernel_0_ce1;
wire   [15:0] kernel_0_q1;
reg   [3:0] kernel_1_address0;
reg    kernel_1_ce0;
reg    kernel_1_we0;
wire   [15:0] kernel_1_q0;
reg   [3:0] kernel_1_address1;
reg    kernel_1_ce1;
wire   [15:0] kernel_1_q1;
reg   [3:0] kernel_2_address0;
reg    kernel_2_ce0;
reg    kernel_2_we0;
wire   [15:0] kernel_2_q0;
reg   [3:0] kernel_2_address1;
reg    kernel_2_ce1;
wire   [15:0] kernel_2_q1;
reg   [3:0] kernel_3_address0;
reg    kernel_3_ce0;
reg    kernel_3_we0;
wire   [15:0] kernel_3_q0;
reg   [3:0] kernel_3_address1;
reg    kernel_3_ce1;
wire   [15:0] kernel_3_q1;
reg    weight_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond_flatten_fu_351_p2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
reg    b_Data_TDATA_blk_n;
wire    ap_CS_fsm_pp1_stage1;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_pp1_stage1;
wire    ap_CS_fsm_pp1_stage2;
wire    ap_block_pp1_stage2;
wire    ap_CS_fsm_pp1_stage3;
wire    ap_block_pp1_stage3;
wire    ap_CS_fsm_pp1_stage4;
wire    ap_block_pp1_stage4;
wire    ap_CS_fsm_pp1_stage5;
wire    ap_block_pp1_stage5;
wire    ap_CS_fsm_pp1_stage6;
wire    ap_block_pp1_stage6;
wire    ap_CS_fsm_pp1_stage7;
wire    ap_block_pp1_stage7;
wire    ap_CS_fsm_pp1_stage8;
wire    ap_block_pp1_stage8;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [15:0] reg_315;
wire    ap_block_state9_pp1_stage1_iter0;
wire    ap_block_state18_pp1_stage1_iter1;
reg    ap_block_pp1_stage1_11001;
wire    ap_block_state10_pp1_stage2_iter0;
reg    ap_block_pp1_stage2_11001;
wire    ap_block_state11_pp1_stage3_iter0;
reg    ap_block_pp1_stage3_11001;
wire    ap_block_state13_pp1_stage5_iter0;
reg    ap_block_pp1_stage5_11001;
reg   [15:0] reg_319;
reg   [15:0] reg_323;
reg   [15:0] reg_327;
reg   [15:0] reg_331;
wire    ap_block_state12_pp1_stage4_iter0;
reg    ap_block_pp1_stage4_11001;
reg   [15:0] reg_336;
reg   [15:0] reg_341;
reg   [15:0] reg_346;
wire   [5:0] indvar_flatten_next_fu_357_p2;
reg    ap_block_state2;
wire   [3:0] tmp_mid2_v_fu_383_p3;
wire   [2:0] n_1_fu_403_p2;
reg   [15:0] weight_read_reg_549;
reg   [15:0] weight_read_1_reg_554;
reg   [15:0] weight_read_2_reg_559;
wire   [63:0] tmp_1_fu_409_p5;
wire   [63:0] tmp_5_fu_419_p5;
wire   [63:0] tmp_6_fu_432_p5;
wire   [63:0] tmp_7_fu_445_p5;
reg   [15:0] kernel_0_load_5_reg_584;
reg   [15:0] kernel_1_load_5_reg_589;
reg   [15:0] kernel_2_load_5_reg_594;
reg   [15:0] kernel_3_load_5_reg_599;
wire   [63:0] tmp_8_fu_458_p5;
reg   [15:0] kernel_0_load_7_reg_609;
reg   [15:0] kernel_1_load_7_reg_614;
reg   [15:0] kernel_2_load_7_reg_619;
reg   [15:0] kernel_3_load_7_reg_624;
wire   [63:0] tmp_9_fu_471_p5;
wire   [63:0] tmp_s_fu_484_p5;
wire    ap_block_state14_pp1_stage6_iter0;
reg    ap_block_pp1_stage6_11001;
wire   [63:0] tmp_4_fu_493_p5;
wire    ap_block_state15_pp1_stage7_iter0;
reg    ap_block_pp1_stage7_11001;
wire   [63:0] tmp_10_fu_506_p5;
wire    ap_block_state16_pp1_stage8_iter0;
reg    ap_block_pp1_stage8_11001;
wire   [63:0] tmp_11_fu_515_p5;
wire    ap_block_state8_pp1_stage0_iter0;
wire    ap_block_state17_pp1_stage0_iter1;
reg    ap_block_pp1_stage0_11001;
wire    ap_CS_fsm_state7;
reg    ap_block_pp1_stage8_subdone;
reg   [5:0] indvar_flatten_reg_282;
wire    ap_CS_fsm_state1;
reg   [3:0] i_reg_293;
reg   [2:0] n_reg_304;
wire   [63:0] tmp_mid2_fu_391_p1;
wire   [1:0] tmp_fu_399_p1;
wire    ap_block_pp1_stage1_01001;
wire    ap_block_pp1_stage2_01001;
wire    ap_block_pp1_stage3_01001;
wire    ap_block_pp1_stage4_01001;
wire    ap_block_pp1_stage5_01001;
wire    ap_block_pp1_stage6_01001;
wire    ap_block_pp1_stage7_01001;
wire    ap_block_pp1_stage8_01001;
wire    ap_block_pp1_stage0_01001;
wire   [0:0] exitcond_fu_363_p2;
wire   [3:0] i_s_fu_377_p2;
wire   [2:0] n_mid2_fu_369_p3;
reg   [15:0] ap_NS_fsm;
reg    ap_block_pp1_stage0_subdone;
reg    ap_block_pp1_stage1_subdone;
reg    ap_block_pp1_stage2_subdone;
reg    ap_block_pp1_stage3_subdone;
reg    ap_block_pp1_stage4_subdone;
reg    ap_block_pp1_stage5_subdone;
reg    ap_block_pp1_stage6_subdone;
reg    ap_block_pp1_stage7_subdone;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 weight_0_sel_rd = 1'b0;
#0 weight_0_sel_wr = 1'b0;
#0 weight_0_state = 2'd0;
#0 b_Data_1_sel_rd = 1'b0;
#0 b_Data_1_sel_wr = 1'b0;
#0 b_Data_1_state = 2'd0;
#0 Bias_Data_1_data_reg = 64'd0;
#0 Bias_Data_1_vld_reg = 1'b0;
#0 ap_CS_fsm = 16'd1;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
end

Layer1_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
kernel_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_0_address0),
    .ce0(kernel_0_ce0),
    .we0(kernel_0_we0),
    .d0(weight_0_data_out),
    .q0(kernel_0_q0),
    .address1(kernel_0_address1),
    .ce1(kernel_0_ce1),
    .q1(kernel_0_q1)
);

Layer1_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
kernel_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_1_address0),
    .ce0(kernel_1_ce0),
    .we0(kernel_1_we0),
    .d0(weight_0_data_out),
    .q0(kernel_1_q0),
    .address1(kernel_1_address1),
    .ce1(kernel_1_ce1),
    .q1(kernel_1_q1)
);

Layer1_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
kernel_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_2_address0),
    .ce0(kernel_2_ce0),
    .we0(kernel_2_we0),
    .d0(weight_0_data_out),
    .q0(kernel_2_q0),
    .address1(kernel_2_address1),
    .ce1(kernel_2_ce1),
    .q1(kernel_2_q1)
);

Layer1_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
kernel_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_3_address0),
    .ce0(kernel_3_ce0),
    .we0(kernel_3_we0),
    .d0(weight_0_data_out),
    .q0(kernel_3_q0),
    .address1(kernel_3_address1),
    .ce1(kernel_3_ce1),
    .q1(kernel_3_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage8_subdone) & (1'b1 == ap_CS_fsm_pp1_stage8))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        b_Data_1_sel_rd <= 1'b0;
    end else begin
        if (((b_Data_1_vld_out == 1'b1) & (b_Data_1_ack_out == 1'b1))) begin
            b_Data_1_sel_rd <= ~b_Data_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        b_Data_1_sel_wr <= 1'b0;
    end else begin
        if (((b_Data_1_vld_in == 1'b1) & (b_Data_1_ack_in == 1'b1))) begin
            b_Data_1_sel_wr <= ~b_Data_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        b_Data_1_state <= 2'd0;
    end else begin
        if ((((b_Data_1_state == 2'd2) & (b_Data_1_vld_in == 1'b0)) | ((b_Data_1_state == 2'd3) & (b_Data_1_vld_in == 1'b0) & (b_Data_1_ack_out == 1'b1)))) begin
            b_Data_1_state <= 2'd2;
        end else if ((((b_Data_1_state == 2'd1) & (b_Data_1_ack_out == 1'b0)) | ((b_Data_1_state == 2'd3) & (b_Data_1_ack_out == 1'b0) & (b_Data_1_vld_in == 1'b1)))) begin
            b_Data_1_state <= 2'd1;
        end else if (((~((b_Data_1_vld_in == 1'b0) & (b_Data_1_ack_out == 1'b1)) & ~((b_Data_1_ack_out == 1'b0) & (b_Data_1_vld_in == 1'b1)) & (b_Data_1_state == 2'd3)) | ((b_Data_1_state == 2'd1) & (b_Data_1_ack_out == 1'b1)) | ((b_Data_1_state == 2'd2) & (b_Data_1_vld_in == 1'b1)))) begin
            b_Data_1_state <= 2'd3;
        end else begin
            b_Data_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        weight_0_sel_rd <= 1'b0;
    end else begin
        if (((weight_0_ack_out == 1'b1) & (weight_0_vld_out == 1'b1))) begin
            weight_0_sel_rd <= ~weight_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        weight_0_sel_wr <= 1'b0;
    end else begin
        if (((weight_0_ack_in == 1'b1) & (weight_0_vld_in == 1'b1))) begin
            weight_0_sel_wr <= ~weight_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        weight_0_state <= 2'd0;
    end else begin
        if ((((weight_0_state == 2'd2) & (weight_0_vld_in == 1'b0)) | ((weight_0_state == 2'd3) & (weight_0_vld_in == 1'b0) & (weight_0_ack_out == 1'b1)))) begin
            weight_0_state <= 2'd2;
        end else if ((((weight_0_state == 2'd1) & (weight_0_ack_out == 1'b0)) | ((weight_0_state == 2'd3) & (weight_0_ack_out == 1'b0) & (weight_0_vld_in == 1'b1)))) begin
            weight_0_state <= 2'd1;
        end else if (((~((weight_0_vld_in == 1'b0) & (weight_0_ack_out == 1'b1)) & ~((weight_0_ack_out == 1'b0) & (weight_0_vld_in == 1'b1)) & (weight_0_state == 2'd3)) | ((weight_0_state == 2'd1) & (weight_0_ack_out == 1'b1)) | ((weight_0_state == 2'd2) & (weight_0_vld_in == 1'b1)))) begin
            weight_0_state <= 2'd3;
        end else begin
            weight_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((exitcond_flatten_fu_351_p2 == 1'd0) & (weight_0_vld_out == 1'b0)) & (exitcond_flatten_fu_351_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_293 <= tmp_mid2_v_fu_383_p3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        i_reg_293 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((exitcond_flatten_fu_351_p2 == 1'd0) & (weight_0_vld_out == 1'b0)) & (exitcond_flatten_fu_351_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten_reg_282 <= indvar_flatten_next_fu_357_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        indvar_flatten_reg_282 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((exitcond_flatten_fu_351_p2 == 1'd0) & (weight_0_vld_out == 1'b0)) & (exitcond_flatten_fu_351_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        n_reg_304 <= n_1_fu_403_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        n_reg_304 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp1_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp1_stage4_11001) & (1'b1 == ap_CS_fsm_pp1_stage4))) begin
            reg_331 <= kernel_0_q1;
        end else if (((1'b0 == ap_block_pp1_stage2_11001) & (1'b1 == ap_CS_fsm_pp1_stage2))) begin
            reg_331 <= kernel_0_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp1_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp1_stage4_11001) & (1'b1 == ap_CS_fsm_pp1_stage4))) begin
            reg_336 <= kernel_1_q1;
        end else if (((1'b0 == ap_block_pp1_stage2_11001) & (1'b1 == ap_CS_fsm_pp1_stage2))) begin
            reg_336 <= kernel_1_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp1_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp1_stage4_11001) & (1'b1 == ap_CS_fsm_pp1_stage4))) begin
            reg_341 <= kernel_2_q1;
        end else if (((1'b0 == ap_block_pp1_stage2_11001) & (1'b1 == ap_CS_fsm_pp1_stage2))) begin
            reg_341 <= kernel_2_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp1_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp1_stage4_11001) & (1'b1 == ap_CS_fsm_pp1_stage4))) begin
            reg_346 <= kernel_3_q1;
        end else if (((1'b0 == ap_block_pp1_stage2_11001) & (1'b1 == ap_CS_fsm_pp1_stage2))) begin
            reg_346 <= kernel_3_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == Bias_Data_1_vld_reg) & (1'b1 == Bias_Data_1_vld_in)) | ((1'b1 == 1'b1) & (1'b1 == Bias_Data_1_vld_in) & (1'b1 == Bias_Data_1_vld_reg)))) begin
        Bias_Data_1_data_reg <= tmp_1_fu_409_p5;
    end
end

always @ (posedge ap_clk) begin
    if ((b_Data_1_load_A == 1'b1)) begin
        b_Data_1_payload_A <= b_Data_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((b_Data_1_load_B == 1'b1)) begin
        b_Data_1_payload_B <= b_Data_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage3_11001) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        kernel_0_load_5_reg_584 <= kernel_0_q0;
        kernel_1_load_5_reg_589 <= kernel_1_q0;
        kernel_2_load_5_reg_594 <= kernel_2_q0;
        kernel_3_load_5_reg_599 <= kernel_3_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage4_11001) & (1'b1 == ap_CS_fsm_pp1_stage4) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        kernel_0_load_7_reg_609 <= kernel_0_q0;
        kernel_1_load_7_reg_614 <= kernel_1_q0;
        kernel_2_load_7_reg_619 <= kernel_2_q0;
        kernel_3_load_7_reg_624 <= kernel_3_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp1_stage5_11001) & (1'b1 == ap_CS_fsm_pp1_stage5) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage3_11001) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage2_11001) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)))) begin
        reg_315 <= kernel_0_q1;
        reg_319 <= kernel_1_q1;
        reg_323 <= kernel_2_q1;
        reg_327 <= kernel_3_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((weight_0_load_A == 1'b1)) begin
        weight_0_payload_A <= weight_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((weight_0_load_B == 1'b1)) begin
        weight_0_payload_B <= weight_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        weight_read_1_reg_554 <= weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        weight_read_2_reg_559 <= weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        weight_read_reg_549 <= weight_0_data_out;
    end
end

always @ (*) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        Bias_Data_1_vld_in = 1'b1;
    end else begin
        Bias_Data_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_01001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        b_Data_1_data_in = tmp_11_fu_515_p5;
    end else if (((1'b0 == ap_block_pp1_stage8_01001) & (1'b1 == ap_CS_fsm_pp1_stage8) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        b_Data_1_data_in = tmp_10_fu_506_p5;
    end else if (((1'b0 == ap_block_pp1_stage7_01001) & (1'b1 == ap_CS_fsm_pp1_stage7) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        b_Data_1_data_in = tmp_4_fu_493_p5;
    end else if (((1'b0 == ap_block_pp1_stage6_01001) & (1'b1 == ap_CS_fsm_pp1_stage6) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        b_Data_1_data_in = tmp_s_fu_484_p5;
    end else if (((1'b0 == ap_block_pp1_stage5_01001) & (1'b1 == ap_CS_fsm_pp1_stage5) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        b_Data_1_data_in = tmp_9_fu_471_p5;
    end else if (((1'b0 == ap_block_pp1_stage4_01001) & (1'b1 == ap_CS_fsm_pp1_stage4) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        b_Data_1_data_in = tmp_8_fu_458_p5;
    end else if (((1'b0 == ap_block_pp1_stage3_01001) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        b_Data_1_data_in = tmp_7_fu_445_p5;
    end else if (((1'b0 == ap_block_pp1_stage2_01001) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        b_Data_1_data_in = tmp_6_fu_432_p5;
    end else if (((1'b0 == ap_block_pp1_stage1_01001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        b_Data_1_data_in = tmp_5_fu_419_p5;
    end else begin
        b_Data_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((b_Data_1_sel == 1'b1)) begin
        b_Data_1_data_out = b_Data_1_payload_B;
    end else begin
        b_Data_1_data_out = b_Data_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp1_stage8_11001) & (1'b1 == ap_CS_fsm_pp1_stage8) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage7_11001) & (1'b1 == ap_CS_fsm_pp1_stage7) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage6_11001) & (1'b1 == ap_CS_fsm_pp1_stage6) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage5_11001) & (1'b1 == ap_CS_fsm_pp1_stage5) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage4_11001) & (1'b1 == ap_CS_fsm_pp1_stage4) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage3_11001) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage2_11001) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)))) begin
        b_Data_1_vld_in = 1'b1;
    end else begin
        b_Data_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp1_stage8) & (1'b1 == ap_CS_fsm_pp1_stage8) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage7) & (1'b1 == ap_CS_fsm_pp1_stage7) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage6) & (1'b1 == ap_CS_fsm_pp1_stage6) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage5) & (1'b1 == ap_CS_fsm_pp1_stage5) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage4) & (1'b1 == ap_CS_fsm_pp1_stage4) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage3) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage2) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage1) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)) | ((1'b0 == ap_block_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)))) begin
        b_Data_TDATA_blk_n = b_Data_1_state[1'd1];
    end else begin
        b_Data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage3) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        kernel_0_address0 = 4'd7;
    end else if (((1'b0 == ap_block_pp1_stage2) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        kernel_0_address0 = 4'd5;
    end else if (((1'b0 == ap_block_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        kernel_0_address0 = 4'd3;
    end else if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        kernel_0_address0 = 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_0_address0 = tmp_mid2_fu_391_p1;
    end else begin
        kernel_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp1_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp1_stage4) & (1'b1 == ap_CS_fsm_pp1_stage4))) begin
            kernel_0_address1 = 4'd8;
        end else if (((1'b0 == ap_block_pp1_stage3) & (1'b1 == ap_CS_fsm_pp1_stage3))) begin
            kernel_0_address1 = 4'd6;
        end else if (((1'b0 == ap_block_pp1_stage2) & (1'b1 == ap_CS_fsm_pp1_stage2))) begin
            kernel_0_address1 = 4'd4;
        end else if (((1'b0 == ap_block_pp1_stage1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            kernel_0_address1 = 4'd2;
        end else if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            kernel_0_address1 = 4'd1;
        end else begin
            kernel_0_address1 = 'bx;
        end
    end else begin
        kernel_0_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage3_11001) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage2_11001) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)) | (~((exitcond_flatten_fu_351_p2 == 1'd0) & (weight_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        kernel_0_ce0 = 1'b1;
    end else begin
        kernel_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage4_11001) & (1'b1 == ap_CS_fsm_pp1_stage4) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage3_11001) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage2_11001) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)))) begin
        kernel_0_ce1 = 1'b1;
    end else begin
        kernel_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_flatten_fu_351_p2 == 1'd0) & (weight_0_vld_out == 1'b0)) & (tmp_fu_399_p1 == 2'd0) & (exitcond_flatten_fu_351_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        kernel_0_we0 = 1'b1;
    end else begin
        kernel_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage3) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        kernel_1_address0 = 4'd7;
    end else if (((1'b0 == ap_block_pp1_stage2) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        kernel_1_address0 = 4'd5;
    end else if (((1'b0 == ap_block_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        kernel_1_address0 = 4'd3;
    end else if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        kernel_1_address0 = 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_1_address0 = tmp_mid2_fu_391_p1;
    end else begin
        kernel_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp1_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp1_stage4) & (1'b1 == ap_CS_fsm_pp1_stage4))) begin
            kernel_1_address1 = 4'd8;
        end else if (((1'b0 == ap_block_pp1_stage3) & (1'b1 == ap_CS_fsm_pp1_stage3))) begin
            kernel_1_address1 = 4'd6;
        end else if (((1'b0 == ap_block_pp1_stage2) & (1'b1 == ap_CS_fsm_pp1_stage2))) begin
            kernel_1_address1 = 4'd4;
        end else if (((1'b0 == ap_block_pp1_stage1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            kernel_1_address1 = 4'd2;
        end else if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            kernel_1_address1 = 4'd1;
        end else begin
            kernel_1_address1 = 'bx;
        end
    end else begin
        kernel_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage3_11001) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage2_11001) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)) | (~((exitcond_flatten_fu_351_p2 == 1'd0) & (weight_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        kernel_1_ce0 = 1'b1;
    end else begin
        kernel_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage4_11001) & (1'b1 == ap_CS_fsm_pp1_stage4) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage3_11001) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage2_11001) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)))) begin
        kernel_1_ce1 = 1'b1;
    end else begin
        kernel_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_flatten_fu_351_p2 == 1'd0) & (weight_0_vld_out == 1'b0)) & (tmp_fu_399_p1 == 2'd1) & (exitcond_flatten_fu_351_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        kernel_1_we0 = 1'b1;
    end else begin
        kernel_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage3) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        kernel_2_address0 = 4'd7;
    end else if (((1'b0 == ap_block_pp1_stage2) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        kernel_2_address0 = 4'd5;
    end else if (((1'b0 == ap_block_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        kernel_2_address0 = 4'd3;
    end else if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        kernel_2_address0 = 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_2_address0 = tmp_mid2_fu_391_p1;
    end else begin
        kernel_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp1_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp1_stage4) & (1'b1 == ap_CS_fsm_pp1_stage4))) begin
            kernel_2_address1 = 4'd8;
        end else if (((1'b0 == ap_block_pp1_stage3) & (1'b1 == ap_CS_fsm_pp1_stage3))) begin
            kernel_2_address1 = 4'd6;
        end else if (((1'b0 == ap_block_pp1_stage2) & (1'b1 == ap_CS_fsm_pp1_stage2))) begin
            kernel_2_address1 = 4'd4;
        end else if (((1'b0 == ap_block_pp1_stage1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            kernel_2_address1 = 4'd2;
        end else if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            kernel_2_address1 = 4'd1;
        end else begin
            kernel_2_address1 = 'bx;
        end
    end else begin
        kernel_2_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage3_11001) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage2_11001) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)) | (~((exitcond_flatten_fu_351_p2 == 1'd0) & (weight_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        kernel_2_ce0 = 1'b1;
    end else begin
        kernel_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage4_11001) & (1'b1 == ap_CS_fsm_pp1_stage4) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage3_11001) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage2_11001) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)))) begin
        kernel_2_ce1 = 1'b1;
    end else begin
        kernel_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_flatten_fu_351_p2 == 1'd0) & (weight_0_vld_out == 1'b0)) & (tmp_fu_399_p1 == 2'd2) & (exitcond_flatten_fu_351_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        kernel_2_we0 = 1'b1;
    end else begin
        kernel_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage3) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        kernel_3_address0 = 4'd7;
    end else if (((1'b0 == ap_block_pp1_stage2) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        kernel_3_address0 = 4'd5;
    end else if (((1'b0 == ap_block_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        kernel_3_address0 = 4'd3;
    end else if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        kernel_3_address0 = 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_3_address0 = tmp_mid2_fu_391_p1;
    end else begin
        kernel_3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp1_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp1_stage4) & (1'b1 == ap_CS_fsm_pp1_stage4))) begin
            kernel_3_address1 = 4'd8;
        end else if (((1'b0 == ap_block_pp1_stage3) & (1'b1 == ap_CS_fsm_pp1_stage3))) begin
            kernel_3_address1 = 4'd6;
        end else if (((1'b0 == ap_block_pp1_stage2) & (1'b1 == ap_CS_fsm_pp1_stage2))) begin
            kernel_3_address1 = 4'd4;
        end else if (((1'b0 == ap_block_pp1_stage1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            kernel_3_address1 = 4'd2;
        end else if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            kernel_3_address1 = 4'd1;
        end else begin
            kernel_3_address1 = 'bx;
        end
    end else begin
        kernel_3_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage3_11001) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage2_11001) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)) | (~((exitcond_flatten_fu_351_p2 == 1'd0) & (weight_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        kernel_3_ce0 = 1'b1;
    end else begin
        kernel_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage4_11001) & (1'b1 == ap_CS_fsm_pp1_stage4) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage3_11001) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage2_11001) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)))) begin
        kernel_3_ce1 = 1'b1;
    end else begin
        kernel_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_flatten_fu_351_p2 == 1'd0) & (weight_0_vld_out == 1'b0)) & (tmp_fu_399_p1 == 2'd3) & (exitcond_flatten_fu_351_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        kernel_3_we0 = 1'b1;
    end else begin
        kernel_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state5)) | ((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | (~((exitcond_flatten_fu_351_p2 == 1'd0) & (weight_0_vld_out == 1'b0)) & (exitcond_flatten_fu_351_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        weight_0_ack_out = 1'b1;
    end else begin
        weight_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((weight_0_sel == 1'b1)) begin
        weight_0_data_out = weight_0_payload_B;
    end else begin
        weight_0_data_out = weight_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((exitcond_flatten_fu_351_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        weight_TDATA_blk_n = weight_0_state[1'd0];
    end else begin
        weight_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if ((~((exitcond_flatten_fu_351_p2 == 1'd0) & (weight_0_vld_out == 1'b0)) & (exitcond_flatten_fu_351_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((exitcond_flatten_fu_351_p2 == 1'd0) & (weight_0_vld_out == 1'b0)) & (exitcond_flatten_fu_351_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((1'b0 == ap_block_pp1_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_pp1_stage2 : begin
            if ((1'b0 == ap_block_pp1_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end
        end
        ap_ST_fsm_pp1_stage3 : begin
            if ((1'b0 == ap_block_pp1_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end
        end
        ap_ST_fsm_pp1_stage4 : begin
            if ((1'b0 == ap_block_pp1_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage4;
            end
        end
        ap_ST_fsm_pp1_stage5 : begin
            if ((1'b0 == ap_block_pp1_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage5;
            end
        end
        ap_ST_fsm_pp1_stage6 : begin
            if ((1'b0 == ap_block_pp1_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage6;
            end
        end
        ap_ST_fsm_pp1_stage7 : begin
            if ((1'b0 == ap_block_pp1_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage7;
            end
        end
        ap_ST_fsm_pp1_stage8 : begin
            if ((1'b0 == ap_block_pp1_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage8;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Bias_Data = Bias_Data_1_data_reg;

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp1_stage2 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp1_stage3 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp1_stage4 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp1_stage5 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp1_stage6 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp1_stage7 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp1_stage8 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((b_Data_1_ack_in == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((b_Data_1_ack_in == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage1_11001 = (((b_Data_1_ack_in == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1)) | ((b_Data_1_ack_in == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage1_subdone = (((b_Data_1_ack_in == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1)) | ((b_Data_1_ack_in == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)));
end

assign ap_block_pp1_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage2_11001 = ((b_Data_1_ack_in == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage2_subdone = ((b_Data_1_ack_in == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

assign ap_block_pp1_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage3_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage3_11001 = ((b_Data_1_ack_in == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage3_subdone = ((b_Data_1_ack_in == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

assign ap_block_pp1_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage4_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage4_11001 = ((b_Data_1_ack_in == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage4_subdone = ((b_Data_1_ack_in == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

assign ap_block_pp1_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage5_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage5_11001 = ((b_Data_1_ack_in == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage5_subdone = ((b_Data_1_ack_in == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

assign ap_block_pp1_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage6_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage6_11001 = ((b_Data_1_ack_in == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage6_subdone = ((b_Data_1_ack_in == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

assign ap_block_pp1_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage7_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage7_11001 = ((b_Data_1_ack_in == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage7_subdone = ((b_Data_1_ack_in == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

assign ap_block_pp1_stage8 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage8_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage8_11001 = ((b_Data_1_ack_in == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage8_subdone = ((b_Data_1_ack_in == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

assign ap_block_state10_pp1_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp1_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp1_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp1_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp1_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp1_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp1_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp1_stage1_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2 = ((exitcond_flatten_fu_351_p2 == 1'd0) & (weight_0_vld_out == 1'b0));
end

assign ap_block_state8_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign b_Data_1_ack_in = b_Data_1_state[1'd1];

assign b_Data_1_ack_out = b_Data_TREADY;

assign b_Data_1_load_A = (~b_Data_1_sel_wr & b_Data_1_state_cmp_full);

assign b_Data_1_load_B = (b_Data_1_state_cmp_full & b_Data_1_sel_wr);

assign b_Data_1_sel = b_Data_1_sel_rd;

assign b_Data_1_state_cmp_full = ((b_Data_1_state != 2'd1) ? 1'b1 : 1'b0);

assign b_Data_1_vld_out = b_Data_1_state[1'd0];

assign b_Data_TDATA = b_Data_1_data_out;

assign b_Data_TVALID = b_Data_1_state[1'd0];

assign exitcond_flatten_fu_351_p2 = ((indvar_flatten_reg_282 == 6'd36) ? 1'b1 : 1'b0);

assign exitcond_fu_363_p2 = ((n_reg_304 == 3'd4) ? 1'b1 : 1'b0);

assign i_s_fu_377_p2 = (4'd1 + i_reg_293);

assign indvar_flatten_next_fu_357_p2 = (indvar_flatten_reg_282 + 6'd1);

assign n_1_fu_403_p2 = (n_mid2_fu_369_p3 + 3'd1);

assign n_mid2_fu_369_p3 = ((exitcond_fu_363_p2[0:0] === 1'b1) ? 3'd0 : n_reg_304);

assign tmp_10_fu_506_p5 = {{{{kernel_3_load_7_reg_624}, {kernel_2_load_7_reg_619}}, {kernel_1_load_7_reg_614}}, {kernel_0_load_7_reg_609}};

assign tmp_11_fu_515_p5 = {{{{reg_327}, {reg_323}}, {reg_319}}, {reg_315}};

assign tmp_1_fu_409_p5 = {{{{weight_0_data_out}, {weight_read_2_reg_559}}, {weight_read_1_reg_554}}, {weight_read_reg_549}};

assign tmp_4_fu_493_p5 = {{{{reg_346}, {reg_341}}, {reg_336}}, {reg_331}};

assign tmp_5_fu_419_p5 = {{{{kernel_3_q0}, {kernel_2_q0}}, {kernel_1_q0}}, {kernel_0_q0}};

assign tmp_6_fu_432_p5 = {{{{reg_327}, {reg_323}}, {reg_319}}, {reg_315}};

assign tmp_7_fu_445_p5 = {{{{reg_327}, {reg_323}}, {reg_319}}, {reg_315}};

assign tmp_8_fu_458_p5 = {{{{reg_346}, {reg_341}}, {reg_336}}, {reg_331}};

assign tmp_9_fu_471_p5 = {{{{reg_327}, {reg_323}}, {reg_319}}, {reg_315}};

assign tmp_fu_399_p1 = n_mid2_fu_369_p3[1:0];

assign tmp_mid2_fu_391_p1 = tmp_mid2_v_fu_383_p3;

assign tmp_mid2_v_fu_383_p3 = ((exitcond_fu_363_p2[0:0] === 1'b1) ? i_s_fu_377_p2 : i_reg_293);

assign tmp_s_fu_484_p5 = {{{{kernel_3_load_5_reg_599}, {kernel_2_load_5_reg_594}}, {kernel_1_load_5_reg_589}}, {kernel_0_load_5_reg_584}};

assign weight_0_ack_in = weight_0_state[1'd1];

assign weight_0_load_A = (weight_0_state_cmp_full & ~weight_0_sel_wr);

assign weight_0_load_B = (weight_0_state_cmp_full & weight_0_sel_wr);

assign weight_0_sel = weight_0_sel_rd;

assign weight_0_state_cmp_full = ((weight_0_state != 2'd1) ? 1'b1 : 1'b0);

assign weight_0_vld_in = weight_TVALID;

assign weight_0_vld_out = weight_0_state[1'd0];

assign weight_TREADY = weight_0_state[1'd1];

endmodule //Layer1_Kernel
