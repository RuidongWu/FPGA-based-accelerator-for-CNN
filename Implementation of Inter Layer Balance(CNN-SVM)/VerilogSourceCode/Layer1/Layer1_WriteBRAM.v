// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Layer1_WriteBRAM,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xazu3eg-sfvc784-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.364000,HLS_SYN_LAT=398,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=309,HLS_SYN_LUT=406,HLS_VERSION=2018_3}" *)

module Layer1_WriteBRAM (
        ap_clk,
        ap_rst_n,
        feature_Data_TDATA,
        feature_Data_TVALID,
        feature_Data_TREADY,
        f_Data_address0,
        f_Data_ce0,
        f_Data_we0,
        f_Data_d0,
        full_flag,
        full_flag_ap_vld,
        full_flag_ap_ack
);

parameter    ap_ST_fsm_state1 = 19'd1;
parameter    ap_ST_fsm_pp0_stage0 = 19'd2;
parameter    ap_ST_fsm_pp0_stage1 = 19'd4;
parameter    ap_ST_fsm_pp0_stage2 = 19'd8;
parameter    ap_ST_fsm_pp0_stage3 = 19'd16;
parameter    ap_ST_fsm_pp0_stage4 = 19'd32;
parameter    ap_ST_fsm_pp0_stage5 = 19'd64;
parameter    ap_ST_fsm_pp0_stage6 = 19'd128;
parameter    ap_ST_fsm_state10 = 19'd256;
parameter    ap_ST_fsm_state11 = 19'd512;
parameter    ap_ST_fsm_pp1_stage0 = 19'd1024;
parameter    ap_ST_fsm_pp1_stage1 = 19'd2048;
parameter    ap_ST_fsm_pp1_stage2 = 19'd4096;
parameter    ap_ST_fsm_pp1_stage3 = 19'd8192;
parameter    ap_ST_fsm_pp1_stage4 = 19'd16384;
parameter    ap_ST_fsm_pp1_stage5 = 19'd32768;
parameter    ap_ST_fsm_pp1_stage6 = 19'd65536;
parameter    ap_ST_fsm_state20 = 19'd131072;
parameter    ap_ST_fsm_state21 = 19'd262144;

input   ap_clk;
input   ap_rst_n;
input  [31:0] feature_Data_TDATA;
input   feature_Data_TVALID;
output   feature_Data_TREADY;
output  [5:0] f_Data_address0;
output   f_Data_ce0;
output   f_Data_we0;
output  [223:0] f_Data_d0;
output   full_flag;
output   full_flag_ap_vld;
input   full_flag_ap_ack;

reg[5:0] f_Data_address0;
reg f_Data_ce0;
reg f_Data_we0;
reg[223:0] f_Data_d0;

 reg    ap_rst_n_inv;
reg   [31:0] feature_Data_0_data_out;
wire    feature_Data_0_vld_in;
wire    feature_Data_0_vld_out;
wire    feature_Data_0_ack_in;
reg    feature_Data_0_ack_out;
reg   [31:0] feature_Data_0_payload_A;
reg   [31:0] feature_Data_0_payload_B;
reg    feature_Data_0_sel_rd;
reg    feature_Data_0_sel_wr;
wire    feature_Data_0_sel;
wire    feature_Data_0_load_A;
wire    feature_Data_0_load_B;
reg   [1:0] feature_Data_0_state;
wire    feature_Data_0_state_cmp_full;
reg    full_flag_1_data_reg;
reg    full_flag_1_data_in;
reg    full_flag_1_vld_reg;
reg    full_flag_1_vld_in;
reg    full_flag_1_ack_in;
wire    full_flag_1_ack_out;
reg    feature_Data_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [18:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] exitcond7_fu_158_p2;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg   [0:0] exitcond7_reg_230;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_pp0_stage5;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_pp0_stage6;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_pp1_stage0;
wire   [0:0] exitcond2_fu_194_p2;
wire    ap_CS_fsm_pp1_stage1;
wire    ap_block_pp1_stage1;
reg   [0:0] exitcond2_reg_249;
wire    ap_CS_fsm_pp1_stage2;
wire    ap_block_pp1_stage2;
wire    ap_CS_fsm_pp1_stage3;
wire    ap_block_pp1_stage3;
wire    ap_CS_fsm_pp1_stage4;
wire    ap_block_pp1_stage4;
wire    ap_CS_fsm_pp1_stage5;
wire    ap_block_pp1_stage5;
wire    ap_CS_fsm_pp1_stage6;
wire    ap_block_pp1_stage6;
reg    full_flag_blk_n;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
reg   [4:0] i_reg_110;
reg   [5:0] i1_reg_122;
reg   [31:0] reg_134;
reg    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state9_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
reg    ap_block_state12_pp1_stage0_iter0;
wire    ap_block_state19_pp1_stage0_iter1;
reg    ap_block_pp1_stage0_11001;
reg   [31:0] reg_138;
reg    ap_block_state3_pp0_stage1_iter0;
reg    ap_block_pp0_stage1_11001;
reg    ap_block_state13_pp1_stage1_iter0;
reg    ap_block_pp1_stage1_11001;
reg   [31:0] reg_142;
reg    ap_block_state4_pp0_stage2_iter0;
reg    ap_block_pp0_stage2_11001;
reg    ap_block_state14_pp1_stage2_iter0;
reg    ap_block_pp1_stage2_11001;
reg   [31:0] reg_146;
reg    ap_block_state5_pp0_stage3_iter0;
reg    ap_block_pp0_stage3_11001;
reg    ap_block_state15_pp1_stage3_iter0;
reg    ap_block_pp1_stage3_11001;
reg   [31:0] reg_150;
reg    ap_block_state6_pp0_stage4_iter0;
reg    ap_block_pp0_stage4_11001;
reg    ap_block_state16_pp1_stage4_iter0;
reg    ap_block_pp1_stage4_11001;
reg   [31:0] reg_154;
reg    ap_block_state7_pp0_stage5_iter0;
reg    ap_block_pp0_stage5_11001;
reg    ap_block_state17_pp1_stage5_iter0;
reg    ap_block_pp1_stage5_11001;
wire   [4:0] i_1_fu_164_p2;
reg   [4:0] i_1_reg_234;
reg    ap_block_state8_pp0_stage6_iter0;
reg    ap_block_pp0_stage6_11001;
wire   [223:0] tmp_3_fu_175_p8;
reg    ap_block_state18_pp1_stage6_iter0;
reg    ap_block_pp1_stage6_11001;
wire   [223:0] tmp_5_fu_205_p8;
wire   [5:0] i_2_fu_224_p2;
reg   [5:0] i_2_reg_263;
wire    ap_CS_fsm_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage6_subdone;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state12;
reg    ap_enable_reg_pp1_iter1;
reg    ap_block_pp1_stage6_subdone;
reg   [4:0] ap_phi_mux_i_phi_fu_114_p4;
reg   [5:0] ap_phi_mux_i1_phi_fu_126_p4;
wire   [63:0] tmp_fu_170_p1;
wire   [63:0] tmp_1_fu_200_p1;
reg   [18:0] ap_NS_fsm;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage2_subdone;
reg    ap_block_pp0_stage3_subdone;
reg    ap_block_pp0_stage4_subdone;
reg    ap_block_pp0_stage5_subdone;
reg    ap_block_pp1_stage1_subdone;
reg    ap_block_pp1_stage2_subdone;
reg    ap_block_pp1_stage3_subdone;
reg    ap_block_pp1_stage4_subdone;
reg    ap_block_pp1_stage5_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 feature_Data_0_sel_rd = 1'b0;
#0 feature_Data_0_sel_wr = 1'b0;
#0 feature_Data_0_state = 2'd0;
#0 full_flag_1_data_reg = 1'b0;
#0 full_flag_1_vld_reg = 1'b0;
#0 ap_CS_fsm = 19'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state1)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage6_subdone) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state12) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state11) & (full_flag_1_ack_in == 1'b1))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp1_stage6_subdone) & (1'b1 == ap_CS_fsm_pp1_stage6)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((1'b1 == ap_CS_fsm_state11) & (full_flag_1_ack_in == 1'b1))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        feature_Data_0_sel_rd <= 1'b0;
    end else begin
        if (((feature_Data_0_ack_out == 1'b1) & (feature_Data_0_vld_out == 1'b1))) begin
            feature_Data_0_sel_rd <= ~feature_Data_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        feature_Data_0_sel_wr <= 1'b0;
    end else begin
        if (((feature_Data_0_ack_in == 1'b1) & (feature_Data_0_vld_in == 1'b1))) begin
            feature_Data_0_sel_wr <= ~feature_Data_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        feature_Data_0_state <= 2'd0;
    end else begin
        if ((((feature_Data_0_state == 2'd2) & (feature_Data_0_vld_in == 1'b0)) | ((feature_Data_0_state == 2'd3) & (feature_Data_0_vld_in == 1'b0) & (feature_Data_0_ack_out == 1'b1)))) begin
            feature_Data_0_state <= 2'd2;
        end else if ((((feature_Data_0_state == 2'd1) & (feature_Data_0_ack_out == 1'b0)) | ((feature_Data_0_state == 2'd3) & (feature_Data_0_ack_out == 1'b0) & (feature_Data_0_vld_in == 1'b1)))) begin
            feature_Data_0_state <= 2'd1;
        end else if (((~((feature_Data_0_vld_in == 1'b0) & (feature_Data_0_ack_out == 1'b1)) & ~((feature_Data_0_ack_out == 1'b0) & (feature_Data_0_vld_in == 1'b1)) & (feature_Data_0_state == 2'd3)) | ((feature_Data_0_state == 2'd1) & (feature_Data_0_ack_out == 1'b1)) | ((feature_Data_0_state == 2'd2) & (feature_Data_0_vld_in == 1'b1)))) begin
            feature_Data_0_state <= 2'd3;
        end else begin
            feature_Data_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((full_flag_1_vld_reg == 1'b0) & (full_flag_1_vld_in == 1'b1))) begin
        full_flag_1_vld_reg <= 1'b1;
    end else if (((full_flag_1_vld_in == 1'b0) & (full_flag_1_ack_out == 1'b1) & (full_flag_1_vld_reg == 1'b1))) begin
        full_flag_1_vld_reg <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_reg_249 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i1_reg_122 <= i_2_reg_263;
    end else if (((1'b1 == ap_CS_fsm_state11) & (full_flag_1_ack_in == 1'b1))) begin
        i1_reg_122 <= 6'd28;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond7_reg_230 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_110 <= i_1_reg_234;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        i_reg_110 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        exitcond2_reg_249 <= exitcond2_fu_194_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond7_reg_230 <= exitcond7_fu_158_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((feature_Data_0_load_A == 1'b1)) begin
        feature_Data_0_payload_A <= feature_Data_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((feature_Data_0_load_B == 1'b1)) begin
        feature_Data_0_payload_B <= feature_Data_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((((full_flag_1_vld_reg == 1'b0) & (full_flag_1_vld_in == 1'b1)) | ((full_flag_1_ack_out == 1'b1) & (full_flag_1_vld_in == 1'b1) & (full_flag_1_vld_reg == 1'b1)))) begin
        full_flag_1_data_reg <= full_flag_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_1_reg_234 <= i_1_fu_164_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_reg_249 == 1'd0) & (1'b0 == ap_block_pp1_stage6_11001) & (1'b1 == ap_CS_fsm_pp1_stage6) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        i_2_reg_263 <= i_2_fu_224_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((exitcond2_fu_194_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((exitcond7_fu_158_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        reg_134 <= feature_Data_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((((exitcond2_reg_249 == 1'd0) & (1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((exitcond7_reg_230 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        reg_138 <= feature_Data_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((((exitcond2_reg_249 == 1'd0) & (1'b0 == ap_block_pp1_stage2_11001) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((exitcond7_reg_230 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        reg_142 <= feature_Data_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((((exitcond2_reg_249 == 1'd0) & (1'b0 == ap_block_pp1_stage3_11001) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((exitcond7_reg_230 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        reg_146 <= feature_Data_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((((exitcond2_reg_249 == 1'd0) & (1'b0 == ap_block_pp1_stage4_11001) & (1'b1 == ap_CS_fsm_pp1_stage4) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((exitcond7_reg_230 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        reg_150 <= feature_Data_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((((exitcond2_reg_249 == 1'd0) & (1'b0 == ap_block_pp1_stage5_11001) & (1'b1 == ap_CS_fsm_pp1_stage5) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((exitcond7_reg_230 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        reg_154 <= feature_Data_0_data_out;
    end
end

always @ (*) begin
    if ((exitcond7_fu_158_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond2_fu_194_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state12 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state12 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond2_reg_249 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_i1_phi_fu_126_p4 = i_2_reg_263;
    end else begin
        ap_phi_mux_i1_phi_fu_126_p4 = i1_reg_122;
    end
end

always @ (*) begin
    if (((exitcond7_reg_230 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_i_phi_fu_114_p4 = i_1_reg_234;
    end else begin
        ap_phi_mux_i_phi_fu_114_p4 = i_reg_110;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage6) & (1'b1 == ap_CS_fsm_pp1_stage6) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        f_Data_address0 = tmp_1_fu_200_p1;
    end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        f_Data_address0 = tmp_fu_170_p1;
    end else begin
        f_Data_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage6_11001) & (1'b1 == ap_CS_fsm_pp1_stage6) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        f_Data_ce0 = 1'b1;
    end else begin
        f_Data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage6) & (1'b1 == ap_CS_fsm_pp1_stage6) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        f_Data_d0 = tmp_5_fu_205_p8;
    end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        f_Data_d0 = tmp_3_fu_175_p8;
    end else begin
        f_Data_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((exitcond2_reg_249 == 1'd0) & (1'b0 == ap_block_pp1_stage6_11001) & (1'b1 == ap_CS_fsm_pp1_stage6) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((exitcond7_reg_230 == 1'd0) & (1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        f_Data_we0 = 1'b1;
    end else begin
        f_Data_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond2_reg_249 == 1'd0) & (1'b0 == ap_block_pp1_stage6_11001) & (1'b1 == ap_CS_fsm_pp1_stage6) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((exitcond2_reg_249 == 1'd0) & (1'b0 == ap_block_pp1_stage5_11001) & (1'b1 == ap_CS_fsm_pp1_stage5) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((exitcond2_reg_249 == 1'd0) & (1'b0 == ap_block_pp1_stage4_11001) & (1'b1 == ap_CS_fsm_pp1_stage4) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((exitcond2_reg_249 == 1'd0) & (1'b0 == ap_block_pp1_stage3_11001) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((exitcond2_reg_249 == 1'd0) & (1'b0 == ap_block_pp1_stage2_11001) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((exitcond2_reg_249 == 1'd0) & (1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((exitcond2_fu_194_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((exitcond7_reg_230 == 1'd0) & (1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((exitcond7_reg_230 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((exitcond7_reg_230 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((exitcond7_reg_230 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((exitcond7_reg_230 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((exitcond7_reg_230 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((exitcond7_fu_158_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        feature_Data_0_ack_out = 1'b1;
    end else begin
        feature_Data_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((feature_Data_0_sel == 1'b1)) begin
        feature_Data_0_data_out = feature_Data_0_payload_B;
    end else begin
        feature_Data_0_data_out = feature_Data_0_payload_A;
    end
end

always @ (*) begin
    if ((((exitcond2_reg_249 == 1'd0) & (1'b0 == ap_block_pp1_stage6) & (1'b1 == ap_CS_fsm_pp1_stage6) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((exitcond2_reg_249 == 1'd0) & (1'b0 == ap_block_pp1_stage5) & (1'b1 == ap_CS_fsm_pp1_stage5) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((exitcond2_reg_249 == 1'd0) & (1'b0 == ap_block_pp1_stage4) & (1'b1 == ap_CS_fsm_pp1_stage4) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((exitcond2_reg_249 == 1'd0) & (1'b0 == ap_block_pp1_stage3) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((exitcond2_reg_249 == 1'd0) & (1'b0 == ap_block_pp1_stage2) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((exitcond2_reg_249 == 1'd0) & (1'b0 == ap_block_pp1_stage1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((exitcond2_fu_194_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((exitcond7_reg_230 == 1'd0) & (1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((exitcond7_reg_230 == 1'd0) & (1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((exitcond7_reg_230 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4)) | ((exitcond7_reg_230 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3)) | ((exitcond7_reg_230 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2)) | ((exitcond7_reg_230 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1)) | ((exitcond7_fu_158_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)))) begin
        feature_Data_TDATA_blk_n = feature_Data_0_state[1'd0];
    end else begin
        feature_Data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((full_flag_1_vld_reg == 1'b0) | ((full_flag_1_ack_out == 1'b1) & (full_flag_1_vld_reg == 1'b1)))) begin
        full_flag_1_ack_in = 1'b1;
    end else begin
        full_flag_1_ack_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        full_flag_1_data_in = 1'd0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        full_flag_1_data_in = 1'd1;
    end else begin
        full_flag_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state20) & (full_flag_1_ack_in == 1'b1)) | ((1'b1 == ap_CS_fsm_state10) & (full_flag_1_ack_in == 1'b1)))) begin
        full_flag_1_vld_in = 1'b1;
    end else begin
        full_flag_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        full_flag_blk_n = full_flag_1_ack_in;
    end else begin
        full_flag_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond7_fu_158_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((exitcond7_fu_158_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (full_flag_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (full_flag_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((exitcond2_fu_194_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1)) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if (((exitcond2_fu_194_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((1'b0 == ap_block_pp1_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_pp1_stage2 : begin
            if ((1'b0 == ap_block_pp1_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end
        end
        ap_ST_fsm_pp1_stage3 : begin
            if ((1'b0 == ap_block_pp1_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end
        end
        ap_ST_fsm_pp1_stage4 : begin
            if ((1'b0 == ap_block_pp1_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage4;
            end
        end
        ap_ST_fsm_pp1_stage5 : begin
            if ((1'b0 == ap_block_pp1_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage5;
            end
        end
        ap_ST_fsm_pp1_stage6 : begin
            if ((1'b0 == ap_block_pp1_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage6;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((1'b1 == ap_CS_fsm_state20) & (full_flag_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            if (((1'b1 == ap_CS_fsm_state21) & (full_flag_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp1_stage2 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp1_stage3 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp1_stage4 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp1_stage5 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_pp1_stage6 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd18];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((exitcond7_fu_158_p2 == 1'd0) & (feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((exitcond7_fu_158_p2 == 1'd0) & (feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((exitcond7_reg_230 == 1'd0) & (feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((exitcond7_reg_230 == 1'd0) & (feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((exitcond7_reg_230 == 1'd0) & (feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((exitcond7_reg_230 == 1'd0) & (feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((exitcond7_reg_230 == 1'd0) & (feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((exitcond7_reg_230 == 1'd0) & (feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_11001 = ((exitcond7_reg_230 == 1'd0) & (feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage4_subdone = ((exitcond7_reg_230 == 1'd0) & (feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage5_11001 = ((exitcond7_reg_230 == 1'd0) & (feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage5_subdone = ((exitcond7_reg_230 == 1'd0) & (feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage6_11001 = ((exitcond7_reg_230 == 1'd0) & (feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage6_subdone = ((exitcond7_reg_230 == 1'd0) & (feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((exitcond2_fu_194_p2 == 1'd0) & (feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((exitcond2_fu_194_p2 == 1'd0) & (feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage1_11001 = ((exitcond2_reg_249 == 1'd0) & (feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage1_subdone = ((exitcond2_reg_249 == 1'd0) & (feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

assign ap_block_pp1_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage2_11001 = ((exitcond2_reg_249 == 1'd0) & (feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage2_subdone = ((exitcond2_reg_249 == 1'd0) & (feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

assign ap_block_pp1_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage3_11001 = ((exitcond2_reg_249 == 1'd0) & (feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage3_subdone = ((exitcond2_reg_249 == 1'd0) & (feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

assign ap_block_pp1_stage4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage4_11001 = ((exitcond2_reg_249 == 1'd0) & (feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage4_subdone = ((exitcond2_reg_249 == 1'd0) & (feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

assign ap_block_pp1_stage5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage5_11001 = ((exitcond2_reg_249 == 1'd0) & (feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage5_subdone = ((exitcond2_reg_249 == 1'd0) & (feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

assign ap_block_pp1_stage6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage6_11001 = ((exitcond2_reg_249 == 1'd0) & (feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage6_subdone = ((exitcond2_reg_249 == 1'd0) & (feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_state12_pp1_stage0_iter0 = ((exitcond2_fu_194_p2 == 1'd0) & (feature_Data_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state13_pp1_stage1_iter0 = ((exitcond2_reg_249 == 1'd0) & (feature_Data_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state14_pp1_stage2_iter0 = ((exitcond2_reg_249 == 1'd0) & (feature_Data_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state15_pp1_stage3_iter0 = ((exitcond2_reg_249 == 1'd0) & (feature_Data_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state16_pp1_stage4_iter0 = ((exitcond2_reg_249 == 1'd0) & (feature_Data_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state17_pp1_stage5_iter0 = ((exitcond2_reg_249 == 1'd0) & (feature_Data_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state18_pp1_stage6_iter0 = ((exitcond2_reg_249 == 1'd0) & (feature_Data_0_vld_out == 1'b0));
end

assign ap_block_state19_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((exitcond7_fu_158_p2 == 1'd0) & (feature_Data_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage1_iter0 = ((exitcond7_reg_230 == 1'd0) & (feature_Data_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage2_iter0 = ((exitcond7_reg_230 == 1'd0) & (feature_Data_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state5_pp0_stage3_iter0 = ((exitcond7_reg_230 == 1'd0) & (feature_Data_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state6_pp0_stage4_iter0 = ((exitcond7_reg_230 == 1'd0) & (feature_Data_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state7_pp0_stage5_iter0 = ((exitcond7_reg_230 == 1'd0) & (feature_Data_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state8_pp0_stage6_iter0 = ((exitcond7_reg_230 == 1'd0) & (feature_Data_0_vld_out == 1'b0));
end

assign ap_block_state9_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond2_fu_194_p2 = ((ap_phi_mux_i1_phi_fu_126_p4 == 6'd56) ? 1'b1 : 1'b0);

assign exitcond7_fu_158_p2 = ((ap_phi_mux_i_phi_fu_114_p4 == 5'd28) ? 1'b1 : 1'b0);

assign feature_Data_0_ack_in = feature_Data_0_state[1'd1];

assign feature_Data_0_load_A = (feature_Data_0_state_cmp_full & ~feature_Data_0_sel_wr);

assign feature_Data_0_load_B = (feature_Data_0_state_cmp_full & feature_Data_0_sel_wr);

assign feature_Data_0_sel = feature_Data_0_sel_rd;

assign feature_Data_0_state_cmp_full = ((feature_Data_0_state != 2'd1) ? 1'b1 : 1'b0);

assign feature_Data_0_vld_in = feature_Data_TVALID;

assign feature_Data_0_vld_out = feature_Data_0_state[1'd0];

assign feature_Data_TREADY = feature_Data_0_state[1'd1];

assign full_flag = full_flag_1_data_reg;

assign full_flag_1_ack_out = full_flag_ap_ack;

assign full_flag_ap_vld = full_flag_1_vld_reg;

assign i_1_fu_164_p2 = (ap_phi_mux_i_phi_fu_114_p4 + 5'd1);

assign i_2_fu_224_p2 = (i1_reg_122 + 6'd1);

assign tmp_1_fu_200_p1 = i1_reg_122;

assign tmp_3_fu_175_p8 = {{{{{{{feature_Data_0_data_out}, {reg_154}}, {reg_150}}, {reg_146}}, {reg_142}}, {reg_138}}, {reg_134}};

assign tmp_5_fu_205_p8 = {{{{{{{feature_Data_0_data_out}, {reg_154}}, {reg_150}}, {reg_146}}, {reg_142}}, {reg_138}}, {reg_134}};

assign tmp_fu_170_p1 = i_reg_110;

endmodule //Layer1_WriteBRAM
