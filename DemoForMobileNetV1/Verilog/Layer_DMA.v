// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Layer_DMA,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu15eg-ffvb1156-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.389000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=812,HLS_SYN_LUT=1096,HLS_VERSION=2018_3}" *)

module Layer_DMA (
        ap_clk,
        ap_rst_n,
        WeightDMA_V_V_TDATA,
        WeightDMA_V_V_TVALID,
        WeightDMA_V_V_TREADY,
        DMA7_V_V_TDATA,
        DMA7_V_V_TVALID,
        DMA7_V_V_TREADY,
        DMA8_V_V_TDATA,
        DMA8_V_V_TVALID,
        DMA8_V_V_TREADY,
        DMA9_V_V_TDATA,
        DMA9_V_V_TVALID,
        DMA9_V_V_TREADY,
        DMA10_V_V_TDATA,
        DMA10_V_V_TVALID,
        DMA10_V_V_TREADY,
        DMA11_V_V_TDATA,
        DMA11_V_V_TVALID,
        DMA11_V_V_TREADY,
        DMA12_V_V_TDATA,
        DMA12_V_V_TVALID,
        DMA12_V_V_TREADY,
        DMA13_V_V_TDATA,
        DMA13_V_V_TVALID,
        DMA13_V_V_TREADY,
        DMA14_V_V_TDATA,
        DMA14_V_V_TVALID,
        DMA14_V_V_TREADY
);

parameter    ap_ST_fsm_state1 = 18'd1;
parameter    ap_ST_fsm_pp0_stage0 = 18'd2;
parameter    ap_ST_fsm_state5 = 18'd4;
parameter    ap_ST_fsm_pp1_stage0 = 18'd8;
parameter    ap_ST_fsm_state9 = 18'd16;
parameter    ap_ST_fsm_pp2_stage0 = 18'd32;
parameter    ap_ST_fsm_state13 = 18'd64;
parameter    ap_ST_fsm_pp3_stage0 = 18'd128;
parameter    ap_ST_fsm_state17 = 18'd256;
parameter    ap_ST_fsm_pp4_stage0 = 18'd512;
parameter    ap_ST_fsm_state21 = 18'd1024;
parameter    ap_ST_fsm_pp5_stage0 = 18'd2048;
parameter    ap_ST_fsm_state25 = 18'd4096;
parameter    ap_ST_fsm_pp6_stage0 = 18'd8192;
parameter    ap_ST_fsm_state29 = 18'd16384;
parameter    ap_ST_fsm_pp7_stage0 = 18'd32768;
parameter    ap_ST_fsm_state33 = 18'd65536;
parameter    ap_ST_fsm_state34 = 18'd131072;

input   ap_clk;
input   ap_rst_n;
input  [31:0] WeightDMA_V_V_TDATA;
input   WeightDMA_V_V_TVALID;
output   WeightDMA_V_V_TREADY;
output  [31:0] DMA7_V_V_TDATA;
output   DMA7_V_V_TVALID;
input   DMA7_V_V_TREADY;
output  [31:0] DMA8_V_V_TDATA;
output   DMA8_V_V_TVALID;
input   DMA8_V_V_TREADY;
output  [31:0] DMA9_V_V_TDATA;
output   DMA9_V_V_TVALID;
input   DMA9_V_V_TREADY;
output  [31:0] DMA10_V_V_TDATA;
output   DMA10_V_V_TVALID;
input   DMA10_V_V_TREADY;
output  [31:0] DMA11_V_V_TDATA;
output   DMA11_V_V_TVALID;
input   DMA11_V_V_TREADY;
output  [31:0] DMA12_V_V_TDATA;
output   DMA12_V_V_TVALID;
input   DMA12_V_V_TREADY;
output  [31:0] DMA13_V_V_TDATA;
output   DMA13_V_V_TVALID;
input   DMA13_V_V_TREADY;
output  [31:0] DMA14_V_V_TDATA;
output   DMA14_V_V_TVALID;
input   DMA14_V_V_TREADY;

 reg    ap_rst_n_inv;
reg   [31:0] WeightDMA_V_V_0_data_out;
wire    WeightDMA_V_V_0_vld_in;
wire    WeightDMA_V_V_0_vld_out;
wire    WeightDMA_V_V_0_ack_in;
reg    WeightDMA_V_V_0_ack_out;
reg   [31:0] WeightDMA_V_V_0_payload_A;
reg   [31:0] WeightDMA_V_V_0_payload_B;
reg    WeightDMA_V_V_0_sel_rd;
reg    WeightDMA_V_V_0_sel_wr;
wire    WeightDMA_V_V_0_sel;
wire    WeightDMA_V_V_0_load_A;
wire    WeightDMA_V_V_0_load_B;
reg   [1:0] WeightDMA_V_V_0_state;
wire    WeightDMA_V_V_0_state_cmp_full;
reg   [31:0] DMA7_V_V_1_data_out;
reg    DMA7_V_V_1_vld_in;
wire    DMA7_V_V_1_vld_out;
wire    DMA7_V_V_1_ack_in;
wire    DMA7_V_V_1_ack_out;
reg   [31:0] DMA7_V_V_1_payload_A;
reg   [31:0] DMA7_V_V_1_payload_B;
reg    DMA7_V_V_1_sel_rd;
reg    DMA7_V_V_1_sel_wr;
wire    DMA7_V_V_1_sel;
wire    DMA7_V_V_1_load_A;
wire    DMA7_V_V_1_load_B;
reg   [1:0] DMA7_V_V_1_state;
wire    DMA7_V_V_1_state_cmp_full;
reg   [31:0] DMA8_V_V_1_data_out;
reg    DMA8_V_V_1_vld_in;
wire    DMA8_V_V_1_vld_out;
wire    DMA8_V_V_1_ack_in;
wire    DMA8_V_V_1_ack_out;
reg   [31:0] DMA8_V_V_1_payload_A;
reg   [31:0] DMA8_V_V_1_payload_B;
reg    DMA8_V_V_1_sel_rd;
reg    DMA8_V_V_1_sel_wr;
wire    DMA8_V_V_1_sel;
wire    DMA8_V_V_1_load_A;
wire    DMA8_V_V_1_load_B;
reg   [1:0] DMA8_V_V_1_state;
wire    DMA8_V_V_1_state_cmp_full;
reg   [31:0] DMA9_V_V_1_data_out;
reg    DMA9_V_V_1_vld_in;
wire    DMA9_V_V_1_vld_out;
wire    DMA9_V_V_1_ack_in;
wire    DMA9_V_V_1_ack_out;
reg   [31:0] DMA9_V_V_1_payload_A;
reg   [31:0] DMA9_V_V_1_payload_B;
reg    DMA9_V_V_1_sel_rd;
reg    DMA9_V_V_1_sel_wr;
wire    DMA9_V_V_1_sel;
wire    DMA9_V_V_1_load_A;
wire    DMA9_V_V_1_load_B;
reg   [1:0] DMA9_V_V_1_state;
wire    DMA9_V_V_1_state_cmp_full;
reg   [31:0] DMA10_V_V_1_data_out;
reg    DMA10_V_V_1_vld_in;
wire    DMA10_V_V_1_vld_out;
wire    DMA10_V_V_1_ack_in;
wire    DMA10_V_V_1_ack_out;
reg   [31:0] DMA10_V_V_1_payload_A;
reg   [31:0] DMA10_V_V_1_payload_B;
reg    DMA10_V_V_1_sel_rd;
reg    DMA10_V_V_1_sel_wr;
wire    DMA10_V_V_1_sel;
wire    DMA10_V_V_1_load_A;
wire    DMA10_V_V_1_load_B;
reg   [1:0] DMA10_V_V_1_state;
wire    DMA10_V_V_1_state_cmp_full;
reg   [31:0] DMA11_V_V_1_data_out;
reg    DMA11_V_V_1_vld_in;
wire    DMA11_V_V_1_vld_out;
wire    DMA11_V_V_1_ack_in;
wire    DMA11_V_V_1_ack_out;
reg   [31:0] DMA11_V_V_1_payload_A;
reg   [31:0] DMA11_V_V_1_payload_B;
reg    DMA11_V_V_1_sel_rd;
reg    DMA11_V_V_1_sel_wr;
wire    DMA11_V_V_1_sel;
wire    DMA11_V_V_1_load_A;
wire    DMA11_V_V_1_load_B;
reg   [1:0] DMA11_V_V_1_state;
wire    DMA11_V_V_1_state_cmp_full;
reg   [31:0] DMA12_V_V_1_data_out;
reg    DMA12_V_V_1_vld_in;
wire    DMA12_V_V_1_vld_out;
wire    DMA12_V_V_1_ack_in;
wire    DMA12_V_V_1_ack_out;
reg   [31:0] DMA12_V_V_1_payload_A;
reg   [31:0] DMA12_V_V_1_payload_B;
reg    DMA12_V_V_1_sel_rd;
reg    DMA12_V_V_1_sel_wr;
wire    DMA12_V_V_1_sel;
wire    DMA12_V_V_1_load_A;
wire    DMA12_V_V_1_load_B;
reg   [1:0] DMA12_V_V_1_state;
wire    DMA12_V_V_1_state_cmp_full;
reg   [31:0] DMA13_V_V_1_data_out;
reg    DMA13_V_V_1_vld_in;
wire    DMA13_V_V_1_vld_out;
wire    DMA13_V_V_1_ack_in;
wire    DMA13_V_V_1_ack_out;
reg   [31:0] DMA13_V_V_1_payload_A;
reg   [31:0] DMA13_V_V_1_payload_B;
reg    DMA13_V_V_1_sel_rd;
reg    DMA13_V_V_1_sel_wr;
wire    DMA13_V_V_1_sel;
wire    DMA13_V_V_1_load_A;
wire    DMA13_V_V_1_load_B;
reg   [1:0] DMA13_V_V_1_state;
wire    DMA13_V_V_1_state_cmp_full;
reg   [31:0] DMA14_V_V_1_data_out;
reg    DMA14_V_V_1_vld_in;
wire    DMA14_V_V_1_vld_out;
wire    DMA14_V_V_1_ack_in;
wire    DMA14_V_V_1_ack_out;
reg   [31:0] DMA14_V_V_1_payload_A;
reg   [31:0] DMA14_V_V_1_payload_B;
reg    DMA14_V_V_1_sel_rd;
reg    DMA14_V_V_1_sel_wr;
wire    DMA14_V_V_1_sel;
wire    DMA14_V_V_1_load_A;
wire    DMA14_V_V_1_load_B;
reg   [1:0] DMA14_V_V_1_state;
wire    DMA14_V_V_1_state_cmp_full;
reg    WeightDMA_V_V_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [17:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] tmp_fu_262_p2;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_pp1_stage0;
wire   [0:0] tmp_4_fu_274_p2;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_pp2_stage0;
wire   [0:0] tmp_8_fu_286_p2;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter0;
wire    ap_block_pp3_stage0;
wire   [0:0] tmp_s_fu_298_p2;
wire    ap_CS_fsm_pp4_stage0;
reg    ap_enable_reg_pp4_iter0;
wire    ap_block_pp4_stage0;
wire   [0:0] tmp_1_fu_310_p2;
wire    ap_CS_fsm_pp5_stage0;
reg    ap_enable_reg_pp5_iter0;
wire    ap_block_pp5_stage0;
wire   [0:0] tmp_2_fu_322_p2;
wire    ap_CS_fsm_pp6_stage0;
reg    ap_enable_reg_pp6_iter0;
wire    ap_block_pp6_stage0;
wire   [0:0] tmp_3_fu_334_p2;
wire    ap_CS_fsm_pp7_stage0;
reg    ap_enable_reg_pp7_iter0;
wire    ap_block_pp7_stage0;
wire   [0:0] tmp_5_fu_346_p2;
reg    DMA7_V_V_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] tmp_reg_358;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] tmp_reg_358_pp0_iter1_reg;
reg    DMA8_V_V_TDATA_blk_n;
reg    ap_enable_reg_pp1_iter1;
reg   [0:0] tmp_4_reg_367;
reg    ap_enable_reg_pp1_iter2;
reg   [0:0] tmp_4_reg_367_pp1_iter1_reg;
reg    DMA9_V_V_TDATA_blk_n;
reg    ap_enable_reg_pp2_iter1;
reg   [0:0] tmp_8_reg_376;
reg    ap_enable_reg_pp2_iter2;
reg   [0:0] tmp_8_reg_376_pp2_iter1_reg;
reg    DMA10_V_V_TDATA_blk_n;
reg    ap_enable_reg_pp3_iter1;
reg   [0:0] tmp_s_reg_385;
reg    ap_enable_reg_pp3_iter2;
reg   [0:0] tmp_s_reg_385_pp3_iter1_reg;
reg    DMA11_V_V_TDATA_blk_n;
reg    ap_enable_reg_pp4_iter1;
reg   [0:0] tmp_1_reg_394;
reg    ap_enable_reg_pp4_iter2;
reg   [0:0] tmp_1_reg_394_pp4_iter1_reg;
reg    DMA12_V_V_TDATA_blk_n;
reg    ap_enable_reg_pp5_iter1;
reg   [0:0] tmp_2_reg_403;
reg    ap_enable_reg_pp5_iter2;
reg   [0:0] tmp_2_reg_403_pp5_iter1_reg;
reg    DMA13_V_V_TDATA_blk_n;
reg    ap_enable_reg_pp6_iter1;
reg   [0:0] tmp_3_reg_412;
reg    ap_enable_reg_pp6_iter2;
reg   [0:0] tmp_3_reg_412_pp6_iter1_reg;
reg    DMA14_V_V_TDATA_blk_n;
reg    ap_enable_reg_pp7_iter1;
reg   [0:0] tmp_5_reg_421;
reg    ap_enable_reg_pp7_iter2;
reg   [0:0] tmp_5_reg_421_pp7_iter1_reg;
reg   [12:0] i_reg_162;
reg   [12:0] i1_reg_173;
reg   [12:0] i2_reg_184;
reg   [12:0] i3_reg_195;
reg   [12:0] i4_reg_206;
reg   [13:0] i5_reg_217;
reg   [14:0] i6_reg_228;
reg   [15:0] i7_reg_239;
reg   [31:0] reg_250;
reg    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state3_io;
wire    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_state4_io;
reg    ap_block_pp0_stage0_11001;
reg    ap_block_state6_pp1_stage0_iter0;
wire    ap_block_state7_pp1_stage0_iter1;
reg    ap_block_state7_io;
wire    ap_block_state8_pp1_stage0_iter2;
reg    ap_block_state8_io;
reg    ap_block_pp1_stage0_11001;
reg    ap_block_state10_pp2_stage0_iter0;
wire    ap_block_state11_pp2_stage0_iter1;
reg    ap_block_state11_io;
wire    ap_block_state12_pp2_stage0_iter2;
reg    ap_block_state12_io;
reg    ap_block_pp2_stage0_11001;
reg    ap_block_state14_pp3_stage0_iter0;
wire    ap_block_state15_pp3_stage0_iter1;
reg    ap_block_state15_io;
wire    ap_block_state16_pp3_stage0_iter2;
reg    ap_block_state16_io;
reg    ap_block_pp3_stage0_11001;
reg    ap_block_state18_pp4_stage0_iter0;
wire    ap_block_state19_pp4_stage0_iter1;
reg    ap_block_state19_io;
wire    ap_block_state20_pp4_stage0_iter2;
reg    ap_block_state20_io;
reg    ap_block_pp4_stage0_11001;
reg    ap_block_state22_pp5_stage0_iter0;
wire    ap_block_state23_pp5_stage0_iter1;
reg    ap_block_state23_io;
wire    ap_block_state24_pp5_stage0_iter2;
reg    ap_block_state24_io;
reg    ap_block_pp5_stage0_11001;
reg    ap_block_state26_pp6_stage0_iter0;
wire    ap_block_state27_pp6_stage0_iter1;
reg    ap_block_state27_io;
wire    ap_block_state28_pp6_stage0_iter2;
reg    ap_block_state28_io;
reg    ap_block_pp6_stage0_11001;
reg    ap_block_state30_pp7_stage0_iter0;
wire    ap_block_state31_pp7_stage0_iter1;
reg    ap_block_state31_io;
wire    ap_block_state32_pp7_stage0_iter2;
reg    ap_block_state32_io;
reg    ap_block_pp7_stage0_11001;
wire   [12:0] i_1_fu_268_p2;
wire   [12:0] i_2_fu_280_p2;
wire   [12:0] i_3_fu_292_p2;
wire   [12:0] i_4_fu_304_p2;
wire   [12:0] i_5_fu_316_p2;
wire   [13:0] i_6_fu_328_p2;
wire   [14:0] i_7_fu_340_p2;
wire   [15:0] i_8_fu_352_p2;
wire    ap_CS_fsm_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_CS_fsm_state5;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state6;
wire    ap_CS_fsm_state9;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state10;
wire    ap_CS_fsm_state13;
reg    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state14;
wire    ap_CS_fsm_state17;
reg    ap_block_pp4_stage0_subdone;
reg    ap_condition_pp4_exit_iter0_state18;
wire    ap_CS_fsm_state21;
reg    ap_block_pp5_stage0_subdone;
reg    ap_condition_pp5_exit_iter0_state22;
wire    ap_CS_fsm_state25;
reg    ap_block_pp6_stage0_subdone;
reg    ap_condition_pp6_exit_iter0_state26;
wire    ap_CS_fsm_state29;
reg    ap_block_pp7_stage0_subdone;
reg    ap_condition_pp7_exit_iter0_state30;
reg    ap_block_pp0_stage0_01001;
reg    ap_block_pp1_stage0_01001;
reg    ap_block_pp2_stage0_01001;
reg    ap_block_pp3_stage0_01001;
reg    ap_block_pp4_stage0_01001;
reg    ap_block_pp5_stage0_01001;
reg    ap_block_pp6_stage0_01001;
reg    ap_block_pp7_stage0_01001;
reg   [17:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_idle_pp4;
wire    ap_enable_pp4;
reg    ap_idle_pp5;
wire    ap_enable_pp5;
reg    ap_idle_pp6;
wire    ap_enable_pp6;
reg    ap_idle_pp7;
wire    ap_enable_pp7;

// power-on initialization
initial begin
#0 WeightDMA_V_V_0_sel_rd = 1'b0;
#0 WeightDMA_V_V_0_sel_wr = 1'b0;
#0 WeightDMA_V_V_0_state = 2'd0;
#0 DMA7_V_V_1_sel_rd = 1'b0;
#0 DMA7_V_V_1_sel_wr = 1'b0;
#0 DMA7_V_V_1_state = 2'd0;
#0 DMA8_V_V_1_sel_rd = 1'b0;
#0 DMA8_V_V_1_sel_wr = 1'b0;
#0 DMA8_V_V_1_state = 2'd0;
#0 DMA9_V_V_1_sel_rd = 1'b0;
#0 DMA9_V_V_1_sel_wr = 1'b0;
#0 DMA9_V_V_1_state = 2'd0;
#0 DMA10_V_V_1_sel_rd = 1'b0;
#0 DMA10_V_V_1_sel_wr = 1'b0;
#0 DMA10_V_V_1_state = 2'd0;
#0 DMA11_V_V_1_sel_rd = 1'b0;
#0 DMA11_V_V_1_sel_wr = 1'b0;
#0 DMA11_V_V_1_state = 2'd0;
#0 DMA12_V_V_1_sel_rd = 1'b0;
#0 DMA12_V_V_1_sel_wr = 1'b0;
#0 DMA12_V_V_1_state = 2'd0;
#0 DMA13_V_V_1_sel_rd = 1'b0;
#0 DMA13_V_V_1_sel_wr = 1'b0;
#0 DMA13_V_V_1_state = 2'd0;
#0 DMA14_V_V_1_sel_rd = 1'b0;
#0 DMA14_V_V_1_sel_wr = 1'b0;
#0 DMA14_V_V_1_state = 2'd0;
#0 ap_CS_fsm = 18'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 ap_enable_reg_pp5_iter0 = 1'b0;
#0 ap_enable_reg_pp6_iter0 = 1'b0;
#0 ap_enable_reg_pp7_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter2 = 1'b0;
#0 ap_enable_reg_pp5_iter1 = 1'b0;
#0 ap_enable_reg_pp5_iter2 = 1'b0;
#0 ap_enable_reg_pp6_iter1 = 1'b0;
#0 ap_enable_reg_pp6_iter2 = 1'b0;
#0 ap_enable_reg_pp7_iter1 = 1'b0;
#0 ap_enable_reg_pp7_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        DMA10_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == DMA10_V_V_1_ack_out) & (1'b1 == DMA10_V_V_1_vld_out))) begin
            DMA10_V_V_1_sel_rd <= ~DMA10_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        DMA10_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == DMA10_V_V_1_ack_in) & (1'b1 == DMA10_V_V_1_vld_in))) begin
            DMA10_V_V_1_sel_wr <= ~DMA10_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        DMA10_V_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == DMA10_V_V_1_state) & (1'b0 == DMA10_V_V_1_vld_in)) | ((2'd3 == DMA10_V_V_1_state) & (1'b0 == DMA10_V_V_1_vld_in) & (1'b1 == DMA10_V_V_1_ack_out)))) begin
            DMA10_V_V_1_state <= 2'd2;
        end else if ((((2'd1 == DMA10_V_V_1_state) & (1'b0 == DMA10_V_V_1_ack_out)) | ((2'd3 == DMA10_V_V_1_state) & (1'b0 == DMA10_V_V_1_ack_out) & (1'b1 == DMA10_V_V_1_vld_in)))) begin
            DMA10_V_V_1_state <= 2'd1;
        end else if (((~((1'b0 == DMA10_V_V_1_vld_in) & (1'b1 == DMA10_V_V_1_ack_out)) & ~((1'b0 == DMA10_V_V_1_ack_out) & (1'b1 == DMA10_V_V_1_vld_in)) & (2'd3 == DMA10_V_V_1_state)) | ((2'd1 == DMA10_V_V_1_state) & (1'b1 == DMA10_V_V_1_ack_out)) | ((2'd2 == DMA10_V_V_1_state) & (1'b1 == DMA10_V_V_1_vld_in)))) begin
            DMA10_V_V_1_state <= 2'd3;
        end else begin
            DMA10_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        DMA11_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == DMA11_V_V_1_ack_out) & (1'b1 == DMA11_V_V_1_vld_out))) begin
            DMA11_V_V_1_sel_rd <= ~DMA11_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        DMA11_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == DMA11_V_V_1_ack_in) & (1'b1 == DMA11_V_V_1_vld_in))) begin
            DMA11_V_V_1_sel_wr <= ~DMA11_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        DMA11_V_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == DMA11_V_V_1_state) & (1'b0 == DMA11_V_V_1_vld_in)) | ((2'd3 == DMA11_V_V_1_state) & (1'b0 == DMA11_V_V_1_vld_in) & (1'b1 == DMA11_V_V_1_ack_out)))) begin
            DMA11_V_V_1_state <= 2'd2;
        end else if ((((2'd1 == DMA11_V_V_1_state) & (1'b0 == DMA11_V_V_1_ack_out)) | ((2'd3 == DMA11_V_V_1_state) & (1'b0 == DMA11_V_V_1_ack_out) & (1'b1 == DMA11_V_V_1_vld_in)))) begin
            DMA11_V_V_1_state <= 2'd1;
        end else if (((~((1'b0 == DMA11_V_V_1_vld_in) & (1'b1 == DMA11_V_V_1_ack_out)) & ~((1'b0 == DMA11_V_V_1_ack_out) & (1'b1 == DMA11_V_V_1_vld_in)) & (2'd3 == DMA11_V_V_1_state)) | ((2'd1 == DMA11_V_V_1_state) & (1'b1 == DMA11_V_V_1_ack_out)) | ((2'd2 == DMA11_V_V_1_state) & (1'b1 == DMA11_V_V_1_vld_in)))) begin
            DMA11_V_V_1_state <= 2'd3;
        end else begin
            DMA11_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        DMA12_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == DMA12_V_V_1_ack_out) & (1'b1 == DMA12_V_V_1_vld_out))) begin
            DMA12_V_V_1_sel_rd <= ~DMA12_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        DMA12_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == DMA12_V_V_1_ack_in) & (1'b1 == DMA12_V_V_1_vld_in))) begin
            DMA12_V_V_1_sel_wr <= ~DMA12_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        DMA12_V_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == DMA12_V_V_1_state) & (1'b0 == DMA12_V_V_1_vld_in)) | ((2'd3 == DMA12_V_V_1_state) & (1'b0 == DMA12_V_V_1_vld_in) & (1'b1 == DMA12_V_V_1_ack_out)))) begin
            DMA12_V_V_1_state <= 2'd2;
        end else if ((((2'd1 == DMA12_V_V_1_state) & (1'b0 == DMA12_V_V_1_ack_out)) | ((2'd3 == DMA12_V_V_1_state) & (1'b0 == DMA12_V_V_1_ack_out) & (1'b1 == DMA12_V_V_1_vld_in)))) begin
            DMA12_V_V_1_state <= 2'd1;
        end else if (((~((1'b0 == DMA12_V_V_1_vld_in) & (1'b1 == DMA12_V_V_1_ack_out)) & ~((1'b0 == DMA12_V_V_1_ack_out) & (1'b1 == DMA12_V_V_1_vld_in)) & (2'd3 == DMA12_V_V_1_state)) | ((2'd1 == DMA12_V_V_1_state) & (1'b1 == DMA12_V_V_1_ack_out)) | ((2'd2 == DMA12_V_V_1_state) & (1'b1 == DMA12_V_V_1_vld_in)))) begin
            DMA12_V_V_1_state <= 2'd3;
        end else begin
            DMA12_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        DMA13_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == DMA13_V_V_1_ack_out) & (1'b1 == DMA13_V_V_1_vld_out))) begin
            DMA13_V_V_1_sel_rd <= ~DMA13_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        DMA13_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == DMA13_V_V_1_ack_in) & (1'b1 == DMA13_V_V_1_vld_in))) begin
            DMA13_V_V_1_sel_wr <= ~DMA13_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        DMA13_V_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == DMA13_V_V_1_state) & (1'b0 == DMA13_V_V_1_vld_in)) | ((2'd3 == DMA13_V_V_1_state) & (1'b0 == DMA13_V_V_1_vld_in) & (1'b1 == DMA13_V_V_1_ack_out)))) begin
            DMA13_V_V_1_state <= 2'd2;
        end else if ((((2'd1 == DMA13_V_V_1_state) & (1'b0 == DMA13_V_V_1_ack_out)) | ((2'd3 == DMA13_V_V_1_state) & (1'b0 == DMA13_V_V_1_ack_out) & (1'b1 == DMA13_V_V_1_vld_in)))) begin
            DMA13_V_V_1_state <= 2'd1;
        end else if (((~((1'b0 == DMA13_V_V_1_vld_in) & (1'b1 == DMA13_V_V_1_ack_out)) & ~((1'b0 == DMA13_V_V_1_ack_out) & (1'b1 == DMA13_V_V_1_vld_in)) & (2'd3 == DMA13_V_V_1_state)) | ((2'd1 == DMA13_V_V_1_state) & (1'b1 == DMA13_V_V_1_ack_out)) | ((2'd2 == DMA13_V_V_1_state) & (1'b1 == DMA13_V_V_1_vld_in)))) begin
            DMA13_V_V_1_state <= 2'd3;
        end else begin
            DMA13_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        DMA14_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == DMA14_V_V_1_ack_out) & (1'b1 == DMA14_V_V_1_vld_out))) begin
            DMA14_V_V_1_sel_rd <= ~DMA14_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        DMA14_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == DMA14_V_V_1_ack_in) & (1'b1 == DMA14_V_V_1_vld_in))) begin
            DMA14_V_V_1_sel_wr <= ~DMA14_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        DMA14_V_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == DMA14_V_V_1_state) & (1'b0 == DMA14_V_V_1_vld_in)) | ((2'd3 == DMA14_V_V_1_state) & (1'b0 == DMA14_V_V_1_vld_in) & (1'b1 == DMA14_V_V_1_ack_out)))) begin
            DMA14_V_V_1_state <= 2'd2;
        end else if ((((2'd1 == DMA14_V_V_1_state) & (1'b0 == DMA14_V_V_1_ack_out)) | ((2'd3 == DMA14_V_V_1_state) & (1'b0 == DMA14_V_V_1_ack_out) & (1'b1 == DMA14_V_V_1_vld_in)))) begin
            DMA14_V_V_1_state <= 2'd1;
        end else if (((~((1'b0 == DMA14_V_V_1_vld_in) & (1'b1 == DMA14_V_V_1_ack_out)) & ~((1'b0 == DMA14_V_V_1_ack_out) & (1'b1 == DMA14_V_V_1_vld_in)) & (2'd3 == DMA14_V_V_1_state)) | ((2'd1 == DMA14_V_V_1_state) & (1'b1 == DMA14_V_V_1_ack_out)) | ((2'd2 == DMA14_V_V_1_state) & (1'b1 == DMA14_V_V_1_vld_in)))) begin
            DMA14_V_V_1_state <= 2'd3;
        end else begin
            DMA14_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        DMA7_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == DMA7_V_V_1_ack_out) & (1'b1 == DMA7_V_V_1_vld_out))) begin
            DMA7_V_V_1_sel_rd <= ~DMA7_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        DMA7_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == DMA7_V_V_1_ack_in) & (1'b1 == DMA7_V_V_1_vld_in))) begin
            DMA7_V_V_1_sel_wr <= ~DMA7_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        DMA7_V_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == DMA7_V_V_1_state) & (1'b0 == DMA7_V_V_1_vld_in)) | ((2'd3 == DMA7_V_V_1_state) & (1'b0 == DMA7_V_V_1_vld_in) & (1'b1 == DMA7_V_V_1_ack_out)))) begin
            DMA7_V_V_1_state <= 2'd2;
        end else if ((((2'd1 == DMA7_V_V_1_state) & (1'b0 == DMA7_V_V_1_ack_out)) | ((2'd3 == DMA7_V_V_1_state) & (1'b0 == DMA7_V_V_1_ack_out) & (1'b1 == DMA7_V_V_1_vld_in)))) begin
            DMA7_V_V_1_state <= 2'd1;
        end else if (((~((1'b0 == DMA7_V_V_1_vld_in) & (1'b1 == DMA7_V_V_1_ack_out)) & ~((1'b0 == DMA7_V_V_1_ack_out) & (1'b1 == DMA7_V_V_1_vld_in)) & (2'd3 == DMA7_V_V_1_state)) | ((2'd1 == DMA7_V_V_1_state) & (1'b1 == DMA7_V_V_1_ack_out)) | ((2'd2 == DMA7_V_V_1_state) & (1'b1 == DMA7_V_V_1_vld_in)))) begin
            DMA7_V_V_1_state <= 2'd3;
        end else begin
            DMA7_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        DMA8_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == DMA8_V_V_1_ack_out) & (1'b1 == DMA8_V_V_1_vld_out))) begin
            DMA8_V_V_1_sel_rd <= ~DMA8_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        DMA8_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == DMA8_V_V_1_ack_in) & (1'b1 == DMA8_V_V_1_vld_in))) begin
            DMA8_V_V_1_sel_wr <= ~DMA8_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        DMA8_V_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == DMA8_V_V_1_state) & (1'b0 == DMA8_V_V_1_vld_in)) | ((2'd3 == DMA8_V_V_1_state) & (1'b0 == DMA8_V_V_1_vld_in) & (1'b1 == DMA8_V_V_1_ack_out)))) begin
            DMA8_V_V_1_state <= 2'd2;
        end else if ((((2'd1 == DMA8_V_V_1_state) & (1'b0 == DMA8_V_V_1_ack_out)) | ((2'd3 == DMA8_V_V_1_state) & (1'b0 == DMA8_V_V_1_ack_out) & (1'b1 == DMA8_V_V_1_vld_in)))) begin
            DMA8_V_V_1_state <= 2'd1;
        end else if (((~((1'b0 == DMA8_V_V_1_vld_in) & (1'b1 == DMA8_V_V_1_ack_out)) & ~((1'b0 == DMA8_V_V_1_ack_out) & (1'b1 == DMA8_V_V_1_vld_in)) & (2'd3 == DMA8_V_V_1_state)) | ((2'd1 == DMA8_V_V_1_state) & (1'b1 == DMA8_V_V_1_ack_out)) | ((2'd2 == DMA8_V_V_1_state) & (1'b1 == DMA8_V_V_1_vld_in)))) begin
            DMA8_V_V_1_state <= 2'd3;
        end else begin
            DMA8_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        DMA9_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == DMA9_V_V_1_ack_out) & (1'b1 == DMA9_V_V_1_vld_out))) begin
            DMA9_V_V_1_sel_rd <= ~DMA9_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        DMA9_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == DMA9_V_V_1_ack_in) & (1'b1 == DMA9_V_V_1_vld_in))) begin
            DMA9_V_V_1_sel_wr <= ~DMA9_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        DMA9_V_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == DMA9_V_V_1_state) & (1'b0 == DMA9_V_V_1_vld_in)) | ((2'd3 == DMA9_V_V_1_state) & (1'b0 == DMA9_V_V_1_vld_in) & (1'b1 == DMA9_V_V_1_ack_out)))) begin
            DMA9_V_V_1_state <= 2'd2;
        end else if ((((2'd1 == DMA9_V_V_1_state) & (1'b0 == DMA9_V_V_1_ack_out)) | ((2'd3 == DMA9_V_V_1_state) & (1'b0 == DMA9_V_V_1_ack_out) & (1'b1 == DMA9_V_V_1_vld_in)))) begin
            DMA9_V_V_1_state <= 2'd1;
        end else if (((~((1'b0 == DMA9_V_V_1_vld_in) & (1'b1 == DMA9_V_V_1_ack_out)) & ~((1'b0 == DMA9_V_V_1_ack_out) & (1'b1 == DMA9_V_V_1_vld_in)) & (2'd3 == DMA9_V_V_1_state)) | ((2'd1 == DMA9_V_V_1_state) & (1'b1 == DMA9_V_V_1_ack_out)) | ((2'd2 == DMA9_V_V_1_state) & (1'b1 == DMA9_V_V_1_vld_in)))) begin
            DMA9_V_V_1_state <= 2'd3;
        end else begin
            DMA9_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        WeightDMA_V_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == WeightDMA_V_V_0_ack_out) & (1'b1 == WeightDMA_V_V_0_vld_out))) begin
            WeightDMA_V_V_0_sel_rd <= ~WeightDMA_V_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        WeightDMA_V_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == WeightDMA_V_V_0_ack_in) & (1'b1 == WeightDMA_V_V_0_vld_in))) begin
            WeightDMA_V_V_0_sel_wr <= ~WeightDMA_V_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        WeightDMA_V_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == WeightDMA_V_V_0_state) & (1'b0 == WeightDMA_V_V_0_vld_in)) | ((2'd3 == WeightDMA_V_V_0_state) & (1'b0 == WeightDMA_V_V_0_vld_in) & (1'b1 == WeightDMA_V_V_0_ack_out)))) begin
            WeightDMA_V_V_0_state <= 2'd2;
        end else if ((((2'd1 == WeightDMA_V_V_0_state) & (1'b0 == WeightDMA_V_V_0_ack_out)) | ((2'd3 == WeightDMA_V_V_0_state) & (1'b0 == WeightDMA_V_V_0_ack_out) & (1'b1 == WeightDMA_V_V_0_vld_in)))) begin
            WeightDMA_V_V_0_state <= 2'd1;
        end else if (((~((1'b0 == WeightDMA_V_V_0_vld_in) & (1'b1 == WeightDMA_V_V_0_ack_out)) & ~((1'b0 == WeightDMA_V_V_0_ack_out) & (1'b1 == WeightDMA_V_V_0_vld_in)) & (2'd3 == WeightDMA_V_V_0_state)) | ((2'd1 == WeightDMA_V_V_0_state) & (1'b1 == WeightDMA_V_V_0_ack_out)) | ((2'd2 == WeightDMA_V_V_0_state) & (1'b1 == WeightDMA_V_V_0_vld_in)))) begin
            WeightDMA_V_V_0_state <= 2'd3;
        end else begin
            WeightDMA_V_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state1)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state1)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state6) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state6)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state6);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_condition_pp2_exit_iter0_state10) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state10)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state10);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_condition_pp3_exit_iter0_state14) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state13)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state14)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state14);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end else if ((1'b1 == ap_CS_fsm_state13)) begin
            ap_enable_reg_pp3_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b1 == ap_condition_pp4_exit_iter0_state18) & (1'b0 == ap_block_pp4_stage0_subdone))) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state17)) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp4_exit_iter0_state18)) begin
                ap_enable_reg_pp4_iter1 <= (1'b1 ^ ap_condition_pp4_exit_iter0_state18);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
        end else if ((1'b1 == ap_CS_fsm_state17)) begin
            ap_enable_reg_pp4_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp5_stage0) & (1'b1 == ap_condition_pp5_exit_iter0_state22) & (1'b0 == ap_block_pp5_stage0_subdone))) begin
            ap_enable_reg_pp5_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state21)) begin
            ap_enable_reg_pp5_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp5_exit_iter0_state22)) begin
                ap_enable_reg_pp5_iter1 <= (1'b1 ^ ap_condition_pp5_exit_iter0_state22);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter2 <= ap_enable_reg_pp5_iter1;
        end else if ((1'b1 == ap_CS_fsm_state21)) begin
            ap_enable_reg_pp5_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp6_stage0) & (1'b1 == ap_condition_pp6_exit_iter0_state26) & (1'b0 == ap_block_pp6_stage0_subdone))) begin
            ap_enable_reg_pp6_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state25)) begin
            ap_enable_reg_pp6_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp6_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp6_exit_iter0_state26)) begin
                ap_enable_reg_pp6_iter1 <= (1'b1 ^ ap_condition_pp6_exit_iter0_state26);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp6_iter1 <= ap_enable_reg_pp6_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp6_stage0_subdone)) begin
            ap_enable_reg_pp6_iter2 <= ap_enable_reg_pp6_iter1;
        end else if ((1'b1 == ap_CS_fsm_state25)) begin
            ap_enable_reg_pp6_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp7_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp7_stage0) & (1'b1 == ap_condition_pp7_exit_iter0_state30) & (1'b0 == ap_block_pp7_stage0_subdone))) begin
            ap_enable_reg_pp7_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state29)) begin
            ap_enable_reg_pp7_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp7_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp7_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp7_exit_iter0_state30)) begin
                ap_enable_reg_pp7_iter1 <= (1'b1 ^ ap_condition_pp7_exit_iter0_state30);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp7_iter1 <= ap_enable_reg_pp7_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp7_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp7_stage0_subdone)) begin
            ap_enable_reg_pp7_iter2 <= ap_enable_reg_pp7_iter1;
        end else if ((1'b1 == ap_CS_fsm_state29)) begin
            ap_enable_reg_pp7_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i1_reg_173 <= 13'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (tmp_4_fu_274_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i1_reg_173 <= i_2_fu_280_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i2_reg_184 <= 13'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (tmp_8_fu_286_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        i2_reg_184 <= i_3_fu_292_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        i3_reg_195 <= 13'd0;
    end else if (((1'b0 == ap_block_pp3_stage0_11001) & (tmp_s_fu_298_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        i3_reg_195 <= i_4_fu_304_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        i4_reg_206 <= 13'd0;
    end else if (((1'b0 == ap_block_pp4_stage0_11001) & (tmp_1_fu_310_p2 == 1'd0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        i4_reg_206 <= i_5_fu_316_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        i5_reg_217 <= 14'd0;
    end else if (((1'b0 == ap_block_pp5_stage0_11001) & (tmp_2_fu_322_p2 == 1'd0) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        i5_reg_217 <= i_6_fu_328_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        i6_reg_228 <= 15'd0;
    end else if (((1'b0 == ap_block_pp6_stage0_11001) & (tmp_3_fu_334_p2 == 1'd0) & (ap_enable_reg_pp6_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp6_stage0))) begin
        i6_reg_228 <= i_7_fu_340_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        i7_reg_239 <= 16'd0;
    end else if (((tmp_5_fu_346_p2 == 1'd0) & (ap_enable_reg_pp7_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp7_stage0) & (1'b0 == ap_block_pp7_stage0_11001))) begin
        i7_reg_239 <= i_8_fu_352_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_fu_262_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_162 <= i_1_fu_268_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        i_reg_162 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == DMA10_V_V_1_load_A)) begin
        DMA10_V_V_1_payload_A <= reg_250;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == DMA10_V_V_1_load_B)) begin
        DMA10_V_V_1_payload_B <= reg_250;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == DMA11_V_V_1_load_A)) begin
        DMA11_V_V_1_payload_A <= reg_250;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == DMA11_V_V_1_load_B)) begin
        DMA11_V_V_1_payload_B <= reg_250;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == DMA12_V_V_1_load_A)) begin
        DMA12_V_V_1_payload_A <= reg_250;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == DMA12_V_V_1_load_B)) begin
        DMA12_V_V_1_payload_B <= reg_250;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == DMA13_V_V_1_load_A)) begin
        DMA13_V_V_1_payload_A <= reg_250;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == DMA13_V_V_1_load_B)) begin
        DMA13_V_V_1_payload_B <= reg_250;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == DMA14_V_V_1_load_A)) begin
        DMA14_V_V_1_payload_A <= reg_250;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == DMA14_V_V_1_load_B)) begin
        DMA14_V_V_1_payload_B <= reg_250;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == DMA7_V_V_1_load_A)) begin
        DMA7_V_V_1_payload_A <= reg_250;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == DMA7_V_V_1_load_B)) begin
        DMA7_V_V_1_payload_B <= reg_250;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == DMA8_V_V_1_load_A)) begin
        DMA8_V_V_1_payload_A <= reg_250;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == DMA8_V_V_1_load_B)) begin
        DMA8_V_V_1_payload_B <= reg_250;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == DMA9_V_V_1_load_A)) begin
        DMA9_V_V_1_payload_A <= reg_250;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == DMA9_V_V_1_load_B)) begin
        DMA9_V_V_1_payload_B <= reg_250;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == WeightDMA_V_V_0_load_A)) begin
        WeightDMA_V_V_0_payload_A <= WeightDMA_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == WeightDMA_V_V_0_load_B)) begin
        WeightDMA_V_V_0_payload_B <= WeightDMA_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((((tmp_5_fu_346_p2 == 1'd0) & (ap_enable_reg_pp7_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp7_stage0) & (1'b0 == ap_block_pp7_stage0_11001)) | ((1'b0 == ap_block_pp6_stage0_11001) & (tmp_3_fu_334_p2 == 1'd0) & (ap_enable_reg_pp6_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp6_stage0)) | ((1'b0 == ap_block_pp5_stage0_11001) & (tmp_2_fu_322_p2 == 1'd0) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0)) | ((1'b0 == ap_block_pp4_stage0_11001) & (tmp_1_fu_310_p2 == 1'd0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0)) | ((1'b0 == ap_block_pp3_stage0_11001) & (tmp_s_fu_298_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_pp2_stage0_11001) & (tmp_8_fu_286_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (tmp_4_fu_274_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (tmp_fu_262_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        reg_250 <= WeightDMA_V_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        tmp_1_reg_394 <= tmp_1_fu_310_p2;
        tmp_1_reg_394_pp4_iter1_reg <= tmp_1_reg_394;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        tmp_2_reg_403 <= tmp_2_fu_322_p2;
        tmp_2_reg_403_pp5_iter1_reg <= tmp_2_reg_403;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp6_stage0_11001) & (1'b1 == ap_CS_fsm_pp6_stage0))) begin
        tmp_3_reg_412 <= tmp_3_fu_334_p2;
        tmp_3_reg_412_pp6_iter1_reg <= tmp_3_reg_412;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        tmp_4_reg_367 <= tmp_4_fu_274_p2;
        tmp_4_reg_367_pp1_iter1_reg <= tmp_4_reg_367;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp7_stage0) & (1'b0 == ap_block_pp7_stage0_11001))) begin
        tmp_5_reg_421 <= tmp_5_fu_346_p2;
        tmp_5_reg_421_pp7_iter1_reg <= tmp_5_reg_421;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        tmp_8_reg_376 <= tmp_8_fu_286_p2;
        tmp_8_reg_376_pp2_iter1_reg <= tmp_8_reg_376;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_reg_358 <= tmp_fu_262_p2;
        tmp_reg_358_pp0_iter1_reg <= tmp_reg_358;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        tmp_s_reg_385 <= tmp_s_fu_298_p2;
        tmp_s_reg_385_pp3_iter1_reg <= tmp_s_reg_385;
    end
end

always @ (*) begin
    if ((1'b1 == DMA10_V_V_1_sel)) begin
        DMA10_V_V_1_data_out = DMA10_V_V_1_payload_B;
    end else begin
        DMA10_V_V_1_data_out = DMA10_V_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (tmp_s_reg_385 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        DMA10_V_V_1_vld_in = 1'b1;
    end else begin
        DMA10_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp3_stage0) & (tmp_s_reg_385_pp3_iter1_reg == 1'd0) & (ap_enable_reg_pp3_iter2 == 1'b1)) | ((1'b0 == ap_block_pp3_stage0) & (tmp_s_reg_385 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)))) begin
        DMA10_V_V_TDATA_blk_n = DMA10_V_V_1_state[1'd1];
    end else begin
        DMA10_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == DMA11_V_V_1_sel)) begin
        DMA11_V_V_1_data_out = DMA11_V_V_1_payload_B;
    end else begin
        DMA11_V_V_1_data_out = DMA11_V_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (tmp_1_reg_394 == 1'd0) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        DMA11_V_V_1_vld_in = 1'b1;
    end else begin
        DMA11_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp4_stage0) & (tmp_1_reg_394_pp4_iter1_reg == 1'd0) & (ap_enable_reg_pp4_iter2 == 1'b1)) | ((1'b0 == ap_block_pp4_stage0) & (tmp_1_reg_394 == 1'd0) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0)))) begin
        DMA11_V_V_TDATA_blk_n = DMA11_V_V_1_state[1'd1];
    end else begin
        DMA11_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == DMA12_V_V_1_sel)) begin
        DMA12_V_V_1_data_out = DMA12_V_V_1_payload_B;
    end else begin
        DMA12_V_V_1_data_out = DMA12_V_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (tmp_2_reg_403 == 1'd0) & (ap_enable_reg_pp5_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        DMA12_V_V_1_vld_in = 1'b1;
    end else begin
        DMA12_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp5_stage0) & (tmp_2_reg_403_pp5_iter1_reg == 1'd0) & (ap_enable_reg_pp5_iter2 == 1'b1)) | ((1'b0 == ap_block_pp5_stage0) & (tmp_2_reg_403 == 1'd0) & (ap_enable_reg_pp5_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0)))) begin
        DMA12_V_V_TDATA_blk_n = DMA12_V_V_1_state[1'd1];
    end else begin
        DMA12_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == DMA13_V_V_1_sel)) begin
        DMA13_V_V_1_data_out = DMA13_V_V_1_payload_B;
    end else begin
        DMA13_V_V_1_data_out = DMA13_V_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp6_stage0_11001) & (tmp_3_reg_412 == 1'd0) & (ap_enable_reg_pp6_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp6_stage0))) begin
        DMA13_V_V_1_vld_in = 1'b1;
    end else begin
        DMA13_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp6_stage0) & (tmp_3_reg_412_pp6_iter1_reg == 1'd0) & (ap_enable_reg_pp6_iter2 == 1'b1)) | ((1'b0 == ap_block_pp6_stage0) & (tmp_3_reg_412 == 1'd0) & (ap_enable_reg_pp6_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp6_stage0)))) begin
        DMA13_V_V_TDATA_blk_n = DMA13_V_V_1_state[1'd1];
    end else begin
        DMA13_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == DMA14_V_V_1_sel)) begin
        DMA14_V_V_1_data_out = DMA14_V_V_1_payload_B;
    end else begin
        DMA14_V_V_1_data_out = DMA14_V_V_1_payload_A;
    end
end

always @ (*) begin
    if (((tmp_5_reg_421 == 1'd0) & (ap_enable_reg_pp7_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp7_stage0) & (1'b0 == ap_block_pp7_stage0_11001))) begin
        DMA14_V_V_1_vld_in = 1'b1;
    end else begin
        DMA14_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp7_stage0) & (tmp_5_reg_421_pp7_iter1_reg == 1'd0) & (ap_enable_reg_pp7_iter2 == 1'b1)) | ((1'b0 == ap_block_pp7_stage0) & (tmp_5_reg_421 == 1'd0) & (ap_enable_reg_pp7_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp7_stage0)))) begin
        DMA14_V_V_TDATA_blk_n = DMA14_V_V_1_state[1'd1];
    end else begin
        DMA14_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == DMA7_V_V_1_sel)) begin
        DMA7_V_V_1_data_out = DMA7_V_V_1_payload_B;
    end else begin
        DMA7_V_V_1_data_out = DMA7_V_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_358 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        DMA7_V_V_1_vld_in = 1'b1;
    end else begin
        DMA7_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (tmp_reg_358_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (tmp_reg_358 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        DMA7_V_V_TDATA_blk_n = DMA7_V_V_1_state[1'd1];
    end else begin
        DMA7_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == DMA8_V_V_1_sel)) begin
        DMA8_V_V_1_data_out = DMA8_V_V_1_payload_B;
    end else begin
        DMA8_V_V_1_data_out = DMA8_V_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (tmp_4_reg_367 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        DMA8_V_V_1_vld_in = 1'b1;
    end else begin
        DMA8_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0) & (tmp_4_reg_367_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0) & (tmp_4_reg_367 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        DMA8_V_V_TDATA_blk_n = DMA8_V_V_1_state[1'd1];
    end else begin
        DMA8_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == DMA9_V_V_1_sel)) begin
        DMA9_V_V_1_data_out = DMA9_V_V_1_payload_B;
    end else begin
        DMA9_V_V_1_data_out = DMA9_V_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (tmp_8_reg_376 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        DMA9_V_V_1_vld_in = 1'b1;
    end else begin
        DMA9_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0) & (tmp_8_reg_376_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0) & (tmp_8_reg_376 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
        DMA9_V_V_TDATA_blk_n = DMA9_V_V_1_state[1'd1];
    end else begin
        DMA9_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((tmp_5_fu_346_p2 == 1'd0) & (ap_enable_reg_pp7_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp7_stage0) & (1'b0 == ap_block_pp7_stage0_11001)) | ((1'b0 == ap_block_pp6_stage0_11001) & (tmp_3_fu_334_p2 == 1'd0) & (ap_enable_reg_pp6_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp6_stage0)) | ((1'b0 == ap_block_pp5_stage0_11001) & (tmp_2_fu_322_p2 == 1'd0) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0)) | ((1'b0 == ap_block_pp4_stage0_11001) & (tmp_1_fu_310_p2 == 1'd0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0)) | ((1'b0 == ap_block_pp3_stage0_11001) & (tmp_s_fu_298_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_pp2_stage0_11001) & (tmp_8_fu_286_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (tmp_4_fu_274_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (tmp_fu_262_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        WeightDMA_V_V_0_ack_out = 1'b1;
    end else begin
        WeightDMA_V_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == WeightDMA_V_V_0_sel)) begin
        WeightDMA_V_V_0_data_out = WeightDMA_V_V_0_payload_B;
    end else begin
        WeightDMA_V_V_0_data_out = WeightDMA_V_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp7_stage0) & (tmp_5_fu_346_p2 == 1'd0) & (ap_enable_reg_pp7_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp7_stage0)) | ((1'b0 == ap_block_pp6_stage0) & (tmp_3_fu_334_p2 == 1'd0) & (ap_enable_reg_pp6_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp6_stage0)) | ((1'b0 == ap_block_pp5_stage0) & (tmp_2_fu_322_p2 == 1'd0) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0)) | ((1'b0 == ap_block_pp4_stage0) & (tmp_1_fu_310_p2 == 1'd0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0)) | ((1'b0 == ap_block_pp3_stage0) & (tmp_s_fu_298_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_pp2_stage0) & (tmp_8_fu_286_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp1_stage0) & (tmp_4_fu_274_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (tmp_fu_262_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        WeightDMA_V_V_TDATA_blk_n = WeightDMA_V_V_0_state[1'd0];
    end else begin
        WeightDMA_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((tmp_fu_262_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((tmp_4_fu_274_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state6 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state6 = 1'b0;
    end
end

always @ (*) begin
    if ((tmp_8_fu_286_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state10 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state10 = 1'b0;
    end
end

always @ (*) begin
    if ((tmp_s_fu_298_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state14 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state14 = 1'b0;
    end
end

always @ (*) begin
    if ((tmp_1_fu_310_p2 == 1'd1)) begin
        ap_condition_pp4_exit_iter0_state18 = 1'b1;
    end else begin
        ap_condition_pp4_exit_iter0_state18 = 1'b0;
    end
end

always @ (*) begin
    if ((tmp_2_fu_322_p2 == 1'd1)) begin
        ap_condition_pp5_exit_iter0_state22 = 1'b1;
    end else begin
        ap_condition_pp5_exit_iter0_state22 = 1'b0;
    end
end

always @ (*) begin
    if ((tmp_3_fu_334_p2 == 1'd1)) begin
        ap_condition_pp6_exit_iter0_state26 = 1'b1;
    end else begin
        ap_condition_pp6_exit_iter0_state26 = 1'b0;
    end
end

always @ (*) begin
    if ((tmp_5_fu_346_p2 == 1'd1)) begin
        ap_condition_pp7_exit_iter0_state30 = 1'b1;
    end else begin
        ap_condition_pp7_exit_iter0_state30 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter2 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter2 == 1'b0) & (ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp5_iter2 == 1'b0) & (ap_enable_reg_pp5_iter1 == 1'b0) & (ap_enable_reg_pp5_iter0 == 1'b0))) begin
        ap_idle_pp5 = 1'b1;
    end else begin
        ap_idle_pp5 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp6_iter2 == 1'b0) & (ap_enable_reg_pp6_iter1 == 1'b0) & (ap_enable_reg_pp6_iter0 == 1'b0))) begin
        ap_idle_pp6 = 1'b1;
    end else begin
        ap_idle_pp6 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp7_iter2 == 1'b0) & (ap_enable_reg_pp7_iter1 == 1'b0) & (ap_enable_reg_pp7_iter0 == 1'b0))) begin
        ap_idle_pp7 = 1'b1;
    end else begin
        ap_idle_pp7 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (tmp_fu_262_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (tmp_fu_262_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (tmp_4_fu_274_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)) | ((ap_enable_reg_pp1_iter1 == 1'b0) & (tmp_4_fu_274_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((ap_enable_reg_pp2_iter1 == 1'b0) & (tmp_8_fu_286_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)) & ~((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)) | ((ap_enable_reg_pp2_iter1 == 1'b0) & (tmp_8_fu_286_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((ap_enable_reg_pp3_iter1 == 1'b0) & (tmp_s_fu_298_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone)) & ~((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone)) | ((ap_enable_reg_pp3_iter1 == 1'b0) & (tmp_s_fu_298_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_pp4_stage0;
        end
        ap_ST_fsm_pp4_stage0 : begin
            if ((~((ap_enable_reg_pp4_iter1 == 1'b0) & (tmp_1_fu_310_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone)) & ~((ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if ((((ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone)) | ((ap_enable_reg_pp4_iter1 == 1'b0) & (tmp_1_fu_310_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_pp5_stage0;
        end
        ap_ST_fsm_pp5_stage0 : begin
            if ((~((ap_enable_reg_pp5_iter1 == 1'b0) & (tmp_2_fu_322_p2 == 1'd1) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b0 == ap_block_pp5_stage0_subdone)) & ~((ap_enable_reg_pp5_iter1 == 1'b0) & (ap_enable_reg_pp5_iter2 == 1'b1) & (1'b0 == ap_block_pp5_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end else if ((((ap_enable_reg_pp5_iter1 == 1'b0) & (ap_enable_reg_pp5_iter2 == 1'b1) & (1'b0 == ap_block_pp5_stage0_subdone)) | ((ap_enable_reg_pp5_iter1 == 1'b0) & (tmp_2_fu_322_p2 == 1'd1) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b0 == ap_block_pp5_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_pp6_stage0;
        end
        ap_ST_fsm_pp6_stage0 : begin
            if ((~((ap_enable_reg_pp6_iter1 == 1'b0) & (tmp_3_fu_334_p2 == 1'd1) & (ap_enable_reg_pp6_iter0 == 1'b1) & (1'b0 == ap_block_pp6_stage0_subdone)) & ~((ap_enable_reg_pp6_iter1 == 1'b0) & (ap_enable_reg_pp6_iter2 == 1'b1) & (1'b0 == ap_block_pp6_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp6_stage0;
            end else if ((((ap_enable_reg_pp6_iter1 == 1'b0) & (ap_enable_reg_pp6_iter2 == 1'b1) & (1'b0 == ap_block_pp6_stage0_subdone)) | ((ap_enable_reg_pp6_iter1 == 1'b0) & (tmp_3_fu_334_p2 == 1'd1) & (ap_enable_reg_pp6_iter0 == 1'b1) & (1'b0 == ap_block_pp6_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp6_stage0;
            end
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_pp7_stage0;
        end
        ap_ST_fsm_pp7_stage0 : begin
            if ((~((ap_enable_reg_pp7_iter1 == 1'b0) & (tmp_5_fu_346_p2 == 1'd1) & (ap_enable_reg_pp7_iter0 == 1'b1) & (1'b0 == ap_block_pp7_stage0_subdone)) & ~((ap_enable_reg_pp7_iter1 == 1'b0) & (ap_enable_reg_pp7_iter2 == 1'b1) & (1'b0 == ap_block_pp7_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp7_stage0;
            end else if ((((ap_enable_reg_pp7_iter1 == 1'b0) & (ap_enable_reg_pp7_iter2 == 1'b1) & (1'b0 == ap_block_pp7_stage0_subdone)) | ((ap_enable_reg_pp7_iter1 == 1'b0) & (tmp_5_fu_346_p2 == 1'd1) & (ap_enable_reg_pp7_iter0 == 1'b1) & (1'b0 == ap_block_pp7_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp7_stage0;
            end
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign DMA10_V_V_1_ack_in = DMA10_V_V_1_state[1'd1];

assign DMA10_V_V_1_ack_out = DMA10_V_V_TREADY;

assign DMA10_V_V_1_load_A = (~DMA10_V_V_1_sel_wr & DMA10_V_V_1_state_cmp_full);

assign DMA10_V_V_1_load_B = (DMA10_V_V_1_state_cmp_full & DMA10_V_V_1_sel_wr);

assign DMA10_V_V_1_sel = DMA10_V_V_1_sel_rd;

assign DMA10_V_V_1_state_cmp_full = ((DMA10_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign DMA10_V_V_1_vld_out = DMA10_V_V_1_state[1'd0];

assign DMA10_V_V_TDATA = DMA10_V_V_1_data_out;

assign DMA10_V_V_TVALID = DMA10_V_V_1_state[1'd0];

assign DMA11_V_V_1_ack_in = DMA11_V_V_1_state[1'd1];

assign DMA11_V_V_1_ack_out = DMA11_V_V_TREADY;

assign DMA11_V_V_1_load_A = (~DMA11_V_V_1_sel_wr & DMA11_V_V_1_state_cmp_full);

assign DMA11_V_V_1_load_B = (DMA11_V_V_1_state_cmp_full & DMA11_V_V_1_sel_wr);

assign DMA11_V_V_1_sel = DMA11_V_V_1_sel_rd;

assign DMA11_V_V_1_state_cmp_full = ((DMA11_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign DMA11_V_V_1_vld_out = DMA11_V_V_1_state[1'd0];

assign DMA11_V_V_TDATA = DMA11_V_V_1_data_out;

assign DMA11_V_V_TVALID = DMA11_V_V_1_state[1'd0];

assign DMA12_V_V_1_ack_in = DMA12_V_V_1_state[1'd1];

assign DMA12_V_V_1_ack_out = DMA12_V_V_TREADY;

assign DMA12_V_V_1_load_A = (~DMA12_V_V_1_sel_wr & DMA12_V_V_1_state_cmp_full);

assign DMA12_V_V_1_load_B = (DMA12_V_V_1_state_cmp_full & DMA12_V_V_1_sel_wr);

assign DMA12_V_V_1_sel = DMA12_V_V_1_sel_rd;

assign DMA12_V_V_1_state_cmp_full = ((DMA12_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign DMA12_V_V_1_vld_out = DMA12_V_V_1_state[1'd0];

assign DMA12_V_V_TDATA = DMA12_V_V_1_data_out;

assign DMA12_V_V_TVALID = DMA12_V_V_1_state[1'd0];

assign DMA13_V_V_1_ack_in = DMA13_V_V_1_state[1'd1];

assign DMA13_V_V_1_ack_out = DMA13_V_V_TREADY;

assign DMA13_V_V_1_load_A = (~DMA13_V_V_1_sel_wr & DMA13_V_V_1_state_cmp_full);

assign DMA13_V_V_1_load_B = (DMA13_V_V_1_state_cmp_full & DMA13_V_V_1_sel_wr);

assign DMA13_V_V_1_sel = DMA13_V_V_1_sel_rd;

assign DMA13_V_V_1_state_cmp_full = ((DMA13_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign DMA13_V_V_1_vld_out = DMA13_V_V_1_state[1'd0];

assign DMA13_V_V_TDATA = DMA13_V_V_1_data_out;

assign DMA13_V_V_TVALID = DMA13_V_V_1_state[1'd0];

assign DMA14_V_V_1_ack_in = DMA14_V_V_1_state[1'd1];

assign DMA14_V_V_1_ack_out = DMA14_V_V_TREADY;

assign DMA14_V_V_1_load_A = (~DMA14_V_V_1_sel_wr & DMA14_V_V_1_state_cmp_full);

assign DMA14_V_V_1_load_B = (DMA14_V_V_1_state_cmp_full & DMA14_V_V_1_sel_wr);

assign DMA14_V_V_1_sel = DMA14_V_V_1_sel_rd;

assign DMA14_V_V_1_state_cmp_full = ((DMA14_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign DMA14_V_V_1_vld_out = DMA14_V_V_1_state[1'd0];

assign DMA14_V_V_TDATA = DMA14_V_V_1_data_out;

assign DMA14_V_V_TVALID = DMA14_V_V_1_state[1'd0];

assign DMA7_V_V_1_ack_in = DMA7_V_V_1_state[1'd1];

assign DMA7_V_V_1_ack_out = DMA7_V_V_TREADY;

assign DMA7_V_V_1_load_A = (~DMA7_V_V_1_sel_wr & DMA7_V_V_1_state_cmp_full);

assign DMA7_V_V_1_load_B = (DMA7_V_V_1_state_cmp_full & DMA7_V_V_1_sel_wr);

assign DMA7_V_V_1_sel = DMA7_V_V_1_sel_rd;

assign DMA7_V_V_1_state_cmp_full = ((DMA7_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign DMA7_V_V_1_vld_out = DMA7_V_V_1_state[1'd0];

assign DMA7_V_V_TDATA = DMA7_V_V_1_data_out;

assign DMA7_V_V_TVALID = DMA7_V_V_1_state[1'd0];

assign DMA8_V_V_1_ack_in = DMA8_V_V_1_state[1'd1];

assign DMA8_V_V_1_ack_out = DMA8_V_V_TREADY;

assign DMA8_V_V_1_load_A = (~DMA8_V_V_1_sel_wr & DMA8_V_V_1_state_cmp_full);

assign DMA8_V_V_1_load_B = (DMA8_V_V_1_state_cmp_full & DMA8_V_V_1_sel_wr);

assign DMA8_V_V_1_sel = DMA8_V_V_1_sel_rd;

assign DMA8_V_V_1_state_cmp_full = ((DMA8_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign DMA8_V_V_1_vld_out = DMA8_V_V_1_state[1'd0];

assign DMA8_V_V_TDATA = DMA8_V_V_1_data_out;

assign DMA8_V_V_TVALID = DMA8_V_V_1_state[1'd0];

assign DMA9_V_V_1_ack_in = DMA9_V_V_1_state[1'd1];

assign DMA9_V_V_1_ack_out = DMA9_V_V_TREADY;

assign DMA9_V_V_1_load_A = (~DMA9_V_V_1_sel_wr & DMA9_V_V_1_state_cmp_full);

assign DMA9_V_V_1_load_B = (DMA9_V_V_1_state_cmp_full & DMA9_V_V_1_sel_wr);

assign DMA9_V_V_1_sel = DMA9_V_V_1_sel_rd;

assign DMA9_V_V_1_state_cmp_full = ((DMA9_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign DMA9_V_V_1_vld_out = DMA9_V_V_1_state[1'd0];

assign DMA9_V_V_TDATA = DMA9_V_V_1_data_out;

assign DMA9_V_V_TVALID = DMA9_V_V_1_state[1'd0];

assign WeightDMA_V_V_0_ack_in = WeightDMA_V_V_0_state[1'd1];

assign WeightDMA_V_V_0_load_A = (~WeightDMA_V_V_0_sel_wr & WeightDMA_V_V_0_state_cmp_full);

assign WeightDMA_V_V_0_load_B = (WeightDMA_V_V_0_state_cmp_full & WeightDMA_V_V_0_sel_wr);

assign WeightDMA_V_V_0_sel = WeightDMA_V_V_0_sel_rd;

assign WeightDMA_V_V_0_state_cmp_full = ((WeightDMA_V_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign WeightDMA_V_V_0_vld_in = WeightDMA_V_V_TVALID;

assign WeightDMA_V_V_0_vld_out = WeightDMA_V_V_0_state[1'd0];

assign WeightDMA_V_V_TREADY = WeightDMA_V_V_0_state[1'd1];

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp5_stage0 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp6_stage0 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp7_stage0 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((tmp_fu_262_p2 == 1'd0) & (1'b0 == WeightDMA_V_V_0_vld_out) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b1 == ap_block_state3_io) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((tmp_fu_262_p2 == 1'd0) & (1'b0 == WeightDMA_V_V_0_vld_out) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b1 == ap_block_state3_io) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((tmp_fu_262_p2 == 1'd0) & (1'b0 == WeightDMA_V_V_0_vld_out) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = ((tmp_4_fu_274_p2 == 1'd0) & (1'b0 == WeightDMA_V_V_0_vld_out) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((1'b1 == ap_block_state8_io) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b1 == ap_block_state7_io) & (ap_enable_reg_pp1_iter1 == 1'b1)) | ((tmp_4_fu_274_p2 == 1'd0) & (1'b0 == WeightDMA_V_V_0_vld_out) & (ap_enable_reg_pp1_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((1'b1 == ap_block_state8_io) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b1 == ap_block_state7_io) & (ap_enable_reg_pp1_iter1 == 1'b1)) | ((tmp_4_fu_274_p2 == 1'd0) & (1'b0 == WeightDMA_V_V_0_vld_out) & (ap_enable_reg_pp1_iter0 == 1'b1)));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_01001 = ((tmp_8_fu_286_p2 == 1'd0) & (1'b0 == WeightDMA_V_V_0_vld_out) & (ap_enable_reg_pp2_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp2_stage0_11001 = (((1'b1 == ap_block_state12_io) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((1'b1 == ap_block_state11_io) & (ap_enable_reg_pp2_iter1 == 1'b1)) | ((tmp_8_fu_286_p2 == 1'd0) & (1'b0 == WeightDMA_V_V_0_vld_out) & (ap_enable_reg_pp2_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = (((1'b1 == ap_block_state12_io) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((1'b1 == ap_block_state11_io) & (ap_enable_reg_pp2_iter1 == 1'b1)) | ((tmp_8_fu_286_p2 == 1'd0) & (1'b0 == WeightDMA_V_V_0_vld_out) & (ap_enable_reg_pp2_iter0 == 1'b1)));
end

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage0_01001 = ((tmp_s_fu_298_p2 == 1'd0) & (1'b0 == WeightDMA_V_V_0_vld_out) & (ap_enable_reg_pp3_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp3_stage0_11001 = (((1'b1 == ap_block_state16_io) & (ap_enable_reg_pp3_iter2 == 1'b1)) | ((1'b1 == ap_block_state15_io) & (ap_enable_reg_pp3_iter1 == 1'b1)) | ((tmp_s_fu_298_p2 == 1'd0) & (1'b0 == WeightDMA_V_V_0_vld_out) & (ap_enable_reg_pp3_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp3_stage0_subdone = (((1'b1 == ap_block_state16_io) & (ap_enable_reg_pp3_iter2 == 1'b1)) | ((1'b1 == ap_block_state15_io) & (ap_enable_reg_pp3_iter1 == 1'b1)) | ((tmp_s_fu_298_p2 == 1'd0) & (1'b0 == WeightDMA_V_V_0_vld_out) & (ap_enable_reg_pp3_iter0 == 1'b1)));
end

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp4_stage0_01001 = ((tmp_1_fu_310_p2 == 1'd0) & (1'b0 == WeightDMA_V_V_0_vld_out) & (ap_enable_reg_pp4_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp4_stage0_11001 = (((1'b1 == ap_block_state20_io) & (ap_enable_reg_pp4_iter2 == 1'b1)) | ((1'b1 == ap_block_state19_io) & (ap_enable_reg_pp4_iter1 == 1'b1)) | ((tmp_1_fu_310_p2 == 1'd0) & (1'b0 == WeightDMA_V_V_0_vld_out) & (ap_enable_reg_pp4_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp4_stage0_subdone = (((1'b1 == ap_block_state20_io) & (ap_enable_reg_pp4_iter2 == 1'b1)) | ((1'b1 == ap_block_state19_io) & (ap_enable_reg_pp4_iter1 == 1'b1)) | ((tmp_1_fu_310_p2 == 1'd0) & (1'b0 == WeightDMA_V_V_0_vld_out) & (ap_enable_reg_pp4_iter0 == 1'b1)));
end

assign ap_block_pp5_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp5_stage0_01001 = ((tmp_2_fu_322_p2 == 1'd0) & (1'b0 == WeightDMA_V_V_0_vld_out) & (ap_enable_reg_pp5_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp5_stage0_11001 = (((1'b1 == ap_block_state24_io) & (ap_enable_reg_pp5_iter2 == 1'b1)) | ((1'b1 == ap_block_state23_io) & (ap_enable_reg_pp5_iter1 == 1'b1)) | ((tmp_2_fu_322_p2 == 1'd0) & (1'b0 == WeightDMA_V_V_0_vld_out) & (ap_enable_reg_pp5_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp5_stage0_subdone = (((1'b1 == ap_block_state24_io) & (ap_enable_reg_pp5_iter2 == 1'b1)) | ((1'b1 == ap_block_state23_io) & (ap_enable_reg_pp5_iter1 == 1'b1)) | ((tmp_2_fu_322_p2 == 1'd0) & (1'b0 == WeightDMA_V_V_0_vld_out) & (ap_enable_reg_pp5_iter0 == 1'b1)));
end

assign ap_block_pp6_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp6_stage0_01001 = ((tmp_3_fu_334_p2 == 1'd0) & (1'b0 == WeightDMA_V_V_0_vld_out) & (ap_enable_reg_pp6_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp6_stage0_11001 = (((1'b1 == ap_block_state28_io) & (ap_enable_reg_pp6_iter2 == 1'b1)) | ((1'b1 == ap_block_state27_io) & (ap_enable_reg_pp6_iter1 == 1'b1)) | ((tmp_3_fu_334_p2 == 1'd0) & (1'b0 == WeightDMA_V_V_0_vld_out) & (ap_enable_reg_pp6_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp6_stage0_subdone = (((1'b1 == ap_block_state28_io) & (ap_enable_reg_pp6_iter2 == 1'b1)) | ((1'b1 == ap_block_state27_io) & (ap_enable_reg_pp6_iter1 == 1'b1)) | ((tmp_3_fu_334_p2 == 1'd0) & (1'b0 == WeightDMA_V_V_0_vld_out) & (ap_enable_reg_pp6_iter0 == 1'b1)));
end

assign ap_block_pp7_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp7_stage0_01001 = ((tmp_5_fu_346_p2 == 1'd0) & (1'b0 == WeightDMA_V_V_0_vld_out) & (ap_enable_reg_pp7_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp7_stage0_11001 = (((1'b1 == ap_block_state32_io) & (ap_enable_reg_pp7_iter2 == 1'b1)) | ((1'b1 == ap_block_state31_io) & (ap_enable_reg_pp7_iter1 == 1'b1)) | ((tmp_5_fu_346_p2 == 1'd0) & (1'b0 == WeightDMA_V_V_0_vld_out) & (ap_enable_reg_pp7_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp7_stage0_subdone = (((1'b1 == ap_block_state32_io) & (ap_enable_reg_pp7_iter2 == 1'b1)) | ((1'b1 == ap_block_state31_io) & (ap_enable_reg_pp7_iter1 == 1'b1)) | ((tmp_5_fu_346_p2 == 1'd0) & (1'b0 == WeightDMA_V_V_0_vld_out) & (ap_enable_reg_pp7_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_state10_pp2_stage0_iter0 = ((tmp_8_fu_286_p2 == 1'd0) & (1'b0 == WeightDMA_V_V_0_vld_out));
end

always @ (*) begin
    ap_block_state11_io = ((tmp_8_reg_376 == 1'd0) & (1'b0 == DMA9_V_V_1_ack_in));
end

assign ap_block_state11_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state12_io = ((tmp_8_reg_376_pp2_iter1_reg == 1'd0) & (1'b0 == DMA9_V_V_1_ack_in));
end

assign ap_block_state12_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state14_pp3_stage0_iter0 = ((tmp_s_fu_298_p2 == 1'd0) & (1'b0 == WeightDMA_V_V_0_vld_out));
end

always @ (*) begin
    ap_block_state15_io = ((tmp_s_reg_385 == 1'd0) & (1'b0 == DMA10_V_V_1_ack_in));
end

assign ap_block_state15_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state16_io = ((tmp_s_reg_385_pp3_iter1_reg == 1'd0) & (1'b0 == DMA10_V_V_1_ack_in));
end

assign ap_block_state16_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state18_pp4_stage0_iter0 = ((tmp_1_fu_310_p2 == 1'd0) & (1'b0 == WeightDMA_V_V_0_vld_out));
end

always @ (*) begin
    ap_block_state19_io = ((tmp_1_reg_394 == 1'd0) & (1'b0 == DMA11_V_V_1_ack_in));
end

assign ap_block_state19_pp4_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state20_io = ((tmp_1_reg_394_pp4_iter1_reg == 1'd0) & (1'b0 == DMA11_V_V_1_ack_in));
end

assign ap_block_state20_pp4_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state22_pp5_stage0_iter0 = ((tmp_2_fu_322_p2 == 1'd0) & (1'b0 == WeightDMA_V_V_0_vld_out));
end

always @ (*) begin
    ap_block_state23_io = ((tmp_2_reg_403 == 1'd0) & (1'b0 == DMA12_V_V_1_ack_in));
end

assign ap_block_state23_pp5_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state24_io = ((tmp_2_reg_403_pp5_iter1_reg == 1'd0) & (1'b0 == DMA12_V_V_1_ack_in));
end

assign ap_block_state24_pp5_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state26_pp6_stage0_iter0 = ((tmp_3_fu_334_p2 == 1'd0) & (1'b0 == WeightDMA_V_V_0_vld_out));
end

always @ (*) begin
    ap_block_state27_io = ((tmp_3_reg_412 == 1'd0) & (1'b0 == DMA13_V_V_1_ack_in));
end

assign ap_block_state27_pp6_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state28_io = ((tmp_3_reg_412_pp6_iter1_reg == 1'd0) & (1'b0 == DMA13_V_V_1_ack_in));
end

assign ap_block_state28_pp6_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((tmp_fu_262_p2 == 1'd0) & (1'b0 == WeightDMA_V_V_0_vld_out));
end

always @ (*) begin
    ap_block_state30_pp7_stage0_iter0 = ((tmp_5_fu_346_p2 == 1'd0) & (1'b0 == WeightDMA_V_V_0_vld_out));
end

always @ (*) begin
    ap_block_state31_io = ((tmp_5_reg_421 == 1'd0) & (1'b0 == DMA14_V_V_1_ack_in));
end

assign ap_block_state31_pp7_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state32_io = ((tmp_5_reg_421_pp7_iter1_reg == 1'd0) & (1'b0 == DMA14_V_V_1_ack_in));
end

assign ap_block_state32_pp7_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((tmp_reg_358 == 1'd0) & (1'b0 == DMA7_V_V_1_ack_in));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = ((tmp_reg_358_pp0_iter1_reg == 1'd0) & (1'b0 == DMA7_V_V_1_ack_in));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp1_stage0_iter0 = ((tmp_4_fu_274_p2 == 1'd0) & (1'b0 == WeightDMA_V_V_0_vld_out));
end

always @ (*) begin
    ap_block_state7_io = ((tmp_4_reg_367 == 1'd0) & (1'b0 == DMA8_V_V_1_ack_in));
end

assign ap_block_state7_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_io = ((tmp_4_reg_367_pp1_iter1_reg == 1'd0) & (1'b0 == DMA8_V_V_1_ack_in));
end

assign ap_block_state8_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

assign ap_enable_pp5 = (ap_idle_pp5 ^ 1'b1);

assign ap_enable_pp6 = (ap_idle_pp6 ^ 1'b1);

assign ap_enable_pp7 = (ap_idle_pp7 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign i_1_fu_268_p2 = (i_reg_162 + 13'd1);

assign i_2_fu_280_p2 = (i1_reg_173 + 13'd1);

assign i_3_fu_292_p2 = (i2_reg_184 + 13'd1);

assign i_4_fu_304_p2 = (i3_reg_195 + 13'd1);

assign i_5_fu_316_p2 = (i4_reg_206 + 13'd1);

assign i_6_fu_328_p2 = (i5_reg_217 + 14'd1);

assign i_7_fu_340_p2 = (i6_reg_228 + 15'd1);

assign i_8_fu_352_p2 = (i7_reg_239 + 16'd1);

assign tmp_1_fu_310_p2 = ((i4_reg_206 == 13'd4640) ? 1'b1 : 1'b0);

assign tmp_2_fu_322_p2 = ((i5_reg_217 == 14'd8864) ? 1'b1 : 1'b0);

assign tmp_3_fu_334_p2 = ((i6_reg_228 == 15'd17472) ? 1'b1 : 1'b0);

assign tmp_4_fu_274_p2 = ((i1_reg_173 == 13'd4640) ? 1'b1 : 1'b0);

assign tmp_5_fu_346_p2 = ((i7_reg_239 == 16'd65065) ? 1'b1 : 1'b0);

assign tmp_8_fu_286_p2 = ((i2_reg_184 == 13'd4640) ? 1'b1 : 1'b0);

assign tmp_fu_262_p2 = ((i_reg_162 == 13'd4640) ? 1'b1 : 1'b0);

assign tmp_s_fu_298_p2 = ((i3_reg_195 == 13'd4640) ? 1'b1 : 1'b0);

endmodule //Layer_DMA
