// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Layer5_WriteAct,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu15eg-ffvb1156-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.400000,HLS_SYN_LAT=17588,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=173,HLS_SYN_LUT=806,HLS_VERSION=2018_3}" *)

module Layer5_WriteAct (
        ap_clk,
        ap_rst_n,
        ActDMA_V_TDATA,
        ActDMA_V_TVALID,
        ActDMA_V_TREADY,
        SyncSig_V,
        SyncSig_V_ap_vld,
        SyncSig_V_ap_ack,
        ActBuf_Data_address0,
        ActBuf_Data_ce0,
        ActBuf_Data_we0,
        ActBuf_Data_d0
);

parameter    ap_ST_fsm_state1 = 18'd1;
parameter    ap_ST_fsm_state2 = 18'd2;
parameter    ap_ST_fsm_state3 = 18'd4;
parameter    ap_ST_fsm_state4 = 18'd8;
parameter    ap_ST_fsm_state5 = 18'd16;
parameter    ap_ST_fsm_state6 = 18'd32;
parameter    ap_ST_fsm_state7 = 18'd64;
parameter    ap_ST_fsm_state8 = 18'd128;
parameter    ap_ST_fsm_state9 = 18'd256;
parameter    ap_ST_fsm_state10 = 18'd512;
parameter    ap_ST_fsm_state11 = 18'd1024;
parameter    ap_ST_fsm_state12 = 18'd2048;
parameter    ap_ST_fsm_state13 = 18'd4096;
parameter    ap_ST_fsm_state14 = 18'd8192;
parameter    ap_ST_fsm_state15 = 18'd16384;
parameter    ap_ST_fsm_state16 = 18'd32768;
parameter    ap_ST_fsm_state17 = 18'd65536;
parameter    ap_ST_fsm_state18 = 18'd131072;

input   ap_clk;
input   ap_rst_n;
input  [7:0] ActDMA_V_TDATA;
input   ActDMA_V_TVALID;
output   ActDMA_V_TREADY;
output   SyncSig_V;
output   SyncSig_V_ap_vld;
input   SyncSig_V_ap_ack;
output  [10:0] ActBuf_Data_address0;
output   ActBuf_Data_ce0;
output   ActBuf_Data_we0;
output  [31:0] ActBuf_Data_d0;

reg[10:0] ActBuf_Data_address0;
reg ActBuf_Data_ce0;
reg ActBuf_Data_we0;
reg[31:0] ActBuf_Data_d0;

 reg    ap_rst_n_inv;
reg   [7:0] ActDMA_V_0_data_out;
wire    ActDMA_V_0_vld_in;
wire    ActDMA_V_0_vld_out;
wire    ActDMA_V_0_ack_in;
reg    ActDMA_V_0_ack_out;
reg   [7:0] ActDMA_V_0_payload_A;
reg   [7:0] ActDMA_V_0_payload_B;
reg    ActDMA_V_0_sel_rd;
reg    ActDMA_V_0_sel_wr;
wire    ActDMA_V_0_sel;
wire    ActDMA_V_0_load_A;
wire    ActDMA_V_0_load_B;
reg   [1:0] ActDMA_V_0_state;
wire    ActDMA_V_0_state_cmp_full;
reg    SyncSig_V_1_data_reg;
reg    SyncSig_V_1_vld_reg;
reg    SyncSig_V_1_vld_in;
reg    SyncSig_V_1_ack_in;
wire    SyncSig_V_1_ack_out;
reg    ActDMA_V_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [17:0] ap_CS_fsm;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
reg    SyncSig_V_blk_n;
wire    ap_CS_fsm_state13;
wire   [0:0] icmp_fu_673_p2;
wire    ap_CS_fsm_state14;
reg   [0:0] icmp_reg_875;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
wire   [10:0] grp_fu_360_p2;
wire    ap_CS_fsm_state5;
reg   [10:0] reg_780;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state15;
wire   [0:0] grp_fu_764_p2;
wire   [6:0] tmp_s_fu_457_p2;
reg   [6:0] tmp_s_reg_793;
reg   [10:0] reg_798;
wire   [8:0] grp_fu_752_p2;
wire   [10:0] tmp_4_fu_487_p2;
wire   [4:0] t_V_8_mid2_fu_548_p3;
reg   [4:0] reg_817;
wire   [4:0] t_V_1_fu_374_p3;
wire   [4:0] t_V_13_fu_705_p3;
wire   [4:0] t_V_8_fu_556_p3;
reg   [4:0] t_V_8_reg_823;
reg   [7:0] tmp_29_reg_834;
wire   [7:0] indvar_flatten_next7_fu_608_p2;
wire    ap_CS_fsm_state12;
wire   [1:0] t_V_9_fu_657_p2;
reg   [1:0] t_V_9_reg_870;
reg    ap_block_state13_io;
reg    ap_block_state14_io;
wire   [0:0] exitcond1_fu_685_p2;
reg   [7:0] tmp_30_reg_893;
reg   [0:0] exitcond4_reg_182;
wire    ap_CS_fsm_state1;
wire   [0:0] exitcond_flatten_fu_421_p2;
reg   [4:0] t_V_s_reg_193;
reg   [4:0] t_V_reg_204;
reg   [8:0] indvar_flatten_reg_215;
reg   [4:0] t_V_2_reg_226;
wire    ap_CS_fsm_state3;
reg   [1:0] t_V_4_reg_238;
reg   [4:0] t_V_3_reg_250;
wire   [0:0] exitcond3_fu_427_p2;
reg   [0:0] exitcond8_reg_261;
wire   [0:0] exitcond_flatten8_fu_625_p2;
wire    ap_CS_fsm_state6;
reg   [4:0] t_V_5_reg_272;
reg   [4:0] t_V_7_reg_283;
reg   [7:0] indvar_flatten1_reg_294;
reg   [4:0] t_V_6_reg_305;
wire   [0:0] exitcond5_fu_631_p2;
wire    ap_CS_fsm_state11;
reg   [0:0] exitcond7_reg_316;
wire   [0:0] exitcond_flatten1_fu_758_p2;
reg   [4:0] t_V_11_reg_327;
reg   [4:0] t_V_12_reg_338;
reg   [8:0] indvar_flatten2_reg_349;
wire   [63:0] tmp_6_cast_fu_404_p1;
wire   [63:0] tmp_15_fu_537_p1;
wire   [63:0] tmp_40_cast_fu_593_p1;
wire   [63:0] tmp_41_cast_fu_652_p1;
wire   [63:0] tmp_32_cast_fu_741_p1;
wire   [31:0] tmp_19_fu_598_p5;
reg   [10:0] grp_fu_360_p0;
wire   [4:0] t_V_1_mid2_fu_366_p3;
wire   [4:0] t_V_5_mid2_fu_697_p3;
reg   [10:0] grp_fu_360_p1;
wire   [4:0] c_V_fu_505_p2;
wire   [8:0] tmp_fu_386_p3;
wire   [9:0] tmp_3_cast_fu_382_p1;
wire   [9:0] tmp_4_cast_fu_394_p1;
wire   [9:0] tmp_6_fu_398_p2;
wire   [9:0] tmp_30_cast_fu_725_p1;
wire   [5:0] tmp_7_fu_433_p3;
wire   [2:0] tmp_9_fu_445_p3;
wire   [6:0] p_shl3_cast_fu_453_p1;
wire   [6:0] p_shl2_cast_fu_441_p1;
wire   [9:0] tmp_2_fu_463_p3;
wire   [6:0] tmp_3_fu_475_p3;
wire   [10:0] p_shl1_cast_fu_483_p1;
wire   [10:0] p_shl_cast_fu_471_p1;
wire   [4:0] tmp_11_fu_511_p1;
wire   [5:0] tmp_13_fu_520_p4;
wire   [4:0] tmp_12_fu_514_p2;
wire   [10:0] tmp_14_fu_529_p3;
wire   [4:0] t_V_8_fu_556_p1;
wire   [6:0] tmp_17_fu_613_p2;
wire   [10:0] tmp_23_fu_575_p3;
wire   [11:0] tmp_39_cast_fu_583_p1;
wire   [11:0] tmp_16_cast_fu_564_p1;
wire   [11:0] tmp_18_fu_587_p2;
wire   [7:0] tmp_19_fu_598_p4;
wire   [6:0] tmp_17_cast_fu_567_p1;
wire   [10:0] tmp_11_cast_fu_643_p1;
wire   [10:0] tmp_22_fu_637_p2;
wire   [3:0] tmp_24_fu_663_p4;
wire   [4:0] exitcond1_fu_685_p0;
wire   [4:0] c_V_1_fu_691_p2;
wire   [8:0] tmp_25_fu_717_p3;
wire   [9:0] tmp_cast_fu_713_p1;
wire   [9:0] tmp_26_fu_409_p2;
wire   [9:0] tmp_27_fu_735_p2;
reg   [8:0] grp_fu_752_p0;
wire   [4:0] grp_fu_764_p0;
reg   [17:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ActDMA_V_0_sel_rd = 1'b0;
#0 ActDMA_V_0_sel_wr = 1'b0;
#0 ActDMA_V_0_state = 2'd0;
#0 SyncSig_V_1_data_reg = 1'b0;
#0 SyncSig_V_1_vld_reg = 1'b0;
#0 ap_CS_fsm = 18'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ActDMA_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == ActDMA_V_0_ack_out) & (1'b1 == ActDMA_V_0_vld_out))) begin
            ActDMA_V_0_sel_rd <= ~ActDMA_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ActDMA_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == ActDMA_V_0_ack_in) & (1'b1 == ActDMA_V_0_vld_in))) begin
            ActDMA_V_0_sel_wr <= ~ActDMA_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ActDMA_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == ActDMA_V_0_state) & (1'b0 == ActDMA_V_0_vld_in)) | ((2'd3 == ActDMA_V_0_state) & (1'b0 == ActDMA_V_0_vld_in) & (1'b1 == ActDMA_V_0_ack_out)))) begin
            ActDMA_V_0_state <= 2'd2;
        end else if ((((2'd1 == ActDMA_V_0_state) & (1'b0 == ActDMA_V_0_ack_out)) | ((2'd3 == ActDMA_V_0_state) & (1'b0 == ActDMA_V_0_ack_out) & (1'b1 == ActDMA_V_0_vld_in)))) begin
            ActDMA_V_0_state <= 2'd1;
        end else if (((~((1'b0 == ActDMA_V_0_vld_in) & (1'b1 == ActDMA_V_0_ack_out)) & ~((1'b0 == ActDMA_V_0_ack_out) & (1'b1 == ActDMA_V_0_vld_in)) & (2'd3 == ActDMA_V_0_state)) | ((2'd1 == ActDMA_V_0_state) & (1'b1 == ActDMA_V_0_ack_out)) | ((2'd2 == ActDMA_V_0_state) & (1'b1 == ActDMA_V_0_vld_in)))) begin
            ActDMA_V_0_state <= 2'd3;
        end else begin
            ActDMA_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == SyncSig_V_1_vld_reg) & (1'b1 == SyncSig_V_1_vld_in))) begin
        SyncSig_V_1_vld_reg <= 1'b1;
    end else if (((1'b0 == SyncSig_V_1_vld_in) & (1'b1 == SyncSig_V_1_ack_out) & (1'b1 == SyncSig_V_1_vld_reg))) begin
        SyncSig_V_1_vld_reg <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_421_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        exitcond4_reg_182 <= grp_fu_764_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        exitcond4_reg_182 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_685_p2 == 1'd1) & (1'b0 == ap_block_state14_io) & (1'b1 == ap_CS_fsm_state14))) begin
        exitcond7_reg_316 <= 1'd0;
    end else if (((exitcond_flatten1_fu_758_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
        exitcond7_reg_316 <= grp_fu_764_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        exitcond8_reg_261 <= 1'd0;
    end else if (((exitcond_flatten8_fu_625_p2 == 1'd0) & (1'b1 == ActDMA_V_0_vld_out) & (1'b1 == ap_CS_fsm_state10))) begin
        exitcond8_reg_261 <= grp_fu_764_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        indvar_flatten1_reg_294 <= 8'd0;
    end else if (((exitcond_flatten8_fu_625_p2 == 1'd0) & (1'b1 == ActDMA_V_0_vld_out) & (1'b1 == ap_CS_fsm_state10))) begin
        indvar_flatten1_reg_294 <= indvar_flatten_next7_fu_608_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_685_p2 == 1'd1) & (1'b0 == ap_block_state14_io) & (1'b1 == ap_CS_fsm_state14))) begin
        indvar_flatten2_reg_349 <= 9'd0;
    end else if (((exitcond_flatten1_fu_758_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
        indvar_flatten2_reg_349 <= grp_fu_752_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_421_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten_reg_215 <= grp_fu_752_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        indvar_flatten_reg_215 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        reg_798 <= tmp_4_fu_487_p2;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state2))) begin
        reg_798 <= grp_fu_752_p2;
    end else if (((1'b1 == ActDMA_V_0_vld_out) & (1'b1 == ap_CS_fsm_state7))) begin
        reg_798 <= ActDMA_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        reg_817 <= t_V_13_fu_705_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        reg_817 <= t_V_1_fu_374_p3;
    end else if (((1'b1 == ActDMA_V_0_vld_out) & (1'b1 == ap_CS_fsm_state7))) begin
        reg_817 <= t_V_8_mid2_fu_548_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_685_p2 == 1'd1) & (1'b0 == ap_block_state14_io) & (1'b1 == ap_CS_fsm_state14))) begin
        t_V_11_reg_327 <= 5'd0;
    end else if (((exitcond_flatten1_fu_758_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
        t_V_11_reg_327 <= grp_fu_360_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_685_p2 == 1'd1) & (1'b0 == ap_block_state14_io) & (1'b1 == ap_CS_fsm_state14))) begin
        t_V_12_reg_338 <= 5'd0;
    end else if (((exitcond_flatten1_fu_758_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
        t_V_12_reg_338 <= t_V_13_fu_705_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_685_p2 == 1'd0) & (1'b0 == ap_block_state14_io) & (1'b1 == ap_CS_fsm_state14))) begin
        t_V_2_reg_226 <= grp_fu_360_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        t_V_2_reg_226 <= 5'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        t_V_3_reg_250 <= 5'd0;
    end else if (((exitcond3_fu_427_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        t_V_3_reg_250 <= grp_fu_360_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_685_p2 == 1'd0) & (1'b0 == ap_block_state14_io) & (1'b1 == ap_CS_fsm_state14))) begin
        t_V_4_reg_238 <= t_V_9_reg_870;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        t_V_4_reg_238 <= 2'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        t_V_5_reg_272 <= 5'd0;
    end else if (((exitcond_flatten8_fu_625_p2 == 1'd0) & (1'b1 == ActDMA_V_0_vld_out) & (1'b1 == ap_CS_fsm_state10))) begin
        t_V_5_reg_272 <= grp_fu_360_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        t_V_6_reg_305 <= 5'd0;
    end else if (((exitcond5_fu_631_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        t_V_6_reg_305 <= grp_fu_360_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        t_V_7_reg_283 <= 5'd1;
    end else if (((exitcond_flatten8_fu_625_p2 == 1'd0) & (1'b1 == ActDMA_V_0_vld_out) & (1'b1 == ap_CS_fsm_state10))) begin
        t_V_7_reg_283 <= t_V_8_reg_823;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_421_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        t_V_reg_204 <= t_V_1_fu_374_p3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        t_V_reg_204 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_421_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        t_V_s_reg_193 <= grp_fu_360_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        t_V_s_reg_193 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ActDMA_V_0_load_A)) begin
        ActDMA_V_0_payload_A <= ActDMA_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ActDMA_V_0_load_B)) begin
        ActDMA_V_0_payload_B <= ActDMA_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == SyncSig_V_1_vld_reg) & (1'b1 == SyncSig_V_1_vld_in)) | ((1'b1 == SyncSig_V_1_ack_out) & (1'b1 == SyncSig_V_1_vld_in) & (1'b1 == SyncSig_V_1_vld_reg)))) begin
        SyncSig_V_1_data_reg <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state13_io) & (1'b1 == ap_CS_fsm_state13))) begin
        icmp_reg_875 <= icmp_fu_673_p2;
        t_V_9_reg_870 <= t_V_9_fu_657_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        reg_780 <= grp_fu_360_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ActDMA_V_0_vld_out) & (1'b1 == ap_CS_fsm_state7))) begin
        t_V_8_reg_823 <= t_V_8_fu_556_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ActDMA_V_0_vld_out) & (1'b1 == ap_CS_fsm_state8))) begin
        tmp_29_reg_834 <= ActDMA_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ActDMA_V_0_vld_out) & (1'b1 == ap_CS_fsm_state9))) begin
        tmp_30_reg_893 <= ActDMA_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_s_reg_793[6 : 1] <= tmp_s_fu_457_p2[6 : 1];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        ActBuf_Data_address0 = tmp_32_cast_fu_741_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        ActBuf_Data_address0 = tmp_41_cast_fu_652_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        ActBuf_Data_address0 = tmp_40_cast_fu_593_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        ActBuf_Data_address0 = tmp_15_fu_537_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        ActBuf_Data_address0 = tmp_6_cast_fu_404_p1;
    end else begin
        ActBuf_Data_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state5) | ((1'b1 == ActDMA_V_0_vld_out) & (1'b1 == ap_CS_fsm_state10)))) begin
        ActBuf_Data_ce0 = 1'b1;
    end else begin
        ActBuf_Data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ActBuf_Data_d0 = tmp_19_fu_598_p5;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state5))) begin
        ActBuf_Data_d0 = 32'd0;
    end else begin
        ActBuf_Data_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state2) | ((exitcond5_fu_631_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12)) | ((exitcond3_fu_427_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)) | ((1'b1 == ActDMA_V_0_vld_out) & (1'b1 == ap_CS_fsm_state10)))) begin
        ActBuf_Data_we0 = 1'b1;
    end else begin
        ActBuf_Data_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ActDMA_V_0_vld_out) & (1'b1 == ap_CS_fsm_state10)) | ((1'b1 == ActDMA_V_0_vld_out) & (1'b1 == ap_CS_fsm_state9)) | ((1'b1 == ActDMA_V_0_vld_out) & (1'b1 == ap_CS_fsm_state8)) | ((1'b1 == ActDMA_V_0_vld_out) & (1'b1 == ap_CS_fsm_state7)))) begin
        ActDMA_V_0_ack_out = 1'b1;
    end else begin
        ActDMA_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ActDMA_V_0_sel)) begin
        ActDMA_V_0_data_out = ActDMA_V_0_payload_B;
    end else begin
        ActDMA_V_0_data_out = ActDMA_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        ActDMA_V_TDATA_blk_n = ActDMA_V_0_state[1'd0];
    end else begin
        ActDMA_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == SyncSig_V_1_vld_reg) | ((1'b1 == SyncSig_V_1_ack_out) & (1'b1 == SyncSig_V_1_vld_reg)))) begin
        SyncSig_V_1_ack_in = 1'b1;
    end else begin
        SyncSig_V_1_ack_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state17) & (1'b1 == SyncSig_V_1_ack_in)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == SyncSig_V_1_ack_in)) | ((icmp_fu_673_p2 == 1'd0) & (1'b0 == ap_block_state13_io) & (1'b1 == ap_CS_fsm_state13)))) begin
        SyncSig_V_1_vld_in = 1'b1;
    end else begin
        SyncSig_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | ((icmp_reg_875 == 1'd0) & (1'b1 == ap_CS_fsm_state14)) | ((icmp_fu_673_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13)))) begin
        SyncSig_V_blk_n = SyncSig_V_1_ack_in;
    end else begin
        SyncSig_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_360_p0 = t_V_5_mid2_fu_697_p3;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_360_p0 = t_V_2_reg_226;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_360_p0 = t_V_6_reg_305;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_360_p0 = reg_817;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_360_p0 = t_V_7_reg_283;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_360_p0 = t_V_3_reg_250;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_360_p0 = tmp_4_fu_487_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_360_p0 = t_V_1_mid2_fu_366_p3;
    end else begin
        grp_fu_360_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_360_p1 = 11'd272;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7))) begin
        grp_fu_360_p1 = 5'd1;
    end else begin
        grp_fu_360_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_752_p0 = indvar_flatten2_reg_349;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_752_p0 = indvar_flatten_reg_215;
    end else begin
        grp_fu_752_p0 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond_flatten_fu_421_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((exitcond3_fu_427_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ActDMA_V_0_vld_out) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ActDMA_V_0_vld_out) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ActDMA_V_0_vld_out) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((exitcond_flatten8_fu_625_p2 == 1'd0) & (1'b1 == ActDMA_V_0_vld_out) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else if (((exitcond_flatten8_fu_625_p2 == 1'd1) & (1'b1 == ActDMA_V_0_vld_out) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((exitcond5_fu_631_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((1'b0 == ap_block_state13_io) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((exitcond1_fu_685_p2 == 1'd1) & (1'b0 == ap_block_state14_io) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else if (((exitcond1_fu_685_p2 == 1'd0) & (1'b0 == ap_block_state14_io) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((exitcond_flatten1_fu_758_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == ap_CS_fsm_state16) & (1'b1 == SyncSig_V_1_ack_in))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((1'b1 == ap_CS_fsm_state17) & (1'b1 == SyncSig_V_1_ack_in))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((1'b1 == ap_CS_fsm_state18) & (1'b1 == SyncSig_V_1_ack_in))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ActDMA_V_0_ack_in = ActDMA_V_0_state[1'd1];

assign ActDMA_V_0_load_A = (~ActDMA_V_0_sel_wr & ActDMA_V_0_state_cmp_full);

assign ActDMA_V_0_load_B = (ActDMA_V_0_state_cmp_full & ActDMA_V_0_sel_wr);

assign ActDMA_V_0_sel = ActDMA_V_0_sel_rd;

assign ActDMA_V_0_state_cmp_full = ((ActDMA_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign ActDMA_V_0_vld_in = ActDMA_V_TVALID;

assign ActDMA_V_0_vld_out = ActDMA_V_0_state[1'd0];

assign ActDMA_V_TREADY = ActDMA_V_0_state[1'd1];

assign SyncSig_V = SyncSig_V_1_data_reg;

assign SyncSig_V_1_ack_out = SyncSig_V_ap_ack;

assign SyncSig_V_ap_vld = SyncSig_V_1_vld_reg;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state13_io = ((icmp_fu_673_p2 == 1'd0) & (1'b0 == SyncSig_V_1_ack_in));
end

always @ (*) begin
    ap_block_state14_io = ((icmp_reg_875 == 1'd0) & (1'b0 == SyncSig_V_1_ack_in));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign c_V_1_fu_691_p2 = (t_V_12_reg_338 + 5'd1);

assign c_V_fu_505_p2 = (t_V_reg_204 + 5'd1);

assign exitcond1_fu_685_p0 = grp_fu_360_p2;

assign exitcond1_fu_685_p2 = ((exitcond1_fu_685_p0 == 5'd17) ? 1'b1 : 1'b0);

assign exitcond3_fu_427_p2 = ((t_V_3_reg_250 == 5'd16) ? 1'b1 : 1'b0);

assign exitcond5_fu_631_p2 = ((t_V_6_reg_305 == 5'd16) ? 1'b1 : 1'b0);

assign exitcond_flatten1_fu_758_p2 = ((indvar_flatten2_reg_349 == 9'd287) ? 1'b1 : 1'b0);

assign exitcond_flatten8_fu_625_p2 = ((indvar_flatten1_reg_294 == 8'd255) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_421_p2 = ((indvar_flatten_reg_215 == 9'd287) ? 1'b1 : 1'b0);

assign grp_fu_360_p2 = (grp_fu_360_p0 + grp_fu_360_p1);

assign grp_fu_752_p2 = (grp_fu_752_p0 + 9'd1);

assign grp_fu_764_p0 = grp_fu_360_p2;

assign grp_fu_764_p2 = ((grp_fu_764_p0 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_fu_673_p2 = ((tmp_24_fu_663_p4 == 4'd0) ? 1'b1 : 1'b0);

assign indvar_flatten_next7_fu_608_p2 = (indvar_flatten1_reg_294 + 8'd1);

assign p_shl1_cast_fu_483_p1 = tmp_3_fu_475_p3;

assign p_shl2_cast_fu_441_p1 = tmp_7_fu_433_p3;

assign p_shl3_cast_fu_453_p1 = tmp_9_fu_445_p3;

assign p_shl_cast_fu_471_p1 = tmp_2_fu_463_p3;

assign t_V_13_fu_705_p3 = ((exitcond7_reg_316[0:0] === 1'b1) ? c_V_1_fu_691_p2 : t_V_12_reg_338);

assign t_V_1_fu_374_p3 = ((exitcond4_reg_182[0:0] === 1'b1) ? c_V_fu_505_p2 : t_V_reg_204);

assign t_V_1_mid2_fu_366_p3 = ((exitcond4_reg_182[0:0] === 1'b1) ? 5'd0 : t_V_s_reg_193);

assign t_V_5_mid2_fu_697_p3 = ((exitcond7_reg_316[0:0] === 1'b1) ? 5'd0 : t_V_11_reg_327);

assign t_V_8_fu_556_p1 = grp_fu_360_p2;

assign t_V_8_fu_556_p3 = ((exitcond8_reg_261[0:0] === 1'b1) ? t_V_8_fu_556_p1 : t_V_7_reg_283);

assign t_V_8_mid2_fu_548_p3 = ((exitcond8_reg_261[0:0] === 1'b1) ? 5'd0 : t_V_5_reg_272);

assign t_V_9_fu_657_p2 = (t_V_4_reg_238 + 2'd1);

assign tmp_11_cast_fu_643_p1 = t_V_6_reg_305;

assign tmp_11_fu_511_p1 = reg_798[4:0];

assign tmp_12_fu_514_p2 = (tmp_11_fu_511_p1 | t_V_3_reg_250);

assign tmp_13_fu_520_p4 = {{reg_798[10:5]}};

assign tmp_14_fu_529_p3 = {{tmp_13_fu_520_p4}, {tmp_12_fu_514_p2}};

assign tmp_15_fu_537_p1 = tmp_14_fu_529_p3;

assign tmp_16_cast_fu_564_p1 = reg_817;

assign tmp_17_cast_fu_567_p1 = t_V_8_reg_823;

assign tmp_17_fu_613_p2 = (tmp_s_reg_793 + tmp_17_cast_fu_567_p1);

assign tmp_18_fu_587_p2 = (tmp_39_cast_fu_583_p1 + tmp_16_cast_fu_564_p1);

assign tmp_19_fu_598_p4 = reg_798;

assign tmp_19_fu_598_p5 = {{{{ActDMA_V_0_data_out}, {tmp_30_reg_893}}, {tmp_29_reg_834}}, {tmp_19_fu_598_p4}};

assign tmp_22_fu_637_p2 = (reg_780 + tmp_11_cast_fu_643_p1);

assign tmp_23_fu_575_p3 = {{tmp_17_fu_613_p2}, {4'd0}};

assign tmp_24_fu_663_p4 = {{t_V_2_reg_226[4:1]}};

assign tmp_25_fu_717_p3 = {{t_V_13_fu_705_p3}, {4'd0}};

assign tmp_26_fu_409_p2 = (tmp_30_cast_fu_725_p1 + 10'd288);

assign tmp_27_fu_735_p2 = (tmp_cast_fu_713_p1 + tmp_26_fu_409_p2);

assign tmp_2_fu_463_p3 = {{t_V_4_reg_238}, {8'd0}};

assign tmp_30_cast_fu_725_p1 = tmp_25_fu_717_p3;

assign tmp_32_cast_fu_741_p1 = tmp_27_fu_735_p2;

assign tmp_39_cast_fu_583_p1 = tmp_23_fu_575_p3;

assign tmp_3_cast_fu_382_p1 = t_V_1_mid2_fu_366_p3;

assign tmp_3_fu_475_p3 = {{t_V_4_reg_238}, {5'd0}};

assign tmp_40_cast_fu_593_p1 = tmp_18_fu_587_p2;

assign tmp_41_cast_fu_652_p1 = tmp_22_fu_637_p2;

assign tmp_4_cast_fu_394_p1 = tmp_fu_386_p3;

assign tmp_4_fu_487_p2 = (p_shl1_cast_fu_483_p1 + p_shl_cast_fu_471_p1);

assign tmp_6_cast_fu_404_p1 = tmp_6_fu_398_p2;

assign tmp_6_fu_398_p2 = (tmp_3_cast_fu_382_p1 + tmp_4_cast_fu_394_p1);

assign tmp_7_fu_433_p3 = {{t_V_4_reg_238}, {4'd0}};

assign tmp_9_fu_445_p3 = {{t_V_4_reg_238}, {1'd0}};

assign tmp_cast_fu_713_p1 = t_V_5_mid2_fu_697_p3;

assign tmp_fu_386_p3 = {{t_V_1_fu_374_p3}, {4'd0}};

assign tmp_s_fu_457_p2 = (p_shl3_cast_fu_453_p1 + p_shl2_cast_fu_441_p1);

always @ (posedge ap_clk) begin
    tmp_s_reg_793[0] <= 1'b0;
end

endmodule //Layer5_WriteAct
