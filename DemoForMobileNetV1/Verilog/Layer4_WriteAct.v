// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Layer4_WriteAct,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu15eg-ffvb1156-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.822000,HLS_SYN_LAT=32866,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=84,HLS_SYN_LUT=342,HLS_VERSION=2018_3}" *)

module Layer4_WriteAct (
        ap_clk,
        ap_rst_n,
        ActDMA_V_TDATA,
        ActDMA_V_TVALID,
        ActDMA_V_TREADY,
        SyncSig_V,
        SyncSig_V_ap_vld,
        SyncSig_V_ap_ack,
        ActBuf_Data_address0,
        ActBuf_Data_ce0,
        ActBuf_Data_we0,
        ActBuf_Data_d0
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst_n;
input  [7:0] ActDMA_V_TDATA;
input   ActDMA_V_TVALID;
output   ActDMA_V_TREADY;
output   SyncSig_V;
output   SyncSig_V_ap_vld;
input   SyncSig_V_ap_ack;
output  [11:0] ActBuf_Data_address0;
output   ActBuf_Data_ce0;
output   ActBuf_Data_we0;
output  [15:0] ActBuf_Data_d0;

reg ActBuf_Data_ce0;
reg ActBuf_Data_we0;

 reg    ap_rst_n_inv;
reg   [7:0] ActDMA_V_0_data_out;
wire    ActDMA_V_0_vld_in;
wire    ActDMA_V_0_vld_out;
wire    ActDMA_V_0_ack_in;
reg    ActDMA_V_0_ack_out;
reg   [7:0] ActDMA_V_0_payload_A;
reg   [7:0] ActDMA_V_0_payload_B;
reg    ActDMA_V_0_sel_rd;
reg    ActDMA_V_0_sel_wr;
wire    ActDMA_V_0_sel;
wire    ActDMA_V_0_load_A;
wire    ActDMA_V_0_load_B;
reg   [1:0] ActDMA_V_0_state;
wire    ActDMA_V_0_state_cmp_full;
reg    SyncSig_V_1_data_reg;
reg    SyncSig_V_1_vld_reg;
reg    SyncSig_V_1_vld_in;
reg    SyncSig_V_1_ack_in;
wire    SyncSig_V_1_ack_out;
reg    ActDMA_V_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
reg    SyncSig_V_blk_n;
wire    ap_CS_fsm_state5;
wire   [0:0] demorgan_fu_331_p2;
wire    ap_CS_fsm_state6;
reg   [0:0] demorgan_reg_388;
wire   [0:0] tmp_fu_337_p2;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire   [4:0] t_V_3_mid2_fu_209_p3;
reg   [4:0] t_V_3_mid2_reg_348;
wire   [5:0] t_V_fu_201_p3;
reg   [5:0] t_V_reg_354;
reg   [7:0] reg_360;
wire   [2:0] t_V_3_fu_303_p3;
reg    ap_block_state5_io;
wire   [4:0] t_V_5_fu_235_p2;
wire   [8:0] indvar_flatten_next_fu_273_p2;
wire   [0:0] exitcond_fu_285_p2;
wire   [4:0] p_Val2_s_fu_189_p2;
reg   [4:0] p_Val2_s_reg_383;
wire    ap_CS_fsm_state2;
reg   [2:0] t_V6_reg_121;
wire    ap_CS_fsm_state1;
reg    ap_block_state6_io;
reg   [4:0] p_Val2_5_reg_133;
reg   [0:0] exitcond4_reg_145;
wire   [0:0] exitcond_flatten_fu_279_p2;
reg   [4:0] t_V_s_reg_156;
reg   [5:0] t_V_1_reg_167;
reg   [8:0] indvar_flatten1_reg_178;
wire   [63:0] tmp_17_cast_fu_255_p1;
wire   [5:0] c_V_fu_195_p2;
wire   [7:0] tmp_s_fu_260_p3;
wire   [8:0] tmp_1_fu_268_p2;
wire   [12:0] tmp_cast_fu_220_p1;
wire   [12:0] tmp_16_cast_fu_241_p3;
wire   [12:0] tmp_2_fu_249_p2;
wire   [8:0] tmp_10_cast_fu_217_p1;
wire   [8:0] tmp_12_cast_fu_231_p1;
wire   [3:0] tmp_4_fu_311_p4;
wire   [0:0] tmp_5_fu_321_p2;
wire   [2:0] rRow_V_fu_291_p2;
wire   [0:0] tmp_6_fu_327_p1;
wire   [0:0] icmp_fu_297_p2;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ActDMA_V_0_sel_rd = 1'b0;
#0 ActDMA_V_0_sel_wr = 1'b0;
#0 ActDMA_V_0_state = 2'd0;
#0 SyncSig_V_1_data_reg = 1'b0;
#0 SyncSig_V_1_vld_reg = 1'b0;
#0 ap_CS_fsm = 8'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ActDMA_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == ActDMA_V_0_ack_out) & (1'b1 == ActDMA_V_0_vld_out))) begin
            ActDMA_V_0_sel_rd <= ~ActDMA_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ActDMA_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == ActDMA_V_0_ack_in) & (1'b1 == ActDMA_V_0_vld_in))) begin
            ActDMA_V_0_sel_wr <= ~ActDMA_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ActDMA_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == ActDMA_V_0_state) & (1'b0 == ActDMA_V_0_vld_in)) | ((2'd3 == ActDMA_V_0_state) & (1'b0 == ActDMA_V_0_vld_in) & (1'b1 == ActDMA_V_0_ack_out)))) begin
            ActDMA_V_0_state <= 2'd2;
        end else if ((((2'd1 == ActDMA_V_0_state) & (1'b0 == ActDMA_V_0_ack_out)) | ((2'd3 == ActDMA_V_0_state) & (1'b0 == ActDMA_V_0_ack_out) & (1'b1 == ActDMA_V_0_vld_in)))) begin
            ActDMA_V_0_state <= 2'd1;
        end else if (((~((1'b0 == ActDMA_V_0_vld_in) & (1'b1 == ActDMA_V_0_ack_out)) & ~((1'b0 == ActDMA_V_0_ack_out) & (1'b1 == ActDMA_V_0_vld_in)) & (2'd3 == ActDMA_V_0_state)) | ((2'd1 == ActDMA_V_0_state) & (1'b1 == ActDMA_V_0_ack_out)) | ((2'd2 == ActDMA_V_0_state) & (1'b1 == ActDMA_V_0_vld_in)))) begin
            ActDMA_V_0_state <= 2'd3;
        end else begin
            ActDMA_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == SyncSig_V_1_vld_reg) & (1'b1 == SyncSig_V_1_vld_in))) begin
        SyncSig_V_1_vld_reg <= 1'b1;
    end else if (((1'b0 == SyncSig_V_1_vld_in) & (1'b1 == SyncSig_V_1_ack_out) & (1'b1 == SyncSig_V_1_vld_reg))) begin
        SyncSig_V_1_vld_reg <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_279_p2 == 1'd0) & (1'b1 == ActDMA_V_0_vld_out) & (1'b1 == ap_CS_fsm_state4))) begin
        exitcond4_reg_145 <= exitcond_fu_285_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        exitcond4_reg_145 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_279_p2 == 1'd0) & (1'b1 == ActDMA_V_0_vld_out) & (1'b1 == ap_CS_fsm_state4))) begin
        indvar_flatten1_reg_178 <= indvar_flatten_next_fu_273_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten1_reg_178 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_337_p2 == 1'd0) & (1'b0 == ap_block_state6_io) & (1'b1 == ap_CS_fsm_state6))) begin
        p_Val2_5_reg_133 <= p_Val2_s_reg_383;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        p_Val2_5_reg_133 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5_io))) begin
        reg_360 <= t_V_3_fu_303_p3;
    end else if (((1'b1 == ActDMA_V_0_vld_out) & (1'b1 == ap_CS_fsm_state3))) begin
        reg_360 <= ActDMA_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_337_p2 == 1'd0) & (1'b0 == ap_block_state6_io) & (1'b1 == ap_CS_fsm_state6))) begin
        t_V6_reg_121 <= reg_360;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        t_V6_reg_121 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_279_p2 == 1'd0) & (1'b1 == ActDMA_V_0_vld_out) & (1'b1 == ap_CS_fsm_state4))) begin
        t_V_1_reg_167 <= t_V_reg_354;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        t_V_1_reg_167 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_279_p2 == 1'd0) & (1'b1 == ActDMA_V_0_vld_out) & (1'b1 == ap_CS_fsm_state4))) begin
        t_V_s_reg_156 <= t_V_5_fu_235_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        t_V_s_reg_156 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ActDMA_V_0_load_A)) begin
        ActDMA_V_0_payload_A <= ActDMA_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ActDMA_V_0_load_B)) begin
        ActDMA_V_0_payload_B <= ActDMA_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == SyncSig_V_1_vld_reg) & (1'b1 == SyncSig_V_1_vld_in)) | ((1'b1 == SyncSig_V_1_ack_out) & (1'b1 == SyncSig_V_1_vld_in) & (1'b1 == SyncSig_V_1_vld_reg)))) begin
        SyncSig_V_1_data_reg <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5_io))) begin
        demorgan_reg_388 <= demorgan_fu_331_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        p_Val2_s_reg_383 <= p_Val2_s_fu_189_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ActDMA_V_0_vld_out) & (1'b1 == ap_CS_fsm_state3))) begin
        t_V_3_mid2_reg_348 <= t_V_3_mid2_fu_209_p3;
        t_V_reg_354 <= t_V_fu_201_p3;
    end
end

always @ (*) begin
    if (((1'b1 == ActDMA_V_0_vld_out) & (1'b1 == ap_CS_fsm_state4))) begin
        ActBuf_Data_ce0 = 1'b1;
    end else begin
        ActBuf_Data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ActDMA_V_0_vld_out) & (1'b1 == ap_CS_fsm_state4))) begin
        ActBuf_Data_we0 = 1'b1;
    end else begin
        ActBuf_Data_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ActDMA_V_0_vld_out) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == ActDMA_V_0_vld_out) & (1'b1 == ap_CS_fsm_state3)))) begin
        ActDMA_V_0_ack_out = 1'b1;
    end else begin
        ActDMA_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ActDMA_V_0_sel)) begin
        ActDMA_V_0_data_out = ActDMA_V_0_payload_B;
    end else begin
        ActDMA_V_0_data_out = ActDMA_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        ActDMA_V_TDATA_blk_n = ActDMA_V_0_state[1'd0];
    end else begin
        ActDMA_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == SyncSig_V_1_vld_reg) | ((1'b1 == SyncSig_V_1_ack_out) & (1'b1 == SyncSig_V_1_vld_reg)))) begin
        SyncSig_V_1_ack_in = 1'b1;
    end else begin
        SyncSig_V_1_ack_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == SyncSig_V_1_ack_in) & (1'b1 == ap_CS_fsm_state7)) | ((tmp_fu_337_p2 == 1'd1) & (1'b0 == ap_block_state6_io) & (1'b1 == ap_CS_fsm_state6)) | ((demorgan_fu_331_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5_io)))) begin
        SyncSig_V_1_vld_in = 1'b1;
    end else begin
        SyncSig_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | ((tmp_fu_337_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6)) | ((demorgan_reg_388 == 1'd0) & (1'b1 == ap_CS_fsm_state6)) | ((demorgan_fu_331_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        SyncSig_V_blk_n = SyncSig_V_1_ack_in;
    end else begin
        SyncSig_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ActDMA_V_0_vld_out) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond_flatten_fu_279_p2 == 1'd0) & (1'b1 == ActDMA_V_0_vld_out) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if (((exitcond_flatten_fu_279_p2 == 1'd1) & (1'b1 == ActDMA_V_0_vld_out) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5_io))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((tmp_fu_337_p2 == 1'd1) & (1'b0 == ap_block_state6_io) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else if (((tmp_fu_337_p2 == 1'd0) & (1'b0 == ap_block_state6_io) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == SyncSig_V_1_ack_in) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == SyncSig_V_1_ack_in) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ActBuf_Data_address0 = tmp_17_cast_fu_255_p1;

assign ActBuf_Data_d0 = {{ActDMA_V_0_data_out}, {reg_360}};

assign ActDMA_V_0_ack_in = ActDMA_V_0_state[1'd1];

assign ActDMA_V_0_load_A = (~ActDMA_V_0_sel_wr & ActDMA_V_0_state_cmp_full);

assign ActDMA_V_0_load_B = (ActDMA_V_0_state_cmp_full & ActDMA_V_0_sel_wr);

assign ActDMA_V_0_sel = ActDMA_V_0_sel_rd;

assign ActDMA_V_0_state_cmp_full = ((ActDMA_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign ActDMA_V_0_vld_in = ActDMA_V_TVALID;

assign ActDMA_V_0_vld_out = ActDMA_V_0_state[1'd0];

assign ActDMA_V_TREADY = ActDMA_V_0_state[1'd1];

assign SyncSig_V = SyncSig_V_1_data_reg;

assign SyncSig_V_1_ack_out = SyncSig_V_ap_ack;

assign SyncSig_V_ap_vld = SyncSig_V_1_vld_reg;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

always @ (*) begin
    ap_block_state5_io = ((demorgan_fu_331_p2 == 1'd0) & (1'b0 == SyncSig_V_1_ack_in));
end

always @ (*) begin
    ap_block_state6_io = (((tmp_fu_337_p2 == 1'd1) & (1'b0 == SyncSig_V_1_ack_in)) | ((demorgan_reg_388 == 1'd0) & (1'b0 == SyncSig_V_1_ack_in)));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign c_V_fu_195_p2 = (t_V_1_reg_167 + 6'd1);

assign demorgan_fu_331_p2 = (tmp_6_fu_327_p1 | icmp_fu_297_p2);

assign exitcond_flatten_fu_279_p2 = ((indvar_flatten1_reg_178 == 9'd511) ? 1'b1 : 1'b0);

assign exitcond_fu_285_p2 = ((t_V_5_fu_235_p2 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_fu_297_p2 = ((tmp_4_fu_311_p4 == 4'd0) ? 1'b1 : 1'b0);

assign indvar_flatten_next_fu_273_p2 = (indvar_flatten1_reg_178 + 9'd1);

assign p_Val2_s_fu_189_p2 = (p_Val2_5_reg_133 + 5'd1);

assign rRow_V_fu_291_p2 = (3'd1 + t_V6_reg_121);

assign t_V_3_fu_303_p3 = ((tmp_5_fu_321_p2[0:0] === 1'b1) ? 3'd0 : rRow_V_fu_291_p2);

assign t_V_3_mid2_fu_209_p3 = ((exitcond4_reg_145[0:0] === 1'b1) ? 5'd0 : t_V_s_reg_156);

assign t_V_5_fu_235_p2 = (t_V_3_mid2_reg_348 + 5'd1);

assign t_V_fu_201_p3 = ((exitcond4_reg_145[0:0] === 1'b1) ? c_V_fu_195_p2 : t_V_1_reg_167);

assign tmp_10_cast_fu_217_p1 = t_V_reg_354;

assign tmp_12_cast_fu_231_p1 = tmp_s_fu_260_p3;

assign tmp_16_cast_fu_241_p3 = {{tmp_1_fu_268_p2}, {4'd0}};

assign tmp_17_cast_fu_255_p1 = tmp_2_fu_249_p2;

assign tmp_1_fu_268_p2 = (tmp_10_cast_fu_217_p1 + tmp_12_cast_fu_231_p1);

assign tmp_2_fu_249_p2 = (tmp_cast_fu_220_p1 + tmp_16_cast_fu_241_p3);

assign tmp_4_fu_311_p4 = {{p_Val2_5_reg_133[4:1]}};

assign tmp_5_fu_321_p2 = ((rRow_V_fu_291_p2 == 3'd6) ? 1'b1 : 1'b0);

assign tmp_6_fu_327_p1 = p_Val2_5_reg_133[0:0];

assign tmp_cast_fu_220_p1 = t_V_3_mid2_reg_348;

assign tmp_fu_337_p2 = ((p_Val2_5_reg_133 == 5'd31) ? 1'b1 : 1'b0);

assign tmp_s_fu_260_p3 = {{t_V6_reg_121}, {5'd0}};

endmodule //Layer4_WriteAct
