// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Layer_DMA_Up,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu15eg-ffvb1156-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.262500,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=691,HLS_SYN_LUT=915,HLS_VERSION=2018_3}" *)

module Layer_DMA_Up (
        ap_clk,
        ap_rst_n,
        WeightDMA_V_V_TDATA,
        WeightDMA_V_V_TVALID,
        WeightDMA_V_V_TREADY,
        DMA0_V_V_TDATA,
        DMA0_V_V_TVALID,
        DMA0_V_V_TREADY,
        DMA1_V_V_TDATA,
        DMA1_V_V_TVALID,
        DMA1_V_V_TREADY,
        DMA2_V_V_TDATA,
        DMA2_V_V_TVALID,
        DMA2_V_V_TREADY,
        DMA3_V_V_TDATA,
        DMA3_V_V_TVALID,
        DMA3_V_V_TREADY,
        DMA4_V_V_TDATA,
        DMA4_V_V_TVALID,
        DMA4_V_V_TREADY,
        DMA5_V_V_TDATA,
        DMA5_V_V_TVALID,
        DMA5_V_V_TREADY,
        DMA6_V_V_TDATA,
        DMA6_V_V_TVALID,
        DMA6_V_V_TREADY
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_pp0_stage0 = 16'd2;
parameter    ap_ST_fsm_state5 = 16'd4;
parameter    ap_ST_fsm_pp1_stage0 = 16'd8;
parameter    ap_ST_fsm_state9 = 16'd16;
parameter    ap_ST_fsm_pp2_stage0 = 16'd32;
parameter    ap_ST_fsm_state13 = 16'd64;
parameter    ap_ST_fsm_pp3_stage0 = 16'd128;
parameter    ap_ST_fsm_state17 = 16'd256;
parameter    ap_ST_fsm_pp4_stage0 = 16'd512;
parameter    ap_ST_fsm_state21 = 16'd1024;
parameter    ap_ST_fsm_pp5_stage0 = 16'd2048;
parameter    ap_ST_fsm_state25 = 16'd4096;
parameter    ap_ST_fsm_pp6_stage0 = 16'd8192;
parameter    ap_ST_fsm_state29 = 16'd16384;
parameter    ap_ST_fsm_state30 = 16'd32768;

input   ap_clk;
input   ap_rst_n;
input  [31:0] WeightDMA_V_V_TDATA;
input   WeightDMA_V_V_TVALID;
output   WeightDMA_V_V_TREADY;
output  [31:0] DMA0_V_V_TDATA;
output   DMA0_V_V_TVALID;
input   DMA0_V_V_TREADY;
output  [31:0] DMA1_V_V_TDATA;
output   DMA1_V_V_TVALID;
input   DMA1_V_V_TREADY;
output  [31:0] DMA2_V_V_TDATA;
output   DMA2_V_V_TVALID;
input   DMA2_V_V_TREADY;
output  [31:0] DMA3_V_V_TDATA;
output   DMA3_V_V_TVALID;
input   DMA3_V_V_TREADY;
output  [31:0] DMA4_V_V_TDATA;
output   DMA4_V_V_TVALID;
input   DMA4_V_V_TREADY;
output  [31:0] DMA5_V_V_TDATA;
output   DMA5_V_V_TVALID;
input   DMA5_V_V_TREADY;
output  [31:0] DMA6_V_V_TDATA;
output   DMA6_V_V_TVALID;
input   DMA6_V_V_TREADY;

 reg    ap_rst_n_inv;
reg   [31:0] WeightDMA_V_V_0_data_out;
wire    WeightDMA_V_V_0_vld_in;
wire    WeightDMA_V_V_0_vld_out;
wire    WeightDMA_V_V_0_ack_in;
reg    WeightDMA_V_V_0_ack_out;
reg   [31:0] WeightDMA_V_V_0_payload_A;
reg   [31:0] WeightDMA_V_V_0_payload_B;
reg    WeightDMA_V_V_0_sel_rd;
reg    WeightDMA_V_V_0_sel_wr;
wire    WeightDMA_V_V_0_sel;
wire    WeightDMA_V_V_0_load_A;
wire    WeightDMA_V_V_0_load_B;
reg   [1:0] WeightDMA_V_V_0_state;
wire    WeightDMA_V_V_0_state_cmp_full;
reg   [31:0] DMA0_V_V_1_data_out;
reg    DMA0_V_V_1_vld_in;
wire    DMA0_V_V_1_vld_out;
wire    DMA0_V_V_1_ack_in;
wire    DMA0_V_V_1_ack_out;
reg   [31:0] DMA0_V_V_1_payload_A;
reg   [31:0] DMA0_V_V_1_payload_B;
reg    DMA0_V_V_1_sel_rd;
reg    DMA0_V_V_1_sel_wr;
wire    DMA0_V_V_1_sel;
wire    DMA0_V_V_1_load_A;
wire    DMA0_V_V_1_load_B;
reg   [1:0] DMA0_V_V_1_state;
wire    DMA0_V_V_1_state_cmp_full;
reg   [31:0] DMA1_V_V_1_data_out;
reg    DMA1_V_V_1_vld_in;
wire    DMA1_V_V_1_vld_out;
wire    DMA1_V_V_1_ack_in;
wire    DMA1_V_V_1_ack_out;
reg   [31:0] DMA1_V_V_1_payload_A;
reg   [31:0] DMA1_V_V_1_payload_B;
reg    DMA1_V_V_1_sel_rd;
reg    DMA1_V_V_1_sel_wr;
wire    DMA1_V_V_1_sel;
wire    DMA1_V_V_1_load_A;
wire    DMA1_V_V_1_load_B;
reg   [1:0] DMA1_V_V_1_state;
wire    DMA1_V_V_1_state_cmp_full;
reg   [31:0] DMA2_V_V_1_data_out;
reg    DMA2_V_V_1_vld_in;
wire    DMA2_V_V_1_vld_out;
wire    DMA2_V_V_1_ack_in;
wire    DMA2_V_V_1_ack_out;
reg   [31:0] DMA2_V_V_1_payload_A;
reg   [31:0] DMA2_V_V_1_payload_B;
reg    DMA2_V_V_1_sel_rd;
reg    DMA2_V_V_1_sel_wr;
wire    DMA2_V_V_1_sel;
wire    DMA2_V_V_1_load_A;
wire    DMA2_V_V_1_load_B;
reg   [1:0] DMA2_V_V_1_state;
wire    DMA2_V_V_1_state_cmp_full;
reg   [31:0] DMA3_V_V_1_data_out;
reg    DMA3_V_V_1_vld_in;
wire    DMA3_V_V_1_vld_out;
wire    DMA3_V_V_1_ack_in;
wire    DMA3_V_V_1_ack_out;
reg   [31:0] DMA3_V_V_1_payload_A;
reg   [31:0] DMA3_V_V_1_payload_B;
reg    DMA3_V_V_1_sel_rd;
reg    DMA3_V_V_1_sel_wr;
wire    DMA3_V_V_1_sel;
wire    DMA3_V_V_1_load_A;
wire    DMA3_V_V_1_load_B;
reg   [1:0] DMA3_V_V_1_state;
wire    DMA3_V_V_1_state_cmp_full;
reg   [31:0] DMA4_V_V_1_data_out;
reg    DMA4_V_V_1_vld_in;
wire    DMA4_V_V_1_vld_out;
wire    DMA4_V_V_1_ack_in;
wire    DMA4_V_V_1_ack_out;
reg   [31:0] DMA4_V_V_1_payload_A;
reg   [31:0] DMA4_V_V_1_payload_B;
reg    DMA4_V_V_1_sel_rd;
reg    DMA4_V_V_1_sel_wr;
wire    DMA4_V_V_1_sel;
wire    DMA4_V_V_1_load_A;
wire    DMA4_V_V_1_load_B;
reg   [1:0] DMA4_V_V_1_state;
wire    DMA4_V_V_1_state_cmp_full;
reg   [31:0] DMA5_V_V_1_data_out;
reg    DMA5_V_V_1_vld_in;
wire    DMA5_V_V_1_vld_out;
wire    DMA5_V_V_1_ack_in;
wire    DMA5_V_V_1_ack_out;
reg   [31:0] DMA5_V_V_1_payload_A;
reg   [31:0] DMA5_V_V_1_payload_B;
reg    DMA5_V_V_1_sel_rd;
reg    DMA5_V_V_1_sel_wr;
wire    DMA5_V_V_1_sel;
wire    DMA5_V_V_1_load_A;
wire    DMA5_V_V_1_load_B;
reg   [1:0] DMA5_V_V_1_state;
wire    DMA5_V_V_1_state_cmp_full;
reg   [31:0] DMA6_V_V_1_data_out;
reg    DMA6_V_V_1_vld_in;
wire    DMA6_V_V_1_vld_out;
wire    DMA6_V_V_1_ack_in;
wire    DMA6_V_V_1_ack_out;
reg   [31:0] DMA6_V_V_1_payload_A;
reg   [31:0] DMA6_V_V_1_payload_B;
reg    DMA6_V_V_1_sel_rd;
reg    DMA6_V_V_1_sel_wr;
wire    DMA6_V_V_1_sel;
wire    DMA6_V_V_1_load_A;
wire    DMA6_V_V_1_load_B;
reg   [1:0] DMA6_V_V_1_state;
wire    DMA6_V_V_1_state_cmp_full;
reg    WeightDMA_V_V_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] tmp_fu_259_p2;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_pp1_stage0;
wire   [0:0] tmp_4_fu_271_p2;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_pp2_stage0;
wire   [0:0] tmp_8_fu_283_p2;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter0;
wire    ap_block_pp3_stage0;
wire   [0:0] tmp_s_fu_295_p2;
wire    ap_CS_fsm_pp4_stage0;
reg    ap_enable_reg_pp4_iter0;
wire    ap_block_pp4_stage0;
wire   [0:0] tmp_1_fu_307_p2;
wire    ap_CS_fsm_pp5_stage0;
reg    ap_enable_reg_pp5_iter0;
wire    ap_block_pp5_stage0;
wire   [0:0] tmp_2_fu_319_p2;
wire    ap_CS_fsm_pp6_stage0;
reg    ap_enable_reg_pp6_iter0;
wire    ap_block_pp6_stage0;
wire   [0:0] tmp_3_fu_331_p2;
reg    DMA0_V_V_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] tmp_reg_343;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] tmp_reg_343_pp0_iter1_reg;
reg    DMA1_V_V_TDATA_blk_n;
reg    ap_enable_reg_pp1_iter1;
reg   [0:0] tmp_4_reg_352;
reg    ap_enable_reg_pp1_iter2;
reg   [0:0] tmp_4_reg_352_pp1_iter1_reg;
reg    DMA2_V_V_TDATA_blk_n;
reg    ap_enable_reg_pp2_iter1;
reg   [0:0] tmp_8_reg_365;
reg    ap_enable_reg_pp2_iter2;
reg   [0:0] tmp_8_reg_365_pp2_iter1_reg;
reg    DMA3_V_V_TDATA_blk_n;
reg    ap_enable_reg_pp3_iter1;
reg   [0:0] tmp_s_reg_370;
reg    ap_enable_reg_pp3_iter2;
reg   [0:0] tmp_s_reg_370_pp3_iter1_reg;
reg    DMA4_V_V_TDATA_blk_n;
reg    ap_enable_reg_pp4_iter1;
reg   [0:0] tmp_1_reg_379;
reg    ap_enable_reg_pp4_iter2;
reg   [0:0] tmp_1_reg_379_pp4_iter1_reg;
reg    DMA5_V_V_TDATA_blk_n;
reg    ap_enable_reg_pp5_iter1;
reg   [0:0] tmp_2_reg_388;
reg    ap_enable_reg_pp5_iter2;
reg   [0:0] tmp_2_reg_388_pp5_iter1_reg;
reg    DMA6_V_V_TDATA_blk_n;
reg    ap_enable_reg_pp6_iter1;
reg   [0:0] tmp_3_reg_397;
reg    ap_enable_reg_pp6_iter2;
reg   [0:0] tmp_3_reg_397_pp6_iter1_reg;
reg   [6:0] i_reg_171;
reg   [6:0] i1_reg_182;
reg   [7:0] i2_reg_193;
reg   [8:0] i3_reg_204;
reg   [9:0] i4_reg_215;
reg   [10:0] i5_reg_226;
reg   [11:0] i6_reg_237;
reg   [31:0] reg_248;
reg    ap_block_state26_pp6_stage0_iter0;
wire    ap_block_state27_pp6_stage0_iter1;
reg    ap_block_state27_io;
wire    ap_block_state28_pp6_stage0_iter2;
reg    ap_block_state28_io;
reg    ap_block_pp6_stage0_11001;
reg    ap_block_state22_pp5_stage0_iter0;
wire    ap_block_state23_pp5_stage0_iter1;
reg    ap_block_state23_io;
wire    ap_block_state24_pp5_stage0_iter2;
reg    ap_block_state24_io;
reg    ap_block_pp5_stage0_11001;
reg    ap_block_state18_pp4_stage0_iter0;
wire    ap_block_state19_pp4_stage0_iter1;
reg    ap_block_state19_io;
wire    ap_block_state20_pp4_stage0_iter2;
reg    ap_block_state20_io;
reg    ap_block_pp4_stage0_11001;
reg    ap_block_state14_pp3_stage0_iter0;
wire    ap_block_state15_pp3_stage0_iter1;
reg    ap_block_state15_io;
wire    ap_block_state16_pp3_stage0_iter2;
reg    ap_block_state16_io;
reg    ap_block_pp3_stage0_11001;
reg    ap_block_state10_pp2_stage0_iter0;
wire    ap_block_state11_pp2_stage0_iter1;
reg    ap_block_state11_io;
wire    ap_block_state12_pp2_stage0_iter2;
reg    ap_block_state12_io;
reg    ap_block_pp2_stage0_11001;
reg    ap_block_state6_pp1_stage0_iter0;
wire    ap_block_state7_pp1_stage0_iter1;
reg    ap_block_state7_io;
wire    ap_block_state8_pp1_stage0_iter2;
reg    ap_block_state8_io;
reg    ap_block_pp1_stage0_11001;
reg    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state3_io;
wire    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_state4_io;
reg    ap_block_pp0_stage0_11001;
wire   [11:0] grp_fu_325_p2;
wire    ap_CS_fsm_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_CS_fsm_state5;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state6;
wire    ap_CS_fsm_state9;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state10;
wire    ap_CS_fsm_state13;
reg    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state14;
wire    ap_CS_fsm_state17;
reg    ap_block_pp4_stage0_subdone;
reg    ap_condition_pp4_exit_iter0_state18;
wire    ap_CS_fsm_state21;
reg    ap_block_pp5_stage0_subdone;
reg    ap_condition_pp5_exit_iter0_state22;
wire    ap_CS_fsm_state25;
reg    ap_block_pp6_stage0_subdone;
reg    ap_condition_pp6_exit_iter0_state26;
reg    ap_block_pp0_stage0_01001;
reg    ap_block_pp1_stage0_01001;
reg    ap_block_pp2_stage0_01001;
reg    ap_block_pp3_stage0_01001;
reg    ap_block_pp4_stage0_01001;
reg    ap_block_pp5_stage0_01001;
reg    ap_block_pp6_stage0_01001;
reg   [11:0] grp_fu_325_p0;
reg   [11:0] grp_fu_325_p1;
reg   [15:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_idle_pp4;
wire    ap_enable_pp4;
reg    ap_idle_pp5;
wire    ap_enable_pp5;
reg    ap_idle_pp6;
wire    ap_enable_pp6;

// power-on initialization
initial begin
#0 WeightDMA_V_V_0_sel_rd = 1'b0;
#0 WeightDMA_V_V_0_sel_wr = 1'b0;
#0 WeightDMA_V_V_0_state = 2'd0;
#0 DMA0_V_V_1_sel_rd = 1'b0;
#0 DMA0_V_V_1_sel_wr = 1'b0;
#0 DMA0_V_V_1_state = 2'd0;
#0 DMA1_V_V_1_sel_rd = 1'b0;
#0 DMA1_V_V_1_sel_wr = 1'b0;
#0 DMA1_V_V_1_state = 2'd0;
#0 DMA2_V_V_1_sel_rd = 1'b0;
#0 DMA2_V_V_1_sel_wr = 1'b0;
#0 DMA2_V_V_1_state = 2'd0;
#0 DMA3_V_V_1_sel_rd = 1'b0;
#0 DMA3_V_V_1_sel_wr = 1'b0;
#0 DMA3_V_V_1_state = 2'd0;
#0 DMA4_V_V_1_sel_rd = 1'b0;
#0 DMA4_V_V_1_sel_wr = 1'b0;
#0 DMA4_V_V_1_state = 2'd0;
#0 DMA5_V_V_1_sel_rd = 1'b0;
#0 DMA5_V_V_1_sel_wr = 1'b0;
#0 DMA5_V_V_1_state = 2'd0;
#0 DMA6_V_V_1_sel_rd = 1'b0;
#0 DMA6_V_V_1_sel_wr = 1'b0;
#0 DMA6_V_V_1_state = 2'd0;
#0 ap_CS_fsm = 16'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 ap_enable_reg_pp5_iter0 = 1'b0;
#0 ap_enable_reg_pp6_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter2 = 1'b0;
#0 ap_enable_reg_pp5_iter1 = 1'b0;
#0 ap_enable_reg_pp5_iter2 = 1'b0;
#0 ap_enable_reg_pp6_iter1 = 1'b0;
#0 ap_enable_reg_pp6_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        DMA0_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == DMA0_V_V_1_vld_out) & (1'b1 == DMA0_V_V_1_ack_out))) begin
            DMA0_V_V_1_sel_rd <= ~DMA0_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        DMA0_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == DMA0_V_V_1_vld_in) & (1'b1 == DMA0_V_V_1_ack_in))) begin
            DMA0_V_V_1_sel_wr <= ~DMA0_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        DMA0_V_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == DMA0_V_V_1_state) & (1'b0 == DMA0_V_V_1_vld_in)) | ((2'd3 == DMA0_V_V_1_state) & (1'b0 == DMA0_V_V_1_vld_in) & (1'b1 == DMA0_V_V_1_ack_out)))) begin
            DMA0_V_V_1_state <= 2'd2;
        end else if ((((2'd1 == DMA0_V_V_1_state) & (1'b0 == DMA0_V_V_1_ack_out)) | ((2'd3 == DMA0_V_V_1_state) & (1'b0 == DMA0_V_V_1_ack_out) & (1'b1 == DMA0_V_V_1_vld_in)))) begin
            DMA0_V_V_1_state <= 2'd1;
        end else if (((~((1'b0 == DMA0_V_V_1_vld_in) & (1'b1 == DMA0_V_V_1_ack_out)) & ~((1'b0 == DMA0_V_V_1_ack_out) & (1'b1 == DMA0_V_V_1_vld_in)) & (2'd3 == DMA0_V_V_1_state)) | ((2'd1 == DMA0_V_V_1_state) & (1'b1 == DMA0_V_V_1_ack_out)) | ((2'd2 == DMA0_V_V_1_state) & (1'b1 == DMA0_V_V_1_vld_in)))) begin
            DMA0_V_V_1_state <= 2'd3;
        end else begin
            DMA0_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        DMA1_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == DMA1_V_V_1_ack_out) & (1'b1 == DMA1_V_V_1_vld_out))) begin
            DMA1_V_V_1_sel_rd <= ~DMA1_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        DMA1_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == DMA1_V_V_1_ack_in) & (1'b1 == DMA1_V_V_1_vld_in))) begin
            DMA1_V_V_1_sel_wr <= ~DMA1_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        DMA1_V_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == DMA1_V_V_1_state) & (1'b0 == DMA1_V_V_1_vld_in)) | ((2'd3 == DMA1_V_V_1_state) & (1'b0 == DMA1_V_V_1_vld_in) & (1'b1 == DMA1_V_V_1_ack_out)))) begin
            DMA1_V_V_1_state <= 2'd2;
        end else if ((((2'd1 == DMA1_V_V_1_state) & (1'b0 == DMA1_V_V_1_ack_out)) | ((2'd3 == DMA1_V_V_1_state) & (1'b0 == DMA1_V_V_1_ack_out) & (1'b1 == DMA1_V_V_1_vld_in)))) begin
            DMA1_V_V_1_state <= 2'd1;
        end else if (((~((1'b0 == DMA1_V_V_1_vld_in) & (1'b1 == DMA1_V_V_1_ack_out)) & ~((1'b0 == DMA1_V_V_1_ack_out) & (1'b1 == DMA1_V_V_1_vld_in)) & (2'd3 == DMA1_V_V_1_state)) | ((2'd1 == DMA1_V_V_1_state) & (1'b1 == DMA1_V_V_1_ack_out)) | ((2'd2 == DMA1_V_V_1_state) & (1'b1 == DMA1_V_V_1_vld_in)))) begin
            DMA1_V_V_1_state <= 2'd3;
        end else begin
            DMA1_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        DMA2_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == DMA2_V_V_1_ack_out) & (1'b1 == DMA2_V_V_1_vld_out))) begin
            DMA2_V_V_1_sel_rd <= ~DMA2_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        DMA2_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == DMA2_V_V_1_ack_in) & (1'b1 == DMA2_V_V_1_vld_in))) begin
            DMA2_V_V_1_sel_wr <= ~DMA2_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        DMA2_V_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == DMA2_V_V_1_state) & (1'b0 == DMA2_V_V_1_vld_in)) | ((2'd3 == DMA2_V_V_1_state) & (1'b0 == DMA2_V_V_1_vld_in) & (1'b1 == DMA2_V_V_1_ack_out)))) begin
            DMA2_V_V_1_state <= 2'd2;
        end else if ((((2'd1 == DMA2_V_V_1_state) & (1'b0 == DMA2_V_V_1_ack_out)) | ((2'd3 == DMA2_V_V_1_state) & (1'b0 == DMA2_V_V_1_ack_out) & (1'b1 == DMA2_V_V_1_vld_in)))) begin
            DMA2_V_V_1_state <= 2'd1;
        end else if (((~((1'b0 == DMA2_V_V_1_vld_in) & (1'b1 == DMA2_V_V_1_ack_out)) & ~((1'b0 == DMA2_V_V_1_ack_out) & (1'b1 == DMA2_V_V_1_vld_in)) & (2'd3 == DMA2_V_V_1_state)) | ((2'd1 == DMA2_V_V_1_state) & (1'b1 == DMA2_V_V_1_ack_out)) | ((2'd2 == DMA2_V_V_1_state) & (1'b1 == DMA2_V_V_1_vld_in)))) begin
            DMA2_V_V_1_state <= 2'd3;
        end else begin
            DMA2_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        DMA3_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == DMA3_V_V_1_ack_out) & (1'b1 == DMA3_V_V_1_vld_out))) begin
            DMA3_V_V_1_sel_rd <= ~DMA3_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        DMA3_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == DMA3_V_V_1_ack_in) & (1'b1 == DMA3_V_V_1_vld_in))) begin
            DMA3_V_V_1_sel_wr <= ~DMA3_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        DMA3_V_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == DMA3_V_V_1_state) & (1'b0 == DMA3_V_V_1_vld_in)) | ((2'd3 == DMA3_V_V_1_state) & (1'b0 == DMA3_V_V_1_vld_in) & (1'b1 == DMA3_V_V_1_ack_out)))) begin
            DMA3_V_V_1_state <= 2'd2;
        end else if ((((2'd1 == DMA3_V_V_1_state) & (1'b0 == DMA3_V_V_1_ack_out)) | ((2'd3 == DMA3_V_V_1_state) & (1'b0 == DMA3_V_V_1_ack_out) & (1'b1 == DMA3_V_V_1_vld_in)))) begin
            DMA3_V_V_1_state <= 2'd1;
        end else if (((~((1'b0 == DMA3_V_V_1_vld_in) & (1'b1 == DMA3_V_V_1_ack_out)) & ~((1'b0 == DMA3_V_V_1_ack_out) & (1'b1 == DMA3_V_V_1_vld_in)) & (2'd3 == DMA3_V_V_1_state)) | ((2'd1 == DMA3_V_V_1_state) & (1'b1 == DMA3_V_V_1_ack_out)) | ((2'd2 == DMA3_V_V_1_state) & (1'b1 == DMA3_V_V_1_vld_in)))) begin
            DMA3_V_V_1_state <= 2'd3;
        end else begin
            DMA3_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        DMA4_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == DMA4_V_V_1_ack_out) & (1'b1 == DMA4_V_V_1_vld_out))) begin
            DMA4_V_V_1_sel_rd <= ~DMA4_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        DMA4_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == DMA4_V_V_1_ack_in) & (1'b1 == DMA4_V_V_1_vld_in))) begin
            DMA4_V_V_1_sel_wr <= ~DMA4_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        DMA4_V_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == DMA4_V_V_1_state) & (1'b0 == DMA4_V_V_1_vld_in)) | ((2'd3 == DMA4_V_V_1_state) & (1'b0 == DMA4_V_V_1_vld_in) & (1'b1 == DMA4_V_V_1_ack_out)))) begin
            DMA4_V_V_1_state <= 2'd2;
        end else if ((((2'd1 == DMA4_V_V_1_state) & (1'b0 == DMA4_V_V_1_ack_out)) | ((2'd3 == DMA4_V_V_1_state) & (1'b0 == DMA4_V_V_1_ack_out) & (1'b1 == DMA4_V_V_1_vld_in)))) begin
            DMA4_V_V_1_state <= 2'd1;
        end else if (((~((1'b0 == DMA4_V_V_1_vld_in) & (1'b1 == DMA4_V_V_1_ack_out)) & ~((1'b0 == DMA4_V_V_1_ack_out) & (1'b1 == DMA4_V_V_1_vld_in)) & (2'd3 == DMA4_V_V_1_state)) | ((2'd1 == DMA4_V_V_1_state) & (1'b1 == DMA4_V_V_1_ack_out)) | ((2'd2 == DMA4_V_V_1_state) & (1'b1 == DMA4_V_V_1_vld_in)))) begin
            DMA4_V_V_1_state <= 2'd3;
        end else begin
            DMA4_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        DMA5_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == DMA5_V_V_1_ack_out) & (1'b1 == DMA5_V_V_1_vld_out))) begin
            DMA5_V_V_1_sel_rd <= ~DMA5_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        DMA5_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == DMA5_V_V_1_ack_in) & (1'b1 == DMA5_V_V_1_vld_in))) begin
            DMA5_V_V_1_sel_wr <= ~DMA5_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        DMA5_V_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == DMA5_V_V_1_state) & (1'b0 == DMA5_V_V_1_vld_in)) | ((2'd3 == DMA5_V_V_1_state) & (1'b0 == DMA5_V_V_1_vld_in) & (1'b1 == DMA5_V_V_1_ack_out)))) begin
            DMA5_V_V_1_state <= 2'd2;
        end else if ((((2'd1 == DMA5_V_V_1_state) & (1'b0 == DMA5_V_V_1_ack_out)) | ((2'd3 == DMA5_V_V_1_state) & (1'b0 == DMA5_V_V_1_ack_out) & (1'b1 == DMA5_V_V_1_vld_in)))) begin
            DMA5_V_V_1_state <= 2'd1;
        end else if (((~((1'b0 == DMA5_V_V_1_vld_in) & (1'b1 == DMA5_V_V_1_ack_out)) & ~((1'b0 == DMA5_V_V_1_ack_out) & (1'b1 == DMA5_V_V_1_vld_in)) & (2'd3 == DMA5_V_V_1_state)) | ((2'd1 == DMA5_V_V_1_state) & (1'b1 == DMA5_V_V_1_ack_out)) | ((2'd2 == DMA5_V_V_1_state) & (1'b1 == DMA5_V_V_1_vld_in)))) begin
            DMA5_V_V_1_state <= 2'd3;
        end else begin
            DMA5_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        DMA6_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == DMA6_V_V_1_ack_out) & (1'b1 == DMA6_V_V_1_vld_out))) begin
            DMA6_V_V_1_sel_rd <= ~DMA6_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        DMA6_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == DMA6_V_V_1_ack_in) & (1'b1 == DMA6_V_V_1_vld_in))) begin
            DMA6_V_V_1_sel_wr <= ~DMA6_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        DMA6_V_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == DMA6_V_V_1_state) & (1'b0 == DMA6_V_V_1_vld_in)) | ((2'd3 == DMA6_V_V_1_state) & (1'b0 == DMA6_V_V_1_vld_in) & (1'b1 == DMA6_V_V_1_ack_out)))) begin
            DMA6_V_V_1_state <= 2'd2;
        end else if ((((2'd1 == DMA6_V_V_1_state) & (1'b0 == DMA6_V_V_1_ack_out)) | ((2'd3 == DMA6_V_V_1_state) & (1'b0 == DMA6_V_V_1_ack_out) & (1'b1 == DMA6_V_V_1_vld_in)))) begin
            DMA6_V_V_1_state <= 2'd1;
        end else if (((~((1'b0 == DMA6_V_V_1_vld_in) & (1'b1 == DMA6_V_V_1_ack_out)) & ~((1'b0 == DMA6_V_V_1_ack_out) & (1'b1 == DMA6_V_V_1_vld_in)) & (2'd3 == DMA6_V_V_1_state)) | ((2'd1 == DMA6_V_V_1_state) & (1'b1 == DMA6_V_V_1_ack_out)) | ((2'd2 == DMA6_V_V_1_state) & (1'b1 == DMA6_V_V_1_vld_in)))) begin
            DMA6_V_V_1_state <= 2'd3;
        end else begin
            DMA6_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        WeightDMA_V_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == WeightDMA_V_V_0_ack_out) & (1'b1 == WeightDMA_V_V_0_vld_out))) begin
            WeightDMA_V_V_0_sel_rd <= ~WeightDMA_V_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        WeightDMA_V_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == WeightDMA_V_V_0_ack_in) & (1'b1 == WeightDMA_V_V_0_vld_in))) begin
            WeightDMA_V_V_0_sel_wr <= ~WeightDMA_V_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        WeightDMA_V_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == WeightDMA_V_V_0_state) & (1'b0 == WeightDMA_V_V_0_vld_in)) | ((2'd3 == WeightDMA_V_V_0_state) & (1'b0 == WeightDMA_V_V_0_vld_in) & (1'b1 == WeightDMA_V_V_0_ack_out)))) begin
            WeightDMA_V_V_0_state <= 2'd2;
        end else if ((((2'd1 == WeightDMA_V_V_0_state) & (1'b0 == WeightDMA_V_V_0_ack_out)) | ((2'd3 == WeightDMA_V_V_0_state) & (1'b0 == WeightDMA_V_V_0_ack_out) & (1'b1 == WeightDMA_V_V_0_vld_in)))) begin
            WeightDMA_V_V_0_state <= 2'd1;
        end else if (((~((1'b0 == WeightDMA_V_V_0_vld_in) & (1'b1 == WeightDMA_V_V_0_ack_out)) & ~((1'b0 == WeightDMA_V_V_0_ack_out) & (1'b1 == WeightDMA_V_V_0_vld_in)) & (2'd3 == WeightDMA_V_V_0_state)) | ((2'd1 == WeightDMA_V_V_0_state) & (1'b1 == WeightDMA_V_V_0_ack_out)) | ((2'd2 == WeightDMA_V_V_0_state) & (1'b1 == WeightDMA_V_V_0_vld_in)))) begin
            WeightDMA_V_V_0_state <= 2'd3;
        end else begin
            WeightDMA_V_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state1)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state1)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state6) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state6)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state6);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state10) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state10)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state10);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state14) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state13)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state14)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state14);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end else if ((1'b1 == ap_CS_fsm_state13)) begin
            ap_enable_reg_pp3_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp4_stage0_subdone) & (1'b1 == ap_condition_pp4_exit_iter0_state18) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state17)) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp4_exit_iter0_state18)) begin
                ap_enable_reg_pp4_iter1 <= (1'b1 ^ ap_condition_pp4_exit_iter0_state18);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
        end else if ((1'b1 == ap_CS_fsm_state17)) begin
            ap_enable_reg_pp4_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp5_stage0) & (1'b1 == ap_condition_pp5_exit_iter0_state22) & (1'b0 == ap_block_pp5_stage0_subdone))) begin
            ap_enable_reg_pp5_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state21)) begin
            ap_enable_reg_pp5_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp5_exit_iter0_state22)) begin
                ap_enable_reg_pp5_iter1 <= (1'b1 ^ ap_condition_pp5_exit_iter0_state22);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter2 <= ap_enable_reg_pp5_iter1;
        end else if ((1'b1 == ap_CS_fsm_state21)) begin
            ap_enable_reg_pp5_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp6_stage0) & (1'b1 == ap_condition_pp6_exit_iter0_state26) & (1'b0 == ap_block_pp6_stage0_subdone))) begin
            ap_enable_reg_pp6_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state25)) begin
            ap_enable_reg_pp6_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp6_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp6_exit_iter0_state26)) begin
                ap_enable_reg_pp6_iter1 <= (1'b1 ^ ap_condition_pp6_exit_iter0_state26);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp6_iter1 <= ap_enable_reg_pp6_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp6_stage0_subdone)) begin
            ap_enable_reg_pp6_iter2 <= ap_enable_reg_pp6_iter1;
        end else if ((1'b1 == ap_CS_fsm_state25)) begin
            ap_enable_reg_pp6_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i1_reg_182 <= 7'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (tmp_4_fu_271_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i1_reg_182 <= grp_fu_325_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i2_reg_193 <= 8'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (tmp_8_fu_283_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        i2_reg_193 <= grp_fu_325_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        i3_reg_204 <= 9'd0;
    end else if (((1'b0 == ap_block_pp3_stage0_11001) & (tmp_s_fu_295_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        i3_reg_204 <= grp_fu_325_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        i4_reg_215 <= 10'd0;
    end else if (((1'b0 == ap_block_pp4_stage0_11001) & (tmp_1_fu_307_p2 == 1'd0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        i4_reg_215 <= grp_fu_325_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        i5_reg_226 <= 11'd0;
    end else if (((1'b0 == ap_block_pp5_stage0_11001) & (tmp_2_fu_319_p2 == 1'd0) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        i5_reg_226 <= grp_fu_325_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        i6_reg_237 <= 12'd0;
    end else if (((1'b0 == ap_block_pp6_stage0_11001) & (tmp_3_fu_331_p2 == 1'd0) & (ap_enable_reg_pp6_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp6_stage0))) begin
        i6_reg_237 <= grp_fu_325_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_fu_259_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_171 <= grp_fu_325_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        i_reg_171 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == DMA0_V_V_1_load_A)) begin
        DMA0_V_V_1_payload_A <= reg_248;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == DMA0_V_V_1_load_B)) begin
        DMA0_V_V_1_payload_B <= reg_248;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == DMA1_V_V_1_load_A)) begin
        DMA1_V_V_1_payload_A <= reg_248;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == DMA1_V_V_1_load_B)) begin
        DMA1_V_V_1_payload_B <= reg_248;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == DMA2_V_V_1_load_A)) begin
        DMA2_V_V_1_payload_A <= reg_248;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == DMA2_V_V_1_load_B)) begin
        DMA2_V_V_1_payload_B <= reg_248;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == DMA3_V_V_1_load_A)) begin
        DMA3_V_V_1_payload_A <= reg_248;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == DMA3_V_V_1_load_B)) begin
        DMA3_V_V_1_payload_B <= reg_248;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == DMA4_V_V_1_load_A)) begin
        DMA4_V_V_1_payload_A <= reg_248;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == DMA4_V_V_1_load_B)) begin
        DMA4_V_V_1_payload_B <= reg_248;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == DMA5_V_V_1_load_A)) begin
        DMA5_V_V_1_payload_A <= reg_248;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == DMA5_V_V_1_load_B)) begin
        DMA5_V_V_1_payload_B <= reg_248;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == DMA6_V_V_1_load_A)) begin
        DMA6_V_V_1_payload_A <= reg_248;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == DMA6_V_V_1_load_B)) begin
        DMA6_V_V_1_payload_B <= reg_248;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == WeightDMA_V_V_0_load_A)) begin
        WeightDMA_V_V_0_payload_A <= WeightDMA_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == WeightDMA_V_V_0_load_B)) begin
        WeightDMA_V_V_0_payload_B <= WeightDMA_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp6_stage0_11001) & (tmp_3_fu_331_p2 == 1'd0) & (ap_enable_reg_pp6_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp6_stage0)) | ((1'b0 == ap_block_pp5_stage0_11001) & (tmp_2_fu_319_p2 == 1'd0) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0)) | ((1'b0 == ap_block_pp4_stage0_11001) & (tmp_1_fu_307_p2 == 1'd0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0)) | ((1'b0 == ap_block_pp3_stage0_11001) & (tmp_s_fu_295_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_pp2_stage0_11001) & (tmp_8_fu_283_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (tmp_4_fu_271_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (tmp_fu_259_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        reg_248 <= WeightDMA_V_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        tmp_1_reg_379 <= tmp_1_fu_307_p2;
        tmp_1_reg_379_pp4_iter1_reg <= tmp_1_reg_379;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        tmp_2_reg_388 <= tmp_2_fu_319_p2;
        tmp_2_reg_388_pp5_iter1_reg <= tmp_2_reg_388;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp6_stage0_11001) & (1'b1 == ap_CS_fsm_pp6_stage0))) begin
        tmp_3_reg_397 <= tmp_3_fu_331_p2;
        tmp_3_reg_397_pp6_iter1_reg <= tmp_3_reg_397;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        tmp_4_reg_352 <= tmp_4_fu_271_p2;
        tmp_4_reg_352_pp1_iter1_reg <= tmp_4_reg_352;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        tmp_8_reg_365 <= tmp_8_fu_283_p2;
        tmp_8_reg_365_pp2_iter1_reg <= tmp_8_reg_365;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_reg_343 <= tmp_fu_259_p2;
        tmp_reg_343_pp0_iter1_reg <= tmp_reg_343;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        tmp_s_reg_370 <= tmp_s_fu_295_p2;
        tmp_s_reg_370_pp3_iter1_reg <= tmp_s_reg_370;
    end
end

always @ (*) begin
    if ((1'b1 == DMA0_V_V_1_sel)) begin
        DMA0_V_V_1_data_out = DMA0_V_V_1_payload_B;
    end else begin
        DMA0_V_V_1_data_out = DMA0_V_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_343 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        DMA0_V_V_1_vld_in = 1'b1;
    end else begin
        DMA0_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (tmp_reg_343_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (tmp_reg_343 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        DMA0_V_V_TDATA_blk_n = DMA0_V_V_1_state[1'd1];
    end else begin
        DMA0_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == DMA1_V_V_1_sel)) begin
        DMA1_V_V_1_data_out = DMA1_V_V_1_payload_B;
    end else begin
        DMA1_V_V_1_data_out = DMA1_V_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (tmp_4_reg_352 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        DMA1_V_V_1_vld_in = 1'b1;
    end else begin
        DMA1_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0) & (tmp_4_reg_352_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0) & (tmp_4_reg_352 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        DMA1_V_V_TDATA_blk_n = DMA1_V_V_1_state[1'd1];
    end else begin
        DMA1_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == DMA2_V_V_1_sel)) begin
        DMA2_V_V_1_data_out = DMA2_V_V_1_payload_B;
    end else begin
        DMA2_V_V_1_data_out = DMA2_V_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (tmp_8_reg_365 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        DMA2_V_V_1_vld_in = 1'b1;
    end else begin
        DMA2_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0) & (tmp_8_reg_365_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0) & (tmp_8_reg_365 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
        DMA2_V_V_TDATA_blk_n = DMA2_V_V_1_state[1'd1];
    end else begin
        DMA2_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == DMA3_V_V_1_sel)) begin
        DMA3_V_V_1_data_out = DMA3_V_V_1_payload_B;
    end else begin
        DMA3_V_V_1_data_out = DMA3_V_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (tmp_s_reg_370 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        DMA3_V_V_1_vld_in = 1'b1;
    end else begin
        DMA3_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp3_stage0) & (tmp_s_reg_370_pp3_iter1_reg == 1'd0) & (ap_enable_reg_pp3_iter2 == 1'b1)) | ((1'b0 == ap_block_pp3_stage0) & (tmp_s_reg_370 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)))) begin
        DMA3_V_V_TDATA_blk_n = DMA3_V_V_1_state[1'd1];
    end else begin
        DMA3_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == DMA4_V_V_1_sel)) begin
        DMA4_V_V_1_data_out = DMA4_V_V_1_payload_B;
    end else begin
        DMA4_V_V_1_data_out = DMA4_V_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (tmp_1_reg_379 == 1'd0) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        DMA4_V_V_1_vld_in = 1'b1;
    end else begin
        DMA4_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp4_stage0) & (tmp_1_reg_379_pp4_iter1_reg == 1'd0) & (ap_enable_reg_pp4_iter2 == 1'b1)) | ((1'b0 == ap_block_pp4_stage0) & (tmp_1_reg_379 == 1'd0) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0)))) begin
        DMA4_V_V_TDATA_blk_n = DMA4_V_V_1_state[1'd1];
    end else begin
        DMA4_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == DMA5_V_V_1_sel)) begin
        DMA5_V_V_1_data_out = DMA5_V_V_1_payload_B;
    end else begin
        DMA5_V_V_1_data_out = DMA5_V_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (tmp_2_reg_388 == 1'd0) & (ap_enable_reg_pp5_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        DMA5_V_V_1_vld_in = 1'b1;
    end else begin
        DMA5_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp5_stage0) & (tmp_2_reg_388_pp5_iter1_reg == 1'd0) & (ap_enable_reg_pp5_iter2 == 1'b1)) | ((1'b0 == ap_block_pp5_stage0) & (tmp_2_reg_388 == 1'd0) & (ap_enable_reg_pp5_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0)))) begin
        DMA5_V_V_TDATA_blk_n = DMA5_V_V_1_state[1'd1];
    end else begin
        DMA5_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == DMA6_V_V_1_sel)) begin
        DMA6_V_V_1_data_out = DMA6_V_V_1_payload_B;
    end else begin
        DMA6_V_V_1_data_out = DMA6_V_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp6_stage0_11001) & (tmp_3_reg_397 == 1'd0) & (ap_enable_reg_pp6_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp6_stage0))) begin
        DMA6_V_V_1_vld_in = 1'b1;
    end else begin
        DMA6_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp6_stage0) & (tmp_3_reg_397_pp6_iter1_reg == 1'd0) & (ap_enable_reg_pp6_iter2 == 1'b1)) | ((1'b0 == ap_block_pp6_stage0) & (tmp_3_reg_397 == 1'd0) & (ap_enable_reg_pp6_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp6_stage0)))) begin
        DMA6_V_V_TDATA_blk_n = DMA6_V_V_1_state[1'd1];
    end else begin
        DMA6_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp6_stage0_11001) & (tmp_3_fu_331_p2 == 1'd0) & (ap_enable_reg_pp6_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp6_stage0)) | ((1'b0 == ap_block_pp5_stage0_11001) & (tmp_2_fu_319_p2 == 1'd0) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0)) | ((1'b0 == ap_block_pp4_stage0_11001) & (tmp_1_fu_307_p2 == 1'd0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0)) | ((1'b0 == ap_block_pp3_stage0_11001) & (tmp_s_fu_295_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_pp2_stage0_11001) & (tmp_8_fu_283_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (tmp_4_fu_271_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (tmp_fu_259_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        WeightDMA_V_V_0_ack_out = 1'b1;
    end else begin
        WeightDMA_V_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == WeightDMA_V_V_0_sel)) begin
        WeightDMA_V_V_0_data_out = WeightDMA_V_V_0_payload_B;
    end else begin
        WeightDMA_V_V_0_data_out = WeightDMA_V_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp6_stage0) & (tmp_3_fu_331_p2 == 1'd0) & (ap_enable_reg_pp6_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp6_stage0)) | ((1'b0 == ap_block_pp5_stage0) & (tmp_2_fu_319_p2 == 1'd0) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0)) | ((1'b0 == ap_block_pp4_stage0) & (tmp_1_fu_307_p2 == 1'd0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0)) | ((1'b0 == ap_block_pp3_stage0) & (tmp_s_fu_295_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_pp2_stage0) & (tmp_8_fu_283_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp1_stage0) & (tmp_4_fu_271_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (tmp_fu_259_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        WeightDMA_V_V_TDATA_blk_n = WeightDMA_V_V_0_state[1'd0];
    end else begin
        WeightDMA_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((tmp_fu_259_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((tmp_4_fu_271_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state6 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state6 = 1'b0;
    end
end

always @ (*) begin
    if ((tmp_8_fu_283_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state10 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state10 = 1'b0;
    end
end

always @ (*) begin
    if ((tmp_s_fu_295_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state14 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state14 = 1'b0;
    end
end

always @ (*) begin
    if ((tmp_1_fu_307_p2 == 1'd1)) begin
        ap_condition_pp4_exit_iter0_state18 = 1'b1;
    end else begin
        ap_condition_pp4_exit_iter0_state18 = 1'b0;
    end
end

always @ (*) begin
    if ((tmp_2_fu_319_p2 == 1'd1)) begin
        ap_condition_pp5_exit_iter0_state22 = 1'b1;
    end else begin
        ap_condition_pp5_exit_iter0_state22 = 1'b0;
    end
end

always @ (*) begin
    if ((tmp_3_fu_331_p2 == 1'd1)) begin
        ap_condition_pp6_exit_iter0_state26 = 1'b1;
    end else begin
        ap_condition_pp6_exit_iter0_state26 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter2 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter2 == 1'b0) & (ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp5_iter2 == 1'b0) & (ap_enable_reg_pp5_iter1 == 1'b0) & (ap_enable_reg_pp5_iter0 == 1'b0))) begin
        ap_idle_pp5 = 1'b1;
    end else begin
        ap_idle_pp5 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp6_iter2 == 1'b0) & (ap_enable_reg_pp6_iter1 == 1'b0) & (ap_enable_reg_pp6_iter0 == 1'b0))) begin
        ap_idle_pp6 = 1'b1;
    end else begin
        ap_idle_pp6 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp6_stage0) & (ap_enable_reg_pp6_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp6_stage0))) begin
        grp_fu_325_p0 = i6_reg_237;
    end else if (((1'b0 == ap_block_pp5_stage0) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        grp_fu_325_p0 = i5_reg_226;
    end else if (((1'b0 == ap_block_pp4_stage0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        grp_fu_325_p0 = i4_reg_215;
    end else if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        grp_fu_325_p0 = i3_reg_204;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        grp_fu_325_p0 = i2_reg_193;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        grp_fu_325_p0 = i1_reg_182;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_325_p0 = i_reg_171;
    end else begin
        grp_fu_325_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp6_stage0) & (ap_enable_reg_pp6_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp6_stage0))) begin
        grp_fu_325_p1 = 12'd1;
    end else if (((1'b0 == ap_block_pp5_stage0) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        grp_fu_325_p1 = 11'd1;
    end else if (((1'b0 == ap_block_pp4_stage0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        grp_fu_325_p1 = 10'd1;
    end else if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        grp_fu_325_p1 = 9'd1;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        grp_fu_325_p1 = 8'd1;
    end else if ((((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_325_p1 = 7'd1;
    end else begin
        grp_fu_325_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (tmp_fu_259_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (tmp_fu_259_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (tmp_4_fu_271_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (tmp_4_fu_271_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (tmp_8_fu_283_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (tmp_8_fu_283_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (tmp_s_fu_295_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b1)) | ((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (tmp_s_fu_295_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_pp4_stage0;
        end
        ap_ST_fsm_pp4_stage0 : begin
            if ((~((1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter1 == 1'b0) & (tmp_1_fu_307_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if ((((1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b1)) | ((1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter1 == 1'b0) & (tmp_1_fu_307_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_pp5_stage0;
        end
        ap_ST_fsm_pp5_stage0 : begin
            if ((~((ap_enable_reg_pp5_iter1 == 1'b0) & (tmp_2_fu_319_p2 == 1'd1) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b0 == ap_block_pp5_stage0_subdone)) & ~((ap_enable_reg_pp5_iter1 == 1'b0) & (ap_enable_reg_pp5_iter2 == 1'b1) & (1'b0 == ap_block_pp5_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end else if ((((ap_enable_reg_pp5_iter1 == 1'b0) & (ap_enable_reg_pp5_iter2 == 1'b1) & (1'b0 == ap_block_pp5_stage0_subdone)) | ((ap_enable_reg_pp5_iter1 == 1'b0) & (tmp_2_fu_319_p2 == 1'd1) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b0 == ap_block_pp5_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_pp6_stage0;
        end
        ap_ST_fsm_pp6_stage0 : begin
            if ((~((ap_enable_reg_pp6_iter1 == 1'b0) & (tmp_3_fu_331_p2 == 1'd1) & (ap_enable_reg_pp6_iter0 == 1'b1) & (1'b0 == ap_block_pp6_stage0_subdone)) & ~((ap_enable_reg_pp6_iter1 == 1'b0) & (ap_enable_reg_pp6_iter2 == 1'b1) & (1'b0 == ap_block_pp6_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp6_stage0;
            end else if ((((ap_enable_reg_pp6_iter1 == 1'b0) & (ap_enable_reg_pp6_iter2 == 1'b1) & (1'b0 == ap_block_pp6_stage0_subdone)) | ((ap_enable_reg_pp6_iter1 == 1'b0) & (tmp_3_fu_331_p2 == 1'd1) & (ap_enable_reg_pp6_iter0 == 1'b1) & (1'b0 == ap_block_pp6_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp6_stage0;
            end
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign DMA0_V_V_1_ack_in = DMA0_V_V_1_state[1'd1];

assign DMA0_V_V_1_ack_out = DMA0_V_V_TREADY;

assign DMA0_V_V_1_load_A = (~DMA0_V_V_1_sel_wr & DMA0_V_V_1_state_cmp_full);

assign DMA0_V_V_1_load_B = (DMA0_V_V_1_state_cmp_full & DMA0_V_V_1_sel_wr);

assign DMA0_V_V_1_sel = DMA0_V_V_1_sel_rd;

assign DMA0_V_V_1_state_cmp_full = ((DMA0_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign DMA0_V_V_1_vld_out = DMA0_V_V_1_state[1'd0];

assign DMA0_V_V_TDATA = DMA0_V_V_1_data_out;

assign DMA0_V_V_TVALID = DMA0_V_V_1_state[1'd0];

assign DMA1_V_V_1_ack_in = DMA1_V_V_1_state[1'd1];

assign DMA1_V_V_1_ack_out = DMA1_V_V_TREADY;

assign DMA1_V_V_1_load_A = (~DMA1_V_V_1_sel_wr & DMA1_V_V_1_state_cmp_full);

assign DMA1_V_V_1_load_B = (DMA1_V_V_1_state_cmp_full & DMA1_V_V_1_sel_wr);

assign DMA1_V_V_1_sel = DMA1_V_V_1_sel_rd;

assign DMA1_V_V_1_state_cmp_full = ((DMA1_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign DMA1_V_V_1_vld_out = DMA1_V_V_1_state[1'd0];

assign DMA1_V_V_TDATA = DMA1_V_V_1_data_out;

assign DMA1_V_V_TVALID = DMA1_V_V_1_state[1'd0];

assign DMA2_V_V_1_ack_in = DMA2_V_V_1_state[1'd1];

assign DMA2_V_V_1_ack_out = DMA2_V_V_TREADY;

assign DMA2_V_V_1_load_A = (~DMA2_V_V_1_sel_wr & DMA2_V_V_1_state_cmp_full);

assign DMA2_V_V_1_load_B = (DMA2_V_V_1_state_cmp_full & DMA2_V_V_1_sel_wr);

assign DMA2_V_V_1_sel = DMA2_V_V_1_sel_rd;

assign DMA2_V_V_1_state_cmp_full = ((DMA2_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign DMA2_V_V_1_vld_out = DMA2_V_V_1_state[1'd0];

assign DMA2_V_V_TDATA = DMA2_V_V_1_data_out;

assign DMA2_V_V_TVALID = DMA2_V_V_1_state[1'd0];

assign DMA3_V_V_1_ack_in = DMA3_V_V_1_state[1'd1];

assign DMA3_V_V_1_ack_out = DMA3_V_V_TREADY;

assign DMA3_V_V_1_load_A = (~DMA3_V_V_1_sel_wr & DMA3_V_V_1_state_cmp_full);

assign DMA3_V_V_1_load_B = (DMA3_V_V_1_state_cmp_full & DMA3_V_V_1_sel_wr);

assign DMA3_V_V_1_sel = DMA3_V_V_1_sel_rd;

assign DMA3_V_V_1_state_cmp_full = ((DMA3_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign DMA3_V_V_1_vld_out = DMA3_V_V_1_state[1'd0];

assign DMA3_V_V_TDATA = DMA3_V_V_1_data_out;

assign DMA3_V_V_TVALID = DMA3_V_V_1_state[1'd0];

assign DMA4_V_V_1_ack_in = DMA4_V_V_1_state[1'd1];

assign DMA4_V_V_1_ack_out = DMA4_V_V_TREADY;

assign DMA4_V_V_1_load_A = (~DMA4_V_V_1_sel_wr & DMA4_V_V_1_state_cmp_full);

assign DMA4_V_V_1_load_B = (DMA4_V_V_1_state_cmp_full & DMA4_V_V_1_sel_wr);

assign DMA4_V_V_1_sel = DMA4_V_V_1_sel_rd;

assign DMA4_V_V_1_state_cmp_full = ((DMA4_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign DMA4_V_V_1_vld_out = DMA4_V_V_1_state[1'd0];

assign DMA4_V_V_TDATA = DMA4_V_V_1_data_out;

assign DMA4_V_V_TVALID = DMA4_V_V_1_state[1'd0];

assign DMA5_V_V_1_ack_in = DMA5_V_V_1_state[1'd1];

assign DMA5_V_V_1_ack_out = DMA5_V_V_TREADY;

assign DMA5_V_V_1_load_A = (~DMA5_V_V_1_sel_wr & DMA5_V_V_1_state_cmp_full);

assign DMA5_V_V_1_load_B = (DMA5_V_V_1_state_cmp_full & DMA5_V_V_1_sel_wr);

assign DMA5_V_V_1_sel = DMA5_V_V_1_sel_rd;

assign DMA5_V_V_1_state_cmp_full = ((DMA5_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign DMA5_V_V_1_vld_out = DMA5_V_V_1_state[1'd0];

assign DMA5_V_V_TDATA = DMA5_V_V_1_data_out;

assign DMA5_V_V_TVALID = DMA5_V_V_1_state[1'd0];

assign DMA6_V_V_1_ack_in = DMA6_V_V_1_state[1'd1];

assign DMA6_V_V_1_ack_out = DMA6_V_V_TREADY;

assign DMA6_V_V_1_load_A = (~DMA6_V_V_1_sel_wr & DMA6_V_V_1_state_cmp_full);

assign DMA6_V_V_1_load_B = (DMA6_V_V_1_state_cmp_full & DMA6_V_V_1_sel_wr);

assign DMA6_V_V_1_sel = DMA6_V_V_1_sel_rd;

assign DMA6_V_V_1_state_cmp_full = ((DMA6_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign DMA6_V_V_1_vld_out = DMA6_V_V_1_state[1'd0];

assign DMA6_V_V_TDATA = DMA6_V_V_1_data_out;

assign DMA6_V_V_TVALID = DMA6_V_V_1_state[1'd0];

assign WeightDMA_V_V_0_ack_in = WeightDMA_V_V_0_state[1'd1];

assign WeightDMA_V_V_0_load_A = (~WeightDMA_V_V_0_sel_wr & WeightDMA_V_V_0_state_cmp_full);

assign WeightDMA_V_V_0_load_B = (WeightDMA_V_V_0_state_cmp_full & WeightDMA_V_V_0_sel_wr);

assign WeightDMA_V_V_0_sel = WeightDMA_V_V_0_sel_rd;

assign WeightDMA_V_V_0_state_cmp_full = ((WeightDMA_V_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign WeightDMA_V_V_0_vld_in = WeightDMA_V_V_TVALID;

assign WeightDMA_V_V_0_vld_out = WeightDMA_V_V_0_state[1'd0];

assign WeightDMA_V_V_TREADY = WeightDMA_V_V_0_state[1'd1];

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp5_stage0 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp6_stage0 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((tmp_fu_259_p2 == 1'd0) & (1'b0 == WeightDMA_V_V_0_vld_out) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b1 == ap_block_state3_io) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((tmp_fu_259_p2 == 1'd0) & (1'b0 == WeightDMA_V_V_0_vld_out) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b1 == ap_block_state3_io) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((tmp_fu_259_p2 == 1'd0) & (1'b0 == WeightDMA_V_V_0_vld_out) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = ((tmp_4_fu_271_p2 == 1'd0) & (1'b0 == WeightDMA_V_V_0_vld_out) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((1'b1 == ap_block_state8_io) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b1 == ap_block_state7_io) & (ap_enable_reg_pp1_iter1 == 1'b1)) | ((tmp_4_fu_271_p2 == 1'd0) & (1'b0 == WeightDMA_V_V_0_vld_out) & (ap_enable_reg_pp1_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((1'b1 == ap_block_state8_io) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b1 == ap_block_state7_io) & (ap_enable_reg_pp1_iter1 == 1'b1)) | ((tmp_4_fu_271_p2 == 1'd0) & (1'b0 == WeightDMA_V_V_0_vld_out) & (ap_enable_reg_pp1_iter0 == 1'b1)));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_01001 = ((tmp_8_fu_283_p2 == 1'd0) & (1'b0 == WeightDMA_V_V_0_vld_out) & (ap_enable_reg_pp2_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp2_stage0_11001 = (((1'b1 == ap_block_state12_io) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((1'b1 == ap_block_state11_io) & (ap_enable_reg_pp2_iter1 == 1'b1)) | ((tmp_8_fu_283_p2 == 1'd0) & (1'b0 == WeightDMA_V_V_0_vld_out) & (ap_enable_reg_pp2_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = (((1'b1 == ap_block_state12_io) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((1'b1 == ap_block_state11_io) & (ap_enable_reg_pp2_iter1 == 1'b1)) | ((tmp_8_fu_283_p2 == 1'd0) & (1'b0 == WeightDMA_V_V_0_vld_out) & (ap_enable_reg_pp2_iter0 == 1'b1)));
end

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage0_01001 = ((tmp_s_fu_295_p2 == 1'd0) & (1'b0 == WeightDMA_V_V_0_vld_out) & (ap_enable_reg_pp3_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp3_stage0_11001 = (((1'b1 == ap_block_state16_io) & (ap_enable_reg_pp3_iter2 == 1'b1)) | ((1'b1 == ap_block_state15_io) & (ap_enable_reg_pp3_iter1 == 1'b1)) | ((tmp_s_fu_295_p2 == 1'd0) & (1'b0 == WeightDMA_V_V_0_vld_out) & (ap_enable_reg_pp3_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp3_stage0_subdone = (((1'b1 == ap_block_state16_io) & (ap_enable_reg_pp3_iter2 == 1'b1)) | ((1'b1 == ap_block_state15_io) & (ap_enable_reg_pp3_iter1 == 1'b1)) | ((tmp_s_fu_295_p2 == 1'd0) & (1'b0 == WeightDMA_V_V_0_vld_out) & (ap_enable_reg_pp3_iter0 == 1'b1)));
end

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp4_stage0_01001 = ((tmp_1_fu_307_p2 == 1'd0) & (1'b0 == WeightDMA_V_V_0_vld_out) & (ap_enable_reg_pp4_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp4_stage0_11001 = (((1'b1 == ap_block_state20_io) & (ap_enable_reg_pp4_iter2 == 1'b1)) | ((1'b1 == ap_block_state19_io) & (ap_enable_reg_pp4_iter1 == 1'b1)) | ((tmp_1_fu_307_p2 == 1'd0) & (1'b0 == WeightDMA_V_V_0_vld_out) & (ap_enable_reg_pp4_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp4_stage0_subdone = (((1'b1 == ap_block_state20_io) & (ap_enable_reg_pp4_iter2 == 1'b1)) | ((1'b1 == ap_block_state19_io) & (ap_enable_reg_pp4_iter1 == 1'b1)) | ((tmp_1_fu_307_p2 == 1'd0) & (1'b0 == WeightDMA_V_V_0_vld_out) & (ap_enable_reg_pp4_iter0 == 1'b1)));
end

assign ap_block_pp5_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp5_stage0_01001 = ((tmp_2_fu_319_p2 == 1'd0) & (1'b0 == WeightDMA_V_V_0_vld_out) & (ap_enable_reg_pp5_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp5_stage0_11001 = (((1'b1 == ap_block_state24_io) & (ap_enable_reg_pp5_iter2 == 1'b1)) | ((1'b1 == ap_block_state23_io) & (ap_enable_reg_pp5_iter1 == 1'b1)) | ((tmp_2_fu_319_p2 == 1'd0) & (1'b0 == WeightDMA_V_V_0_vld_out) & (ap_enable_reg_pp5_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp5_stage0_subdone = (((1'b1 == ap_block_state24_io) & (ap_enable_reg_pp5_iter2 == 1'b1)) | ((1'b1 == ap_block_state23_io) & (ap_enable_reg_pp5_iter1 == 1'b1)) | ((tmp_2_fu_319_p2 == 1'd0) & (1'b0 == WeightDMA_V_V_0_vld_out) & (ap_enable_reg_pp5_iter0 == 1'b1)));
end

assign ap_block_pp6_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp6_stage0_01001 = ((tmp_3_fu_331_p2 == 1'd0) & (1'b0 == WeightDMA_V_V_0_vld_out) & (ap_enable_reg_pp6_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp6_stage0_11001 = (((1'b1 == ap_block_state28_io) & (ap_enable_reg_pp6_iter2 == 1'b1)) | ((1'b1 == ap_block_state27_io) & (ap_enable_reg_pp6_iter1 == 1'b1)) | ((tmp_3_fu_331_p2 == 1'd0) & (1'b0 == WeightDMA_V_V_0_vld_out) & (ap_enable_reg_pp6_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp6_stage0_subdone = (((1'b1 == ap_block_state28_io) & (ap_enable_reg_pp6_iter2 == 1'b1)) | ((1'b1 == ap_block_state27_io) & (ap_enable_reg_pp6_iter1 == 1'b1)) | ((tmp_3_fu_331_p2 == 1'd0) & (1'b0 == WeightDMA_V_V_0_vld_out) & (ap_enable_reg_pp6_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_state10_pp2_stage0_iter0 = ((tmp_8_fu_283_p2 == 1'd0) & (1'b0 == WeightDMA_V_V_0_vld_out));
end

always @ (*) begin
    ap_block_state11_io = ((tmp_8_reg_365 == 1'd0) & (1'b0 == DMA2_V_V_1_ack_in));
end

assign ap_block_state11_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state12_io = ((tmp_8_reg_365_pp2_iter1_reg == 1'd0) & (1'b0 == DMA2_V_V_1_ack_in));
end

assign ap_block_state12_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state14_pp3_stage0_iter0 = ((tmp_s_fu_295_p2 == 1'd0) & (1'b0 == WeightDMA_V_V_0_vld_out));
end

always @ (*) begin
    ap_block_state15_io = ((tmp_s_reg_370 == 1'd0) & (1'b0 == DMA3_V_V_1_ack_in));
end

assign ap_block_state15_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state16_io = ((tmp_s_reg_370_pp3_iter1_reg == 1'd0) & (1'b0 == DMA3_V_V_1_ack_in));
end

assign ap_block_state16_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state18_pp4_stage0_iter0 = ((tmp_1_fu_307_p2 == 1'd0) & (1'b0 == WeightDMA_V_V_0_vld_out));
end

always @ (*) begin
    ap_block_state19_io = ((tmp_1_reg_379 == 1'd0) & (1'b0 == DMA4_V_V_1_ack_in));
end

assign ap_block_state19_pp4_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state20_io = ((tmp_1_reg_379_pp4_iter1_reg == 1'd0) & (1'b0 == DMA4_V_V_1_ack_in));
end

assign ap_block_state20_pp4_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state22_pp5_stage0_iter0 = ((tmp_2_fu_319_p2 == 1'd0) & (1'b0 == WeightDMA_V_V_0_vld_out));
end

always @ (*) begin
    ap_block_state23_io = ((tmp_2_reg_388 == 1'd0) & (1'b0 == DMA5_V_V_1_ack_in));
end

assign ap_block_state23_pp5_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state24_io = ((tmp_2_reg_388_pp5_iter1_reg == 1'd0) & (1'b0 == DMA5_V_V_1_ack_in));
end

assign ap_block_state24_pp5_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state26_pp6_stage0_iter0 = ((tmp_3_fu_331_p2 == 1'd0) & (1'b0 == WeightDMA_V_V_0_vld_out));
end

always @ (*) begin
    ap_block_state27_io = ((tmp_3_reg_397 == 1'd0) & (1'b0 == DMA6_V_V_1_ack_in));
end

assign ap_block_state27_pp6_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state28_io = ((tmp_3_reg_397_pp6_iter1_reg == 1'd0) & (1'b0 == DMA6_V_V_1_ack_in));
end

assign ap_block_state28_pp6_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((tmp_fu_259_p2 == 1'd0) & (1'b0 == WeightDMA_V_V_0_vld_out));
end

always @ (*) begin
    ap_block_state3_io = ((tmp_reg_343 == 1'd0) & (1'b0 == DMA0_V_V_1_ack_in));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = ((tmp_reg_343_pp0_iter1_reg == 1'd0) & (1'b0 == DMA0_V_V_1_ack_in));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp1_stage0_iter0 = ((tmp_4_fu_271_p2 == 1'd0) & (1'b0 == WeightDMA_V_V_0_vld_out));
end

always @ (*) begin
    ap_block_state7_io = ((tmp_4_reg_352 == 1'd0) & (1'b0 == DMA1_V_V_1_ack_in));
end

assign ap_block_state7_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_io = ((tmp_4_reg_352_pp1_iter1_reg == 1'd0) & (1'b0 == DMA1_V_V_1_ack_in));
end

assign ap_block_state8_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

assign ap_enable_pp5 = (ap_idle_pp5 ^ 1'b1);

assign ap_enable_pp6 = (ap_idle_pp6 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_fu_325_p2 = (grp_fu_325_p0 + grp_fu_325_p1);

assign tmp_1_fu_307_p2 = ((i4_reg_215 == 10'd680) ? 1'b1 : 1'b0);

assign tmp_2_fu_319_p2 = ((i5_reg_226 == 11'd1296) ? 1'b1 : 1'b0);

assign tmp_3_fu_331_p2 = ((i6_reg_237 == 12'd2384) ? 1'b1 : 1'b0);

assign tmp_4_fu_271_p2 = ((i1_reg_182 == 7'd74) ? 1'b1 : 1'b0);

assign tmp_8_fu_283_p2 = ((i2_reg_193 == 8'd212) ? 1'b1 : 1'b0);

assign tmp_fu_259_p2 = ((i_reg_171 == 7'd80) ? 1'b1 : 1'b0);

assign tmp_s_fu_295_p2 = ((i3_reg_204 == 9'd392) ? 1'b1 : 1'b0);

endmodule //Layer_DMA_Up
