// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Layer2_WriteSingleBRAM,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xazu3eg-sfvc784-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.249250,HLS_SYN_LAT=344,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=401,HLS_SYN_LUT=567,HLS_VERSION=2018_3}" *)

module Layer2_WriteSingleBRAM (
        ap_clk,
        ap_rst_n,
        feature_Data_TDATA,
        feature_Data_TVALID,
        feature_Data_TREADY,
        f_Data_address0,
        f_Data_ce0,
        f_Data_we0,
        f_Data_d0,
        full_flag,
        full_flag_ap_vld,
        full_flag_ap_ack
);

parameter    ap_ST_fsm_state1 = 31'd1;
parameter    ap_ST_fsm_pp0_stage0 = 31'd2;
parameter    ap_ST_fsm_pp0_stage1 = 31'd4;
parameter    ap_ST_fsm_pp0_stage2 = 31'd8;
parameter    ap_ST_fsm_pp0_stage3 = 31'd16;
parameter    ap_ST_fsm_pp0_stage4 = 31'd32;
parameter    ap_ST_fsm_pp0_stage5 = 31'd64;
parameter    ap_ST_fsm_pp0_stage6 = 31'd128;
parameter    ap_ST_fsm_pp0_stage7 = 31'd256;
parameter    ap_ST_fsm_pp0_stage8 = 31'd512;
parameter    ap_ST_fsm_pp0_stage9 = 31'd1024;
parameter    ap_ST_fsm_pp0_stage10 = 31'd2048;
parameter    ap_ST_fsm_pp0_stage11 = 31'd4096;
parameter    ap_ST_fsm_pp0_stage12 = 31'd8192;
parameter    ap_ST_fsm_state16 = 31'd16384;
parameter    ap_ST_fsm_state17 = 31'd32768;
parameter    ap_ST_fsm_pp1_stage0 = 31'd65536;
parameter    ap_ST_fsm_pp1_stage1 = 31'd131072;
parameter    ap_ST_fsm_pp1_stage2 = 31'd262144;
parameter    ap_ST_fsm_pp1_stage3 = 31'd524288;
parameter    ap_ST_fsm_pp1_stage4 = 31'd1048576;
parameter    ap_ST_fsm_pp1_stage5 = 31'd2097152;
parameter    ap_ST_fsm_pp1_stage6 = 31'd4194304;
parameter    ap_ST_fsm_pp1_stage7 = 31'd8388608;
parameter    ap_ST_fsm_pp1_stage8 = 31'd16777216;
parameter    ap_ST_fsm_pp1_stage9 = 31'd33554432;
parameter    ap_ST_fsm_pp1_stage10 = 31'd67108864;
parameter    ap_ST_fsm_pp1_stage11 = 31'd134217728;
parameter    ap_ST_fsm_pp1_stage12 = 31'd268435456;
parameter    ap_ST_fsm_state32 = 31'd536870912;
parameter    ap_ST_fsm_state33 = 31'd1073741824;

input   ap_clk;
input   ap_rst_n;
input  [63:0] feature_Data_TDATA;
input   feature_Data_TVALID;
output   feature_Data_TREADY;
output  [6:0] f_Data_address0;
output   f_Data_ce0;
output   f_Data_we0;
output  [255:0] f_Data_d0;
output   full_flag;
output   full_flag_ap_vld;
input   full_flag_ap_ack;

reg[6:0] f_Data_address0;
reg f_Data_ce0;
reg f_Data_we0;
reg[255:0] f_Data_d0;

 reg    ap_rst_n_inv;
reg   [63:0] feature_Data_0_data_out;
wire    feature_Data_0_vld_in;
wire    feature_Data_0_vld_out;
wire    feature_Data_0_ack_in;
reg    feature_Data_0_ack_out;
reg   [63:0] feature_Data_0_payload_A;
reg   [63:0] feature_Data_0_payload_B;
reg    feature_Data_0_sel_rd;
reg    feature_Data_0_sel_wr;
wire    feature_Data_0_sel;
wire    feature_Data_0_load_A;
wire    feature_Data_0_load_B;
reg   [1:0] feature_Data_0_state;
wire    feature_Data_0_state_cmp_full;
reg    full_flag_1_data_reg;
reg    full_flag_1_data_in;
reg    full_flag_1_vld_reg;
reg    full_flag_1_vld_in;
reg    full_flag_1_ack_in;
wire    full_flag_1_ack_out;
reg    feature_Data_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [30:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_pp0_stage5;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_pp0_stage6;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_pp0_stage7;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_pp0_stage8;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_pp0_stage9;
wire    ap_CS_fsm_pp0_stage10;
wire    ap_block_pp0_stage10;
wire    ap_CS_fsm_pp0_stage11;
wire    ap_block_pp0_stage11;
wire    ap_CS_fsm_pp0_stage12;
wire    ap_block_pp0_stage12;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_pp1_stage0;
wire    ap_CS_fsm_pp1_stage1;
wire    ap_block_pp1_stage1;
wire    ap_CS_fsm_pp1_stage2;
wire    ap_block_pp1_stage2;
wire    ap_CS_fsm_pp1_stage3;
wire    ap_block_pp1_stage3;
wire    ap_CS_fsm_pp1_stage4;
wire    ap_block_pp1_stage4;
wire    ap_CS_fsm_pp1_stage5;
wire    ap_block_pp1_stage5;
wire    ap_CS_fsm_pp1_stage6;
wire    ap_block_pp1_stage6;
wire    ap_CS_fsm_pp1_stage7;
wire    ap_block_pp1_stage7;
wire    ap_CS_fsm_pp1_stage8;
wire    ap_block_pp1_stage8;
wire    ap_CS_fsm_pp1_stage9;
wire    ap_block_pp1_stage9;
wire    ap_CS_fsm_pp1_stage10;
wire    ap_block_pp1_stage10;
wire    ap_CS_fsm_pp1_stage11;
wire    ap_block_pp1_stage11;
wire    ap_CS_fsm_pp1_stage12;
wire    ap_block_pp1_stage12;
reg    full_flag_blk_n;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state33;
reg   [5:0] p_5_reg_176;
reg   [3:0] i4_reg_188;
reg   [6:0] p_s_reg_200;
reg   [4:0] i1_reg_212;
reg   [63:0] reg_223;
reg    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state15_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
reg    ap_block_state6_pp0_stage4_iter0;
reg    ap_block_pp0_stage4_11001;
reg    ap_block_state10_pp0_stage8_iter0;
reg    ap_block_pp0_stage8_11001;
reg    ap_block_state13_pp0_stage11_iter0;
reg    ap_block_pp0_stage11_11001;
reg    ap_block_state18_pp1_stage0_iter0;
wire    ap_block_state31_pp1_stage0_iter1;
reg    ap_block_pp1_stage0_11001;
reg    ap_block_state22_pp1_stage4_iter0;
reg    ap_block_pp1_stage4_11001;
reg    ap_block_state26_pp1_stage8_iter0;
reg    ap_block_pp1_stage8_11001;
reg    ap_block_state29_pp1_stage11_iter0;
reg    ap_block_pp1_stage11_11001;
reg   [63:0] reg_227;
reg    ap_block_state3_pp0_stage1_iter0;
reg    ap_block_pp0_stage1_11001;
reg    ap_block_state7_pp0_stage5_iter0;
reg    ap_block_pp0_stage5_11001;
reg    ap_block_state11_pp0_stage9_iter0;
reg    ap_block_pp0_stage9_11001;
reg    ap_block_state19_pp1_stage1_iter0;
reg    ap_block_pp1_stage1_11001;
reg    ap_block_state23_pp1_stage5_iter0;
reg    ap_block_pp1_stage5_11001;
reg    ap_block_state27_pp1_stage9_iter0;
reg    ap_block_pp1_stage9_11001;
reg   [63:0] reg_231;
reg    ap_block_state4_pp0_stage2_iter0;
reg    ap_block_pp0_stage2_11001;
reg    ap_block_state8_pp0_stage6_iter0;
reg    ap_block_pp0_stage6_11001;
reg    ap_block_state12_pp0_stage10_iter0;
reg    ap_block_pp0_stage10_11001;
reg    ap_block_state20_pp1_stage2_iter0;
reg    ap_block_pp1_stage2_11001;
reg    ap_block_state24_pp1_stage6_iter0;
reg    ap_block_pp1_stage6_11001;
reg    ap_block_state28_pp1_stage10_iter0;
reg    ap_block_pp1_stage10_11001;
reg    ap_block_state5_pp0_stage3_iter0;
reg    ap_block_pp0_stage3_11001;
wire   [255:0] tmp_3_fu_240_p5;
wire   [5:0] tmp_6_s_fu_253_p2;
reg   [5:0] tmp_6_s_reg_467;
reg    ap_block_state9_pp0_stage7_iter0;
reg    ap_block_pp0_stage7_11001;
wire   [255:0] tmp_4_fu_264_p5;
wire   [255:0] tmp_6_fu_291_p5;
reg    ap_block_state14_pp0_stage12_iter0;
reg    ap_block_pp0_stage12_11001;
wire   [255:0] tmp_7_fu_315_p5;
wire   [0:0] exitcond1_fu_328_p2;
reg   [0:0] exitcond1_reg_502;
wire   [5:0] tmp_1_fu_334_p2;
reg    ap_enable_reg_pp0_iter1;
wire   [3:0] i_fu_340_p2;
reg    ap_block_state21_pp1_stage3_iter0;
reg    ap_block_pp1_stage3_11001;
wire   [255:0] tmp_10_fu_351_p5;
wire   [6:0] f_addr_3_s_fu_364_p2;
reg   [6:0] f_addr_3_s_reg_526;
reg    ap_block_state25_pp1_stage7_iter0;
reg    ap_block_pp1_stage7_11001;
wire   [255:0] tmp_11_fu_375_p5;
wire   [255:0] tmp_12_fu_402_p5;
reg    ap_block_state30_pp1_stage12_iter0;
reg    ap_block_pp1_stage12_11001;
wire   [255:0] tmp_13_fu_426_p5;
wire   [4:0] i_2_fu_439_p2;
reg   [4:0] i_2_reg_561;
wire   [0:0] exitcond8_fu_445_p2;
reg   [0:0] exitcond8_reg_566;
wire   [6:0] f_addr_2_fu_451_p2;
reg    ap_enable_reg_pp1_iter1;
wire    ap_CS_fsm_state1;
reg    ap_block_pp0_stage12_subdone;
reg    ap_block_pp0_stage0_subdone;
reg    ap_block_pp1_stage12_subdone;
reg    ap_block_pp1_stage0_subdone;
wire   [63:0] tmp_5_fu_235_p1;
wire   [63:0] tmp_5_1_fu_259_p1;
wire   [63:0] tmp_5_2_fu_286_p1;
wire   [63:0] tmp_fu_310_p1;
wire   [63:0] tmp_s_fu_346_p1;
wire   [63:0] tmp_2_1_fu_370_p1;
wire   [63:0] tmp_2_2_fu_397_p1;
wire   [63:0] tmp_9_fu_421_p1;
wire   [6:0] tmp_6_cast2_fu_277_p1;
wire   [6:0] tmp_6_1_fu_280_p2;
wire   [5:0] f_addr_fu_304_p2;
wire   [7:0] f_addr_3_cast1_fu_388_p1;
wire   [7:0] f_addr_3_1_fu_391_p2;
wire   [6:0] f_addr_1_fu_415_p2;
reg   [30:0] ap_NS_fsm;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage2_subdone;
reg    ap_block_pp0_stage3_subdone;
reg    ap_block_pp0_stage4_subdone;
reg    ap_block_pp0_stage5_subdone;
reg    ap_block_pp0_stage6_subdone;
reg    ap_block_pp0_stage7_subdone;
reg    ap_block_pp0_stage8_subdone;
reg    ap_block_pp0_stage9_subdone;
reg    ap_block_pp0_stage10_subdone;
reg    ap_block_pp0_stage11_subdone;
reg    ap_block_pp1_stage1_subdone;
reg    ap_block_pp1_stage2_subdone;
reg    ap_block_pp1_stage3_subdone;
reg    ap_block_pp1_stage4_subdone;
reg    ap_block_pp1_stage5_subdone;
reg    ap_block_pp1_stage6_subdone;
reg    ap_block_pp1_stage7_subdone;
reg    ap_block_pp1_stage8_subdone;
reg    ap_block_pp1_stage9_subdone;
reg    ap_block_pp1_stage10_subdone;
reg    ap_block_pp1_stage11_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 feature_Data_0_sel_rd = 1'b0;
#0 feature_Data_0_sel_wr = 1'b0;
#0 feature_Data_0_state = 2'd0;
#0 full_flag_1_data_reg = 1'b0;
#0 full_flag_1_vld_reg = 1'b0;
#0 ap_CS_fsm = 31'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage12_subdone) & (exitcond1_fu_328_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage12))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state1)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage12_subdone) & (1'b1 == ap_CS_fsm_pp0_stage12)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage12_subdone) & (exitcond8_fu_445_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp1_stage12))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state17) & (full_flag_1_ack_in == 1'b1))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp1_stage12_subdone) & (1'b1 == ap_CS_fsm_pp1_stage12)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((1'b1 == ap_CS_fsm_state17) & (full_flag_1_ack_in == 1'b1))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        feature_Data_0_sel_rd <= 1'b0;
    end else begin
        if (((feature_Data_0_ack_out == 1'b1) & (feature_Data_0_vld_out == 1'b1))) begin
            feature_Data_0_sel_rd <= ~feature_Data_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        feature_Data_0_sel_wr <= 1'b0;
    end else begin
        if (((feature_Data_0_ack_in == 1'b1) & (feature_Data_0_vld_in == 1'b1))) begin
            feature_Data_0_sel_wr <= ~feature_Data_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        feature_Data_0_state <= 2'd0;
    end else begin
        if ((((feature_Data_0_state == 2'd2) & (feature_Data_0_vld_in == 1'b0)) | ((feature_Data_0_state == 2'd3) & (feature_Data_0_vld_in == 1'b0) & (feature_Data_0_ack_out == 1'b1)))) begin
            feature_Data_0_state <= 2'd2;
        end else if ((((feature_Data_0_state == 2'd1) & (feature_Data_0_ack_out == 1'b0)) | ((feature_Data_0_state == 2'd3) & (feature_Data_0_ack_out == 1'b0) & (feature_Data_0_vld_in == 1'b1)))) begin
            feature_Data_0_state <= 2'd1;
        end else if (((~((feature_Data_0_vld_in == 1'b0) & (feature_Data_0_ack_out == 1'b1)) & ~((feature_Data_0_ack_out == 1'b0) & (feature_Data_0_vld_in == 1'b1)) & (feature_Data_0_state == 2'd3)) | ((feature_Data_0_state == 2'd1) & (feature_Data_0_ack_out == 1'b1)) | ((feature_Data_0_state == 2'd2) & (feature_Data_0_vld_in == 1'b1)))) begin
            feature_Data_0_state <= 2'd3;
        end else begin
            feature_Data_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((full_flag_1_vld_reg == 1'b0) & (full_flag_1_vld_in == 1'b1))) begin
        full_flag_1_vld_reg <= 1'b1;
    end else if (((full_flag_1_vld_in == 1'b0) & (full_flag_1_ack_out == 1'b1) & (full_flag_1_vld_reg == 1'b1))) begin
        full_flag_1_vld_reg <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond8_reg_566 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i1_reg_212 <= i_2_reg_561;
    end else if (((1'b1 == ap_CS_fsm_state17) & (full_flag_1_ack_in == 1'b1))) begin
        i1_reg_212 <= 5'd13;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_502 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i4_reg_188 <= i_fu_340_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        i4_reg_188 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_502 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_5_reg_176 <= tmp_1_fu_334_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        p_5_reg_176 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond8_reg_566 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        p_s_reg_200 <= f_addr_2_fu_451_p2;
    end else if (((1'b1 == ap_CS_fsm_state17) & (full_flag_1_ack_in == 1'b1))) begin
        p_s_reg_200 <= 7'd52;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage12_11001) & (1'b1 == ap_CS_fsm_pp0_stage12))) begin
        exitcond1_reg_502 <= exitcond1_fu_328_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage12_11001) & (1'b1 == ap_CS_fsm_pp1_stage12))) begin
        exitcond8_reg_566 <= exitcond8_fu_445_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage7_11001) & (1'b1 == ap_CS_fsm_pp1_stage7))) begin
        f_addr_3_s_reg_526[6 : 1] <= f_addr_3_s_fu_364_p2[6 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((feature_Data_0_load_A == 1'b1)) begin
        feature_Data_0_payload_A <= feature_Data_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((feature_Data_0_load_B == 1'b1)) begin
        feature_Data_0_payload_B <= feature_Data_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((((full_flag_1_vld_reg == 1'b0) & (full_flag_1_vld_in == 1'b1)) | ((full_flag_1_ack_out == 1'b1) & (full_flag_1_vld_in == 1'b1) & (full_flag_1_vld_reg == 1'b1)))) begin
        full_flag_1_data_reg <= full_flag_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage12_11001) & (1'b1 == ap_CS_fsm_pp1_stage12) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        i_2_reg_561 <= i_2_fu_439_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp1_stage11_11001) & (1'b1 == ap_CS_fsm_pp1_stage11) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage8_11001) & (1'b1 == ap_CS_fsm_pp1_stage8) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage4_11001) & (1'b1 == ap_CS_fsm_pp1_stage4) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage11_11001) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        reg_223 <= feature_Data_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp1_stage9_11001) & (1'b1 == ap_CS_fsm_pp1_stage9) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage5_11001) & (1'b1 == ap_CS_fsm_pp1_stage5) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        reg_227 <= feature_Data_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp1_stage10_11001) & (1'b1 == ap_CS_fsm_pp1_stage10) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage6_11001) & (1'b1 == ap_CS_fsm_pp1_stage6) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage2_11001) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        reg_231 <= feature_Data_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        tmp_6_s_reg_467[5 : 1] <= tmp_6_s_fu_253_p2[5 : 1];
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage12) & (1'b1 == ap_CS_fsm_pp1_stage12) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        f_Data_address0 = tmp_9_fu_421_p1;
    end else if (((1'b0 == ap_block_pp1_stage11) & (1'b1 == ap_CS_fsm_pp1_stage11) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        f_Data_address0 = tmp_2_2_fu_397_p1;
    end else if (((1'b0 == ap_block_pp1_stage7) & (1'b1 == ap_CS_fsm_pp1_stage7) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        f_Data_address0 = tmp_2_1_fu_370_p1;
    end else if (((1'b0 == ap_block_pp1_stage3) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        f_Data_address0 = tmp_s_fu_346_p1;
    end else if (((1'b0 == ap_block_pp0_stage12) & (1'b1 == ap_CS_fsm_pp0_stage12) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        f_Data_address0 = tmp_fu_310_p1;
    end else if (((1'b0 == ap_block_pp0_stage11) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        f_Data_address0 = tmp_5_2_fu_286_p1;
    end else if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        f_Data_address0 = tmp_5_1_fu_259_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3))) begin
        f_Data_address0 = tmp_5_fu_235_p1;
    end else begin
        f_Data_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage12_11001) & (1'b1 == ap_CS_fsm_pp1_stage12) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage11_11001) & (1'b1 == ap_CS_fsm_pp1_stage11) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage8_11001) & (1'b1 == ap_CS_fsm_pp1_stage8) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage7_11001) & (1'b1 == ap_CS_fsm_pp1_stage7) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage4_11001) & (1'b1 == ap_CS_fsm_pp1_stage4) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage3_11001) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage12_11001) & (1'b1 == ap_CS_fsm_pp0_stage12) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage11_11001) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        f_Data_ce0 = 1'b1;
    end else begin
        f_Data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage12) & (1'b1 == ap_CS_fsm_pp1_stage12) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        f_Data_d0 = tmp_13_fu_426_p5;
    end else if (((1'b0 == ap_block_pp1_stage11) & (1'b1 == ap_CS_fsm_pp1_stage11) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        f_Data_d0 = tmp_12_fu_402_p5;
    end else if (((1'b0 == ap_block_pp1_stage7) & (1'b1 == ap_CS_fsm_pp1_stage7) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        f_Data_d0 = tmp_11_fu_375_p5;
    end else if (((1'b0 == ap_block_pp1_stage3) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        f_Data_d0 = tmp_10_fu_351_p5;
    end else if (((1'b0 == ap_block_pp0_stage12) & (1'b1 == ap_CS_fsm_pp0_stage12) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        f_Data_d0 = tmp_7_fu_315_p5;
    end else if (((1'b0 == ap_block_pp0_stage11) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        f_Data_d0 = tmp_6_fu_291_p5;
    end else if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        f_Data_d0 = tmp_4_fu_264_p5;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3))) begin
        f_Data_d0 = tmp_3_fu_240_p5;
    end else begin
        f_Data_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage12_11001) & (1'b1 == ap_CS_fsm_pp1_stage12) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage11_11001) & (1'b1 == ap_CS_fsm_pp1_stage11) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage7_11001) & (1'b1 == ap_CS_fsm_pp1_stage7) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage3_11001) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage12_11001) & (1'b1 == ap_CS_fsm_pp0_stage12) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage11_11001) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        f_Data_we0 = 1'b1;
    end else begin
        f_Data_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage12_11001) & (1'b1 == ap_CS_fsm_pp1_stage12) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage11_11001) & (1'b1 == ap_CS_fsm_pp1_stage11) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage10_11001) & (1'b1 == ap_CS_fsm_pp1_stage10) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage9_11001) & (1'b1 == ap_CS_fsm_pp1_stage9) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage8_11001) & (1'b1 == ap_CS_fsm_pp1_stage8) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage7_11001) & (1'b1 == ap_CS_fsm_pp1_stage7) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage6_11001) & (1'b1 == ap_CS_fsm_pp1_stage6) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage5_11001) & (1'b1 == ap_CS_fsm_pp1_stage5) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage4_11001) & (1'b1 == ap_CS_fsm_pp1_stage4) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage3_11001) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage2_11001) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage12_11001) & (1'b1 == ap_CS_fsm_pp0_stage12) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage11_11001) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        feature_Data_0_ack_out = 1'b1;
    end else begin
        feature_Data_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((feature_Data_0_sel == 1'b1)) begin
        feature_Data_0_data_out = feature_Data_0_payload_B;
    end else begin
        feature_Data_0_data_out = feature_Data_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage12) & (1'b1 == ap_CS_fsm_pp1_stage12) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage11) & (1'b1 == ap_CS_fsm_pp1_stage11) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage10) & (1'b1 == ap_CS_fsm_pp1_stage10) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage9) & (1'b1 == ap_CS_fsm_pp1_stage9) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage8) & (1'b1 == ap_CS_fsm_pp1_stage8) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage7) & (1'b1 == ap_CS_fsm_pp1_stage7) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage6) & (1'b1 == ap_CS_fsm_pp1_stage6) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage5) & (1'b1 == ap_CS_fsm_pp1_stage5) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage4) & (1'b1 == ap_CS_fsm_pp1_stage4) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage3) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage2) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage12) & (1'b1 == ap_CS_fsm_pp0_stage12) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage11) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage10) & (1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage9) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage8) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)))) begin
        feature_Data_TDATA_blk_n = feature_Data_0_state[1'd0];
    end else begin
        feature_Data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((full_flag_1_vld_reg == 1'b0) | ((full_flag_1_ack_out == 1'b1) & (full_flag_1_vld_reg == 1'b1)))) begin
        full_flag_1_ack_in = 1'b1;
    end else begin
        full_flag_1_ack_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        full_flag_1_data_in = 1'd0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        full_flag_1_data_in = 1'd1;
    end else begin
        full_flag_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state32) & (full_flag_1_ack_in == 1'b1)) | ((1'b1 == ap_CS_fsm_state16) & (full_flag_1_ack_in == 1'b1)))) begin
        full_flag_1_vld_in = 1'b1;
    end else begin
        full_flag_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16))) begin
        full_flag_blk_n = full_flag_1_ack_in;
    end else begin
        full_flag_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((1'b0 == ap_block_pp0_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        ap_ST_fsm_pp0_stage12 : begin
            if ((1'b0 == ap_block_pp0_stage12_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == ap_CS_fsm_state16) & (full_flag_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((1'b1 == ap_CS_fsm_state17) & (full_flag_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((1'b0 == ap_block_pp1_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_pp1_stage2 : begin
            if ((1'b0 == ap_block_pp1_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end
        end
        ap_ST_fsm_pp1_stage3 : begin
            if ((1'b0 == ap_block_pp1_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end
        end
        ap_ST_fsm_pp1_stage4 : begin
            if ((1'b0 == ap_block_pp1_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage4;
            end
        end
        ap_ST_fsm_pp1_stage5 : begin
            if ((1'b0 == ap_block_pp1_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage5;
            end
        end
        ap_ST_fsm_pp1_stage6 : begin
            if ((1'b0 == ap_block_pp1_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage6;
            end
        end
        ap_ST_fsm_pp1_stage7 : begin
            if ((1'b0 == ap_block_pp1_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage7;
            end
        end
        ap_ST_fsm_pp1_stage8 : begin
            if ((1'b0 == ap_block_pp1_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage8;
            end
        end
        ap_ST_fsm_pp1_stage9 : begin
            if ((1'b0 == ap_block_pp1_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage9;
            end
        end
        ap_ST_fsm_pp1_stage10 : begin
            if ((1'b0 == ap_block_pp1_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage10;
            end
        end
        ap_ST_fsm_pp1_stage11 : begin
            if ((1'b0 == ap_block_pp1_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage11;
            end
        end
        ap_ST_fsm_pp1_stage12 : begin
            if ((1'b0 == ap_block_pp1_stage12_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage12;
            end
        end
        ap_ST_fsm_state32 : begin
            if (((1'b1 == ap_CS_fsm_state32) & (full_flag_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state33 : begin
            if (((1'b1 == ap_CS_fsm_state33) & (full_flag_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp0_stage11 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp0_stage12 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_pp1_stage10 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_pp1_stage11 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_pp1_stage12 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_pp1_stage2 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_pp1_stage3 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_pp1_stage4 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_pp1_stage5 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_pp1_stage6 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_pp1_stage7 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_pp1_stage8 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_pp1_stage9 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd30];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage10_11001 = ((feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage10_subdone = ((feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage11 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage11_11001 = ((feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage11_subdone = ((feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage12 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage12_11001 = ((feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage12_subdone = ((feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_11001 = ((feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage4_subdone = ((feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage5_11001 = ((feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage5_subdone = ((feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage6_11001 = ((feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage6_subdone = ((feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage7_11001 = ((feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage7_subdone = ((feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage8_11001 = ((feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage8_subdone = ((feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage9 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage9_11001 = ((feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage9_subdone = ((feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage10 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage10_11001 = ((feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage10_subdone = ((feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

assign ap_block_pp1_stage11 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage11_11001 = ((feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage11_subdone = ((feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

assign ap_block_pp1_stage12 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage12_11001 = ((feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage12_subdone = ((feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage1_11001 = ((feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage1_subdone = ((feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

assign ap_block_pp1_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage2_11001 = ((feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage2_subdone = ((feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

assign ap_block_pp1_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage3_11001 = ((feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage3_subdone = ((feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

assign ap_block_pp1_stage4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage4_11001 = ((feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage4_subdone = ((feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

assign ap_block_pp1_stage5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage5_11001 = ((feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage5_subdone = ((feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

assign ap_block_pp1_stage6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage6_11001 = ((feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage6_subdone = ((feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

assign ap_block_pp1_stage7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage7_11001 = ((feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage7_subdone = ((feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

assign ap_block_pp1_stage8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage8_11001 = ((feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage8_subdone = ((feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

assign ap_block_pp1_stage9 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage9_11001 = ((feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage9_subdone = ((feature_Data_0_vld_out == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_state10_pp0_stage8_iter0 = (feature_Data_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state11_pp0_stage9_iter0 = (feature_Data_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state12_pp0_stage10_iter0 = (feature_Data_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state13_pp0_stage11_iter0 = (feature_Data_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state14_pp0_stage12_iter0 = (feature_Data_0_vld_out == 1'b0);
end

assign ap_block_state15_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state18_pp1_stage0_iter0 = (feature_Data_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state19_pp1_stage1_iter0 = (feature_Data_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state20_pp1_stage2_iter0 = (feature_Data_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state21_pp1_stage3_iter0 = (feature_Data_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state22_pp1_stage4_iter0 = (feature_Data_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state23_pp1_stage5_iter0 = (feature_Data_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state24_pp1_stage6_iter0 = (feature_Data_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state25_pp1_stage7_iter0 = (feature_Data_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state26_pp1_stage8_iter0 = (feature_Data_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state27_pp1_stage9_iter0 = (feature_Data_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state28_pp1_stage10_iter0 = (feature_Data_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state29_pp1_stage11_iter0 = (feature_Data_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = (feature_Data_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state30_pp1_stage12_iter0 = (feature_Data_0_vld_out == 1'b0);
end

assign ap_block_state31_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage1_iter0 = (feature_Data_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state4_pp0_stage2_iter0 = (feature_Data_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state5_pp0_stage3_iter0 = (feature_Data_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state6_pp0_stage4_iter0 = (feature_Data_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state7_pp0_stage5_iter0 = (feature_Data_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state8_pp0_stage6_iter0 = (feature_Data_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state9_pp0_stage7_iter0 = (feature_Data_0_vld_out == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond1_fu_328_p2 = ((i4_reg_188 == 4'd12) ? 1'b1 : 1'b0);

assign exitcond8_fu_445_p2 = ((i_2_fu_439_p2 == 5'd26) ? 1'b1 : 1'b0);

assign f_addr_1_fu_415_p2 = (p_s_reg_200 | 7'd3);

assign f_addr_2_fu_451_p2 = (p_s_reg_200 + 7'd4);

assign f_addr_3_1_fu_391_p2 = (f_addr_3_cast1_fu_388_p1 + 8'd1);

assign f_addr_3_cast1_fu_388_p1 = f_addr_3_s_reg_526;

assign f_addr_3_s_fu_364_p2 = (p_s_reg_200 | 7'd1);

assign f_addr_fu_304_p2 = (p_5_reg_176 | 6'd3);

assign feature_Data_0_ack_in = feature_Data_0_state[1'd1];

assign feature_Data_0_load_A = (feature_Data_0_state_cmp_full & ~feature_Data_0_sel_wr);

assign feature_Data_0_load_B = (feature_Data_0_state_cmp_full & feature_Data_0_sel_wr);

assign feature_Data_0_sel = feature_Data_0_sel_rd;

assign feature_Data_0_state_cmp_full = ((feature_Data_0_state != 2'd1) ? 1'b1 : 1'b0);

assign feature_Data_0_vld_in = feature_Data_TVALID;

assign feature_Data_0_vld_out = feature_Data_0_state[1'd0];

assign feature_Data_TREADY = feature_Data_0_state[1'd1];

assign full_flag = full_flag_1_data_reg;

assign full_flag_1_ack_out = full_flag_ap_ack;

assign full_flag_ap_vld = full_flag_1_vld_reg;

assign i_2_fu_439_p2 = (i1_reg_212 + 5'd1);

assign i_fu_340_p2 = (i4_reg_188 + 4'd1);

assign tmp_10_fu_351_p5 = {{{{feature_Data_0_data_out}, {reg_231}}, {reg_227}}, {reg_223}};

assign tmp_11_fu_375_p5 = {{{{feature_Data_0_data_out}, {reg_231}}, {reg_227}}, {reg_223}};

assign tmp_12_fu_402_p5 = {{{{feature_Data_0_data_out}, {reg_231}}, {reg_227}}, {reg_223}};

assign tmp_13_fu_426_p5 = {{{{reg_223}, {reg_231}}, {reg_227}}, {feature_Data_0_data_out}};

assign tmp_1_fu_334_p2 = (p_5_reg_176 + 6'd4);

assign tmp_2_1_fu_370_p1 = f_addr_3_s_fu_364_p2;

assign tmp_2_2_fu_397_p1 = f_addr_3_1_fu_391_p2;

assign tmp_3_fu_240_p5 = {{{{feature_Data_0_data_out}, {reg_231}}, {reg_227}}, {reg_223}};

assign tmp_4_fu_264_p5 = {{{{feature_Data_0_data_out}, {reg_231}}, {reg_227}}, {reg_223}};

assign tmp_5_1_fu_259_p1 = tmp_6_s_fu_253_p2;

assign tmp_5_2_fu_286_p1 = tmp_6_1_fu_280_p2;

assign tmp_5_fu_235_p1 = p_5_reg_176;

assign tmp_6_1_fu_280_p2 = (tmp_6_cast2_fu_277_p1 + 7'd1);

assign tmp_6_cast2_fu_277_p1 = tmp_6_s_reg_467;

assign tmp_6_fu_291_p5 = {{{{feature_Data_0_data_out}, {reg_231}}, {reg_227}}, {reg_223}};

assign tmp_6_s_fu_253_p2 = (p_5_reg_176 | 6'd1);

assign tmp_7_fu_315_p5 = {{{{reg_223}, {reg_231}}, {reg_227}}, {feature_Data_0_data_out}};

assign tmp_9_fu_421_p1 = f_addr_1_fu_415_p2;

assign tmp_fu_310_p1 = f_addr_fu_304_p2;

assign tmp_s_fu_346_p1 = p_s_reg_200;

always @ (posedge ap_clk) begin
    tmp_6_s_reg_467[0] <= 1'b1;
    f_addr_3_s_reg_526[0] <= 1'b1;
end

endmodule //Layer2_WriteSingleBRAM
