// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Layer3_Kernel,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xazu3eg-sfvc784-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.085750,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=5765,HLS_SYN_LUT=1924,HLS_VERSION=2018_3}" *)

module Layer3_Kernel (
        ap_clk,
        ap_rst_n,
        weight_TDATA,
        weight_TVALID,
        weight_TREADY,
        b_Data_TDATA,
        b_Data_TVALID,
        b_Data_TREADY,
        Bias_Data
);

parameter    ap_ST_fsm_state1 = 23'd1;
parameter    ap_ST_fsm_state2 = 23'd2;
parameter    ap_ST_fsm_state3 = 23'd4;
parameter    ap_ST_fsm_state4 = 23'd8;
parameter    ap_ST_fsm_state5 = 23'd16;
parameter    ap_ST_fsm_state6 = 23'd32;
parameter    ap_ST_fsm_state7 = 23'd64;
parameter    ap_ST_fsm_state8 = 23'd128;
parameter    ap_ST_fsm_state9 = 23'd256;
parameter    ap_ST_fsm_state10 = 23'd512;
parameter    ap_ST_fsm_state11 = 23'd1024;
parameter    ap_ST_fsm_state12 = 23'd2048;
parameter    ap_ST_fsm_state13 = 23'd4096;
parameter    ap_ST_fsm_state14 = 23'd8192;
parameter    ap_ST_fsm_state15 = 23'd16384;
parameter    ap_ST_fsm_state16 = 23'd32768;
parameter    ap_ST_fsm_state17 = 23'd65536;
parameter    ap_ST_fsm_state18 = 23'd131072;
parameter    ap_ST_fsm_state19 = 23'd262144;
parameter    ap_ST_fsm_state20 = 23'd524288;
parameter    ap_ST_fsm_pp1_stage0 = 23'd1048576;
parameter    ap_ST_fsm_pp1_stage1 = 23'd2097152;
parameter    ap_ST_fsm_state25 = 23'd4194304;

input   ap_clk;
input   ap_rst_n;
input  [15:0] weight_TDATA;
input   weight_TVALID;
output   weight_TREADY;
output  [1023:0] b_Data_TDATA;
output   b_Data_TVALID;
input   b_Data_TREADY;
output  [255:0] Bias_Data;

 reg    ap_rst_n_inv;
reg   [15:0] weight_0_data_out;
wire    weight_0_vld_in;
wire    weight_0_vld_out;
wire    weight_0_ack_in;
reg    weight_0_ack_out;
reg   [15:0] weight_0_payload_A;
reg   [15:0] weight_0_payload_B;
reg    weight_0_sel_rd;
reg    weight_0_sel_wr;
wire    weight_0_sel;
wire    weight_0_load_A;
wire    weight_0_load_B;
reg   [1:0] weight_0_state;
wire    weight_0_state_cmp_full;
reg   [1023:0] b_Data_1_data_in;
reg   [1023:0] b_Data_1_data_out;
reg    b_Data_1_vld_in;
wire    b_Data_1_vld_out;
wire    b_Data_1_ack_in;
wire    b_Data_1_ack_out;
reg   [1023:0] b_Data_1_payload_A;
reg   [1023:0] b_Data_1_payload_B;
reg    b_Data_1_sel_rd;
reg    b_Data_1_sel_wr;
wire    b_Data_1_sel;
wire    b_Data_1_load_A;
wire    b_Data_1_load_B;
reg   [1:0] b_Data_1_state;
wire    b_Data_1_state_cmp_full;
reg   [255:0] Bias_Data_1_data_reg;
reg    Bias_Data_1_vld_reg;
reg    Bias_Data_1_vld_in;
wire   [4:0] kernel_0_0_address0;
reg    kernel_0_0_ce0;
wire   [15:0] kernel_0_0_q0;
reg   [4:0] kernel_0_0_address1;
reg    kernel_0_0_ce1;
reg    kernel_0_0_we1;
wire   [15:0] kernel_0_0_q1;
wire   [4:0] kernel_1_0_address0;
reg    kernel_1_0_ce0;
wire   [15:0] kernel_1_0_q0;
reg   [4:0] kernel_1_0_address1;
reg    kernel_1_0_ce1;
reg    kernel_1_0_we1;
wire   [15:0] kernel_1_0_q1;
wire   [4:0] kernel_2_0_address0;
reg    kernel_2_0_ce0;
wire   [15:0] kernel_2_0_q0;
reg   [4:0] kernel_2_0_address1;
reg    kernel_2_0_ce1;
reg    kernel_2_0_we1;
wire   [15:0] kernel_2_0_q1;
wire   [4:0] kernel_3_0_address0;
reg    kernel_3_0_ce0;
wire   [15:0] kernel_3_0_q0;
reg   [4:0] kernel_3_0_address1;
reg    kernel_3_0_ce1;
reg    kernel_3_0_we1;
wire   [15:0] kernel_3_0_q1;
wire   [4:0] kernel_4_0_address0;
reg    kernel_4_0_ce0;
wire   [15:0] kernel_4_0_q0;
reg   [4:0] kernel_4_0_address1;
reg    kernel_4_0_ce1;
reg    kernel_4_0_we1;
wire   [15:0] kernel_4_0_q1;
wire   [4:0] kernel_5_0_address0;
reg    kernel_5_0_ce0;
wire   [15:0] kernel_5_0_q0;
reg   [4:0] kernel_5_0_address1;
reg    kernel_5_0_ce1;
reg    kernel_5_0_we1;
wire   [15:0] kernel_5_0_q1;
wire   [4:0] kernel_6_0_address0;
reg    kernel_6_0_ce0;
wire   [15:0] kernel_6_0_q0;
reg   [4:0] kernel_6_0_address1;
reg    kernel_6_0_ce1;
reg    kernel_6_0_we1;
wire   [15:0] kernel_6_0_q1;
wire   [4:0] kernel_7_0_address0;
reg    kernel_7_0_ce0;
wire   [15:0] kernel_7_0_q0;
reg   [4:0] kernel_7_0_address1;
reg    kernel_7_0_ce1;
reg    kernel_7_0_we1;
wire   [15:0] kernel_7_0_q1;
wire   [4:0] kernel_0_1_address0;
reg    kernel_0_1_ce0;
wire   [15:0] kernel_0_1_q0;
reg   [4:0] kernel_0_1_address1;
reg    kernel_0_1_ce1;
reg    kernel_0_1_we1;
wire   [15:0] kernel_0_1_q1;
wire   [4:0] kernel_1_1_address0;
reg    kernel_1_1_ce0;
wire   [15:0] kernel_1_1_q0;
reg   [4:0] kernel_1_1_address1;
reg    kernel_1_1_ce1;
reg    kernel_1_1_we1;
wire   [15:0] kernel_1_1_q1;
wire   [4:0] kernel_2_1_address0;
reg    kernel_2_1_ce0;
wire   [15:0] kernel_2_1_q0;
reg   [4:0] kernel_2_1_address1;
reg    kernel_2_1_ce1;
reg    kernel_2_1_we1;
wire   [15:0] kernel_2_1_q1;
wire   [4:0] kernel_3_1_address0;
reg    kernel_3_1_ce0;
wire   [15:0] kernel_3_1_q0;
reg   [4:0] kernel_3_1_address1;
reg    kernel_3_1_ce1;
reg    kernel_3_1_we1;
wire   [15:0] kernel_3_1_q1;
wire   [4:0] kernel_4_1_address0;
reg    kernel_4_1_ce0;
wire   [15:0] kernel_4_1_q0;
reg   [4:0] kernel_4_1_address1;
reg    kernel_4_1_ce1;
reg    kernel_4_1_we1;
wire   [15:0] kernel_4_1_q1;
wire   [4:0] kernel_5_1_address0;
reg    kernel_5_1_ce0;
wire   [15:0] kernel_5_1_q0;
reg   [4:0] kernel_5_1_address1;
reg    kernel_5_1_ce1;
reg    kernel_5_1_we1;
wire   [15:0] kernel_5_1_q1;
wire   [4:0] kernel_6_1_address0;
reg    kernel_6_1_ce0;
wire   [15:0] kernel_6_1_q0;
reg   [4:0] kernel_6_1_address1;
reg    kernel_6_1_ce1;
reg    kernel_6_1_we1;
wire   [15:0] kernel_6_1_q1;
wire   [4:0] kernel_7_1_address0;
reg    kernel_7_1_ce0;
wire   [15:0] kernel_7_1_q0;
reg   [4:0] kernel_7_1_address1;
reg    kernel_7_1_ce1;
reg    kernel_7_1_we1;
wire   [15:0] kernel_7_1_q1;
wire   [4:0] kernel_0_2_address0;
reg    kernel_0_2_ce0;
wire   [15:0] kernel_0_2_q0;
reg   [4:0] kernel_0_2_address1;
reg    kernel_0_2_ce1;
reg    kernel_0_2_we1;
wire   [15:0] kernel_0_2_q1;
wire   [4:0] kernel_1_2_address0;
reg    kernel_1_2_ce0;
wire   [15:0] kernel_1_2_q0;
reg   [4:0] kernel_1_2_address1;
reg    kernel_1_2_ce1;
reg    kernel_1_2_we1;
wire   [15:0] kernel_1_2_q1;
wire   [4:0] kernel_2_2_address0;
reg    kernel_2_2_ce0;
wire   [15:0] kernel_2_2_q0;
reg   [4:0] kernel_2_2_address1;
reg    kernel_2_2_ce1;
reg    kernel_2_2_we1;
wire   [15:0] kernel_2_2_q1;
wire   [4:0] kernel_3_2_address0;
reg    kernel_3_2_ce0;
wire   [15:0] kernel_3_2_q0;
reg   [4:0] kernel_3_2_address1;
reg    kernel_3_2_ce1;
reg    kernel_3_2_we1;
wire   [15:0] kernel_3_2_q1;
wire   [4:0] kernel_4_2_address0;
reg    kernel_4_2_ce0;
wire   [15:0] kernel_4_2_q0;
reg   [4:0] kernel_4_2_address1;
reg    kernel_4_2_ce1;
reg    kernel_4_2_we1;
wire   [15:0] kernel_4_2_q1;
wire   [4:0] kernel_5_2_address0;
reg    kernel_5_2_ce0;
wire   [15:0] kernel_5_2_q0;
reg   [4:0] kernel_5_2_address1;
reg    kernel_5_2_ce1;
reg    kernel_5_2_we1;
wire   [15:0] kernel_5_2_q1;
wire   [4:0] kernel_6_2_address0;
reg    kernel_6_2_ce0;
wire   [15:0] kernel_6_2_q0;
reg   [4:0] kernel_6_2_address1;
reg    kernel_6_2_ce1;
reg    kernel_6_2_we1;
wire   [15:0] kernel_6_2_q1;
wire   [4:0] kernel_7_2_address0;
reg    kernel_7_2_ce0;
wire   [15:0] kernel_7_2_q0;
reg   [4:0] kernel_7_2_address1;
reg    kernel_7_2_ce1;
reg    kernel_7_2_we1;
wire   [15:0] kernel_7_2_q1;
wire   [4:0] kernel_0_3_address0;
reg    kernel_0_3_ce0;
wire   [15:0] kernel_0_3_q0;
reg   [4:0] kernel_0_3_address1;
reg    kernel_0_3_ce1;
reg    kernel_0_3_we1;
wire   [15:0] kernel_0_3_q1;
wire   [4:0] kernel_1_3_address0;
reg    kernel_1_3_ce0;
wire   [15:0] kernel_1_3_q0;
reg   [4:0] kernel_1_3_address1;
reg    kernel_1_3_ce1;
reg    kernel_1_3_we1;
wire   [15:0] kernel_1_3_q1;
wire   [4:0] kernel_2_3_address0;
reg    kernel_2_3_ce0;
wire   [15:0] kernel_2_3_q0;
reg   [4:0] kernel_2_3_address1;
reg    kernel_2_3_ce1;
reg    kernel_2_3_we1;
wire   [15:0] kernel_2_3_q1;
wire   [4:0] kernel_3_3_address0;
reg    kernel_3_3_ce0;
wire   [15:0] kernel_3_3_q0;
reg   [4:0] kernel_3_3_address1;
reg    kernel_3_3_ce1;
reg    kernel_3_3_we1;
wire   [15:0] kernel_3_3_q1;
wire   [4:0] kernel_4_3_address0;
reg    kernel_4_3_ce0;
wire   [15:0] kernel_4_3_q0;
reg   [4:0] kernel_4_3_address1;
reg    kernel_4_3_ce1;
reg    kernel_4_3_we1;
wire   [15:0] kernel_4_3_q1;
wire   [4:0] kernel_5_3_address0;
reg    kernel_5_3_ce0;
wire   [15:0] kernel_5_3_q0;
reg   [4:0] kernel_5_3_address1;
reg    kernel_5_3_ce1;
reg    kernel_5_3_we1;
wire   [15:0] kernel_5_3_q1;
wire   [4:0] kernel_6_3_address0;
reg    kernel_6_3_ce0;
wire   [15:0] kernel_6_3_q0;
reg   [4:0] kernel_6_3_address1;
reg    kernel_6_3_ce1;
reg    kernel_6_3_we1;
wire   [15:0] kernel_6_3_q1;
wire   [4:0] kernel_7_3_address0;
reg    kernel_7_3_ce0;
wire   [15:0] kernel_7_3_q0;
reg   [4:0] kernel_7_3_address1;
reg    kernel_7_3_ce1;
reg    kernel_7_3_we1;
wire   [15:0] kernel_7_3_q1;
wire   [4:0] kernel_0_4_address0;
reg    kernel_0_4_ce0;
wire   [15:0] kernel_0_4_q0;
reg   [4:0] kernel_0_4_address1;
reg    kernel_0_4_ce1;
reg    kernel_0_4_we1;
wire   [15:0] kernel_0_4_q1;
wire   [4:0] kernel_1_4_address0;
reg    kernel_1_4_ce0;
wire   [15:0] kernel_1_4_q0;
reg   [4:0] kernel_1_4_address1;
reg    kernel_1_4_ce1;
reg    kernel_1_4_we1;
wire   [15:0] kernel_1_4_q1;
wire   [4:0] kernel_2_4_address0;
reg    kernel_2_4_ce0;
wire   [15:0] kernel_2_4_q0;
reg   [4:0] kernel_2_4_address1;
reg    kernel_2_4_ce1;
reg    kernel_2_4_we1;
wire   [15:0] kernel_2_4_q1;
wire   [4:0] kernel_3_4_address0;
reg    kernel_3_4_ce0;
wire   [15:0] kernel_3_4_q0;
reg   [4:0] kernel_3_4_address1;
reg    kernel_3_4_ce1;
reg    kernel_3_4_we1;
wire   [15:0] kernel_3_4_q1;
wire   [4:0] kernel_4_4_address0;
reg    kernel_4_4_ce0;
wire   [15:0] kernel_4_4_q0;
reg   [4:0] kernel_4_4_address1;
reg    kernel_4_4_ce1;
reg    kernel_4_4_we1;
wire   [15:0] kernel_4_4_q1;
wire   [4:0] kernel_5_4_address0;
reg    kernel_5_4_ce0;
wire   [15:0] kernel_5_4_q0;
reg   [4:0] kernel_5_4_address1;
reg    kernel_5_4_ce1;
reg    kernel_5_4_we1;
wire   [15:0] kernel_5_4_q1;
wire   [4:0] kernel_6_4_address0;
reg    kernel_6_4_ce0;
wire   [15:0] kernel_6_4_q0;
reg   [4:0] kernel_6_4_address1;
reg    kernel_6_4_ce1;
reg    kernel_6_4_we1;
wire   [15:0] kernel_6_4_q1;
wire   [4:0] kernel_7_4_address0;
reg    kernel_7_4_ce0;
wire   [15:0] kernel_7_4_q0;
reg   [4:0] kernel_7_4_address1;
reg    kernel_7_4_ce1;
reg    kernel_7_4_we1;
wire   [15:0] kernel_7_4_q1;
wire   [4:0] kernel_0_5_address0;
reg    kernel_0_5_ce0;
wire   [15:0] kernel_0_5_q0;
reg   [4:0] kernel_0_5_address1;
reg    kernel_0_5_ce1;
reg    kernel_0_5_we1;
wire   [15:0] kernel_0_5_q1;
wire   [4:0] kernel_1_5_address0;
reg    kernel_1_5_ce0;
wire   [15:0] kernel_1_5_q0;
reg   [4:0] kernel_1_5_address1;
reg    kernel_1_5_ce1;
reg    kernel_1_5_we1;
wire   [15:0] kernel_1_5_q1;
wire   [4:0] kernel_2_5_address0;
reg    kernel_2_5_ce0;
wire   [15:0] kernel_2_5_q0;
reg   [4:0] kernel_2_5_address1;
reg    kernel_2_5_ce1;
reg    kernel_2_5_we1;
wire   [15:0] kernel_2_5_q1;
wire   [4:0] kernel_3_5_address0;
reg    kernel_3_5_ce0;
wire   [15:0] kernel_3_5_q0;
reg   [4:0] kernel_3_5_address1;
reg    kernel_3_5_ce1;
reg    kernel_3_5_we1;
wire   [15:0] kernel_3_5_q1;
wire   [4:0] kernel_4_5_address0;
reg    kernel_4_5_ce0;
wire   [15:0] kernel_4_5_q0;
reg   [4:0] kernel_4_5_address1;
reg    kernel_4_5_ce1;
reg    kernel_4_5_we1;
wire   [15:0] kernel_4_5_q1;
wire   [4:0] kernel_5_5_address0;
reg    kernel_5_5_ce0;
wire   [15:0] kernel_5_5_q0;
reg   [4:0] kernel_5_5_address1;
reg    kernel_5_5_ce1;
reg    kernel_5_5_we1;
wire   [15:0] kernel_5_5_q1;
wire   [4:0] kernel_6_5_address0;
reg    kernel_6_5_ce0;
wire   [15:0] kernel_6_5_q0;
reg   [4:0] kernel_6_5_address1;
reg    kernel_6_5_ce1;
reg    kernel_6_5_we1;
wire   [15:0] kernel_6_5_q1;
wire   [4:0] kernel_7_5_address0;
reg    kernel_7_5_ce0;
wire   [15:0] kernel_7_5_q0;
reg   [4:0] kernel_7_5_address1;
reg    kernel_7_5_ce1;
reg    kernel_7_5_we1;
wire   [15:0] kernel_7_5_q1;
wire   [4:0] kernel_0_6_address0;
reg    kernel_0_6_ce0;
wire   [15:0] kernel_0_6_q0;
reg   [4:0] kernel_0_6_address1;
reg    kernel_0_6_ce1;
reg    kernel_0_6_we1;
wire   [15:0] kernel_0_6_q1;
wire   [4:0] kernel_1_6_address0;
reg    kernel_1_6_ce0;
wire   [15:0] kernel_1_6_q0;
reg   [4:0] kernel_1_6_address1;
reg    kernel_1_6_ce1;
reg    kernel_1_6_we1;
wire   [15:0] kernel_1_6_q1;
wire   [4:0] kernel_2_6_address0;
reg    kernel_2_6_ce0;
wire   [15:0] kernel_2_6_q0;
reg   [4:0] kernel_2_6_address1;
reg    kernel_2_6_ce1;
reg    kernel_2_6_we1;
wire   [15:0] kernel_2_6_q1;
wire   [4:0] kernel_3_6_address0;
reg    kernel_3_6_ce0;
wire   [15:0] kernel_3_6_q0;
reg   [4:0] kernel_3_6_address1;
reg    kernel_3_6_ce1;
reg    kernel_3_6_we1;
wire   [15:0] kernel_3_6_q1;
wire   [4:0] kernel_4_6_address0;
reg    kernel_4_6_ce0;
wire   [15:0] kernel_4_6_q0;
reg   [4:0] kernel_4_6_address1;
reg    kernel_4_6_ce1;
reg    kernel_4_6_we1;
wire   [15:0] kernel_4_6_q1;
wire   [4:0] kernel_5_6_address0;
reg    kernel_5_6_ce0;
wire   [15:0] kernel_5_6_q0;
reg   [4:0] kernel_5_6_address1;
reg    kernel_5_6_ce1;
reg    kernel_5_6_we1;
wire   [15:0] kernel_5_6_q1;
wire   [4:0] kernel_6_6_address0;
reg    kernel_6_6_ce0;
wire   [15:0] kernel_6_6_q0;
reg   [4:0] kernel_6_6_address1;
reg    kernel_6_6_ce1;
reg    kernel_6_6_we1;
wire   [15:0] kernel_6_6_q1;
wire   [4:0] kernel_7_6_address0;
reg    kernel_7_6_ce0;
wire   [15:0] kernel_7_6_q0;
reg   [4:0] kernel_7_6_address1;
reg    kernel_7_6_ce1;
reg    kernel_7_6_we1;
wire   [15:0] kernel_7_6_q1;
wire   [4:0] kernel_0_7_address0;
reg    kernel_0_7_ce0;
wire   [15:0] kernel_0_7_q0;
reg   [4:0] kernel_0_7_address1;
reg    kernel_0_7_ce1;
reg    kernel_0_7_we1;
wire   [15:0] kernel_0_7_q1;
wire   [4:0] kernel_1_7_address0;
reg    kernel_1_7_ce0;
wire   [15:0] kernel_1_7_q0;
reg   [4:0] kernel_1_7_address1;
reg    kernel_1_7_ce1;
reg    kernel_1_7_we1;
wire   [15:0] kernel_1_7_q1;
wire   [4:0] kernel_2_7_address0;
reg    kernel_2_7_ce0;
wire   [15:0] kernel_2_7_q0;
reg   [4:0] kernel_2_7_address1;
reg    kernel_2_7_ce1;
reg    kernel_2_7_we1;
wire   [15:0] kernel_2_7_q1;
wire   [4:0] kernel_3_7_address0;
reg    kernel_3_7_ce0;
wire   [15:0] kernel_3_7_q0;
reg   [4:0] kernel_3_7_address1;
reg    kernel_3_7_ce1;
reg    kernel_3_7_we1;
wire   [15:0] kernel_3_7_q1;
wire   [4:0] kernel_4_7_address0;
reg    kernel_4_7_ce0;
wire   [15:0] kernel_4_7_q0;
reg   [4:0] kernel_4_7_address1;
reg    kernel_4_7_ce1;
reg    kernel_4_7_we1;
wire   [15:0] kernel_4_7_q1;
wire   [4:0] kernel_5_7_address0;
reg    kernel_5_7_ce0;
wire   [15:0] kernel_5_7_q0;
reg   [4:0] kernel_5_7_address1;
reg    kernel_5_7_ce1;
reg    kernel_5_7_we1;
wire   [15:0] kernel_5_7_q1;
wire   [4:0] kernel_6_7_address0;
reg    kernel_6_7_ce0;
wire   [15:0] kernel_6_7_q0;
reg   [4:0] kernel_6_7_address1;
reg    kernel_6_7_ce1;
reg    kernel_6_7_we1;
wire   [15:0] kernel_6_7_q1;
wire   [4:0] kernel_7_7_address0;
reg    kernel_7_7_ce0;
wire   [15:0] kernel_7_7_q0;
reg   [4:0] kernel_7_7_address1;
reg    kernel_7_7_ce1;
reg    kernel_7_7_we1;
wire   [15:0] kernel_7_7_q1;
reg    weight_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [22:0] ap_CS_fsm;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
reg    b_Data_TDATA_blk_n;
wire    ap_CS_fsm_pp1_stage1;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_pp1_stage1;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [7:0] i2_s_reg_2539;
reg   [7:0] iter_reg_2549;
wire   [3:0] i_mid2_fu_2587_p3;
wire   [3:0] m_mid2_fu_2615_p3;
wire   [10:0] indvar_flatten_next1_fu_2731_p2;
wire   [4:0] n_fu_2737_p2;
wire   [8:0] indvar_flatten_next_fu_2749_p3;
wire   [0:0] exitcond2_fu_2757_p2;
wire   [0:0] exitcond_flatten_fu_2763_p2;
reg   [15:0] weight_read_1_reg_3227;
reg   [15:0] weight_read_2_reg_3232;
reg   [15:0] weight_read_3_reg_3237;
reg   [15:0] weight_read_4_reg_3242;
reg   [15:0] weight_read_5_reg_3247;
reg   [15:0] weight_read_6_reg_3252;
reg   [15:0] weight_read_7_reg_3257;
reg   [15:0] weight_read_8_reg_3262;
reg   [15:0] weight_read_9_reg_3267;
reg   [15:0] weight_read_10_reg_3272;
reg   [15:0] weight_read_11_reg_3277;
reg   [15:0] weight_read_12_reg_3282;
reg   [15:0] weight_read_13_reg_3287;
reg   [15:0] weight_read_14_reg_3292;
reg   [15:0] weight_read_15_reg_3297;
wire   [255:0] tmp_fu_2775_p17;
wire    ap_block_state21_pp1_stage0_iter0;
wire    ap_block_state23_pp1_stage0_iter1;
reg    ap_block_pp1_stage0_11001;
wire   [7:0] i_2_fu_2951_p2;
reg   [7:0] i_2_reg_3947;
wire   [1023:0] tmp_7_fu_2957_p65;
wire    ap_block_state22_pp1_stage1_iter0;
wire    ap_block_state24_pp1_stage1_iter1;
reg    ap_block_pp1_stage1_11001;
reg   [15:0] kernel_0_0_load_1_reg_3958;
reg   [15:0] kernel_1_0_load_1_reg_3963;
reg   [15:0] kernel_2_0_load_1_reg_3968;
reg   [15:0] kernel_3_0_load_1_reg_3973;
reg   [15:0] kernel_4_0_load_1_reg_3978;
reg   [15:0] kernel_5_0_load_1_reg_3983;
reg   [15:0] kernel_6_0_load_1_reg_3988;
reg   [15:0] kernel_7_0_load_1_reg_3993;
reg   [15:0] kernel_0_1_load_1_reg_3998;
reg   [15:0] kernel_1_1_load_1_reg_4003;
reg   [15:0] kernel_2_1_load_1_reg_4008;
reg   [15:0] kernel_3_1_load_1_reg_4013;
reg   [15:0] kernel_4_1_load_1_reg_4018;
reg   [15:0] kernel_5_1_load_1_reg_4023;
reg   [15:0] kernel_6_1_load_1_reg_4028;
reg   [15:0] kernel_7_1_load_1_reg_4033;
reg   [15:0] kernel_0_2_load_1_reg_4038;
reg   [15:0] kernel_1_2_load_1_reg_4043;
reg   [15:0] kernel_2_2_load_1_reg_4048;
reg   [15:0] kernel_3_2_load_1_reg_4053;
reg   [15:0] kernel_4_2_load_1_reg_4058;
reg   [15:0] kernel_5_2_load_1_reg_4063;
reg   [15:0] kernel_6_2_load_1_reg_4068;
reg   [15:0] kernel_7_2_load_1_reg_4073;
reg   [15:0] kernel_0_3_load_1_reg_4078;
reg   [15:0] kernel_1_3_load_1_reg_4083;
reg   [15:0] kernel_2_3_load_1_reg_4088;
reg   [15:0] kernel_3_3_load_1_reg_4093;
reg   [15:0] kernel_4_3_load_1_reg_4098;
reg   [15:0] kernel_5_3_load_1_reg_4103;
reg   [15:0] kernel_6_3_load_1_reg_4108;
reg   [15:0] kernel_7_3_load_1_reg_4113;
reg   [15:0] kernel_0_4_load_1_reg_4118;
reg   [15:0] kernel_1_4_load_1_reg_4123;
reg   [15:0] kernel_2_4_load_1_reg_4128;
reg   [15:0] kernel_3_4_load_1_reg_4133;
reg   [15:0] kernel_4_4_load_1_reg_4138;
reg   [15:0] kernel_5_4_load_1_reg_4143;
reg   [15:0] kernel_6_4_load_1_reg_4148;
reg   [15:0] kernel_7_4_load_1_reg_4153;
reg   [15:0] kernel_0_5_load_1_reg_4158;
reg   [15:0] kernel_1_5_load_1_reg_4163;
reg   [15:0] kernel_2_5_load_1_reg_4168;
reg   [15:0] kernel_3_5_load_1_reg_4173;
reg   [15:0] kernel_4_5_load_1_reg_4178;
reg   [15:0] kernel_5_5_load_1_reg_4183;
reg   [15:0] kernel_6_5_load_1_reg_4188;
reg   [15:0] kernel_7_5_load_1_reg_4193;
reg   [15:0] kernel_0_6_load_1_reg_4198;
reg   [15:0] kernel_1_6_load_1_reg_4203;
reg   [15:0] kernel_2_6_load_1_reg_4208;
reg   [15:0] kernel_3_6_load_1_reg_4213;
reg   [15:0] kernel_4_6_load_1_reg_4218;
reg   [15:0] kernel_5_6_load_1_reg_4223;
reg   [15:0] kernel_6_6_load_1_reg_4228;
reg   [15:0] kernel_7_6_load_1_reg_4233;
reg   [15:0] kernel_0_7_load_1_reg_4238;
reg   [15:0] kernel_1_7_load_1_reg_4243;
reg   [15:0] kernel_2_7_load_1_reg_4248;
reg   [15:0] kernel_3_7_load_1_reg_4253;
reg   [15:0] kernel_4_7_load_1_reg_4258;
reg   [15:0] kernel_5_7_load_1_reg_4263;
reg   [15:0] kernel_6_7_load_1_reg_4268;
reg   [15:0] kernel_7_7_load_1_reg_4273;
wire   [7:0] p_s_fu_3095_p3;
reg   [7:0] p_s_reg_4278;
wire   [0:0] exitcond6_fu_3102_p2;
reg   [0:0] exitcond6_reg_4284;
wire   [1023:0] tmp_9_fu_3108_p65;
wire   [7:0] iter_1_fu_3177_p2;
reg   [7:0] iter_1_reg_4293;
wire    ap_CS_fsm_state20;
reg    ap_block_pp1_stage1_subdone;
reg   [0:0] exitcond_flatten2_reg_2450;
wire    ap_CS_fsm_state1;
wire   [0:0] exitcond_flatten1_fu_2769_p2;
reg   [0:0] exitcond_reg_2461;
reg   [4:0] n1_reg_2472;
reg   [3:0] m_reg_2483;
reg   [8:0] indvar_flatten_reg_2494;
reg   [3:0] i_reg_2505;
reg   [10:0] indvar_flatten1_reg_2516;
reg   [7:0] i2_reg_2527;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state25;
reg   [7:0] ap_phi_mux_i2_s_phi_fu_2542_p4;
reg   [7:0] ap_phi_mux_iter_phi_fu_2553_p4;
wire   [63:0] tmp_8_cast_fu_2663_p1;
wire   [63:0] tmp_11_fu_2805_p1;
wire   [63:0] tmp_13_fu_2879_p3;
wire    ap_block_pp1_stage1_01001;
wire    ap_block_pp1_stage0_01001;
wire   [2:0] tmp_3_fu_2635_p1;
wire   [2:0] tmp_6_fu_2639_p1;
wire   [0:0] not_exitcond_flatten_fu_2575_p2;
wire   [3:0] i_1_fu_2561_p2;
wire   [3:0] m_mid_fu_2567_p3;
wire   [0:0] exitcond2_mid_fu_2581_p2;
wire   [0:0] tmp_2_fu_2601_p2;
wire   [3:0] m_1_fu_2595_p2;
wire   [4:0] tmp_4_fu_2623_p3;
wire   [4:0] n2_mid2_fu_2607_p3;
wire   [1:0] tmp_14_fu_2643_p4;
wire   [5:0] tmp_6_cast_fu_2631_p1;
wire   [5:0] newIndex1_cast_fu_2653_p1;
wire   [5:0] tmp_8_fu_2657_p2;
wire   [8:0] indvar_flatten_op_fu_2743_p2;
wire   [8:0] tmp_10_fu_2797_p3;
wire   [8:0] tmp_12_fu_2873_p2;
wire   [0:0] tmp_1_fu_3090_p2;
reg   [22:0] ap_NS_fsm;
reg    ap_block_pp1_stage0_subdone;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 weight_0_sel_rd = 1'b0;
#0 weight_0_sel_wr = 1'b0;
#0 weight_0_state = 2'd0;
#0 b_Data_1_sel_rd = 1'b0;
#0 b_Data_1_sel_wr = 1'b0;
#0 b_Data_1_state = 2'd0;
#0 Bias_Data_1_data_reg = 256'd0;
#0 Bias_Data_1_vld_reg = 1'b0;
#0 ap_CS_fsm = 23'd1;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
end

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
kernel_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_0_0_address0),
    .ce0(kernel_0_0_ce0),
    .q0(kernel_0_0_q0),
    .address1(kernel_0_0_address1),
    .ce1(kernel_0_0_ce1),
    .we1(kernel_0_0_we1),
    .d1(weight_0_data_out),
    .q1(kernel_0_0_q1)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
kernel_1_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_1_0_address0),
    .ce0(kernel_1_0_ce0),
    .q0(kernel_1_0_q0),
    .address1(kernel_1_0_address1),
    .ce1(kernel_1_0_ce1),
    .we1(kernel_1_0_we1),
    .d1(weight_0_data_out),
    .q1(kernel_1_0_q1)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
kernel_2_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_2_0_address0),
    .ce0(kernel_2_0_ce0),
    .q0(kernel_2_0_q0),
    .address1(kernel_2_0_address1),
    .ce1(kernel_2_0_ce1),
    .we1(kernel_2_0_we1),
    .d1(weight_0_data_out),
    .q1(kernel_2_0_q1)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
kernel_3_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_3_0_address0),
    .ce0(kernel_3_0_ce0),
    .q0(kernel_3_0_q0),
    .address1(kernel_3_0_address1),
    .ce1(kernel_3_0_ce1),
    .we1(kernel_3_0_we1),
    .d1(weight_0_data_out),
    .q1(kernel_3_0_q1)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
kernel_4_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_4_0_address0),
    .ce0(kernel_4_0_ce0),
    .q0(kernel_4_0_q0),
    .address1(kernel_4_0_address1),
    .ce1(kernel_4_0_ce1),
    .we1(kernel_4_0_we1),
    .d1(weight_0_data_out),
    .q1(kernel_4_0_q1)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
kernel_5_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_5_0_address0),
    .ce0(kernel_5_0_ce0),
    .q0(kernel_5_0_q0),
    .address1(kernel_5_0_address1),
    .ce1(kernel_5_0_ce1),
    .we1(kernel_5_0_we1),
    .d1(weight_0_data_out),
    .q1(kernel_5_0_q1)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
kernel_6_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_6_0_address0),
    .ce0(kernel_6_0_ce0),
    .q0(kernel_6_0_q0),
    .address1(kernel_6_0_address1),
    .ce1(kernel_6_0_ce1),
    .we1(kernel_6_0_we1),
    .d1(weight_0_data_out),
    .q1(kernel_6_0_q1)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
kernel_7_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_7_0_address0),
    .ce0(kernel_7_0_ce0),
    .q0(kernel_7_0_q0),
    .address1(kernel_7_0_address1),
    .ce1(kernel_7_0_ce1),
    .we1(kernel_7_0_we1),
    .d1(weight_0_data_out),
    .q1(kernel_7_0_q1)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
kernel_0_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_0_1_address0),
    .ce0(kernel_0_1_ce0),
    .q0(kernel_0_1_q0),
    .address1(kernel_0_1_address1),
    .ce1(kernel_0_1_ce1),
    .we1(kernel_0_1_we1),
    .d1(weight_0_data_out),
    .q1(kernel_0_1_q1)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
kernel_1_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_1_1_address0),
    .ce0(kernel_1_1_ce0),
    .q0(kernel_1_1_q0),
    .address1(kernel_1_1_address1),
    .ce1(kernel_1_1_ce1),
    .we1(kernel_1_1_we1),
    .d1(weight_0_data_out),
    .q1(kernel_1_1_q1)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
kernel_2_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_2_1_address0),
    .ce0(kernel_2_1_ce0),
    .q0(kernel_2_1_q0),
    .address1(kernel_2_1_address1),
    .ce1(kernel_2_1_ce1),
    .we1(kernel_2_1_we1),
    .d1(weight_0_data_out),
    .q1(kernel_2_1_q1)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
kernel_3_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_3_1_address0),
    .ce0(kernel_3_1_ce0),
    .q0(kernel_3_1_q0),
    .address1(kernel_3_1_address1),
    .ce1(kernel_3_1_ce1),
    .we1(kernel_3_1_we1),
    .d1(weight_0_data_out),
    .q1(kernel_3_1_q1)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
kernel_4_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_4_1_address0),
    .ce0(kernel_4_1_ce0),
    .q0(kernel_4_1_q0),
    .address1(kernel_4_1_address1),
    .ce1(kernel_4_1_ce1),
    .we1(kernel_4_1_we1),
    .d1(weight_0_data_out),
    .q1(kernel_4_1_q1)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
kernel_5_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_5_1_address0),
    .ce0(kernel_5_1_ce0),
    .q0(kernel_5_1_q0),
    .address1(kernel_5_1_address1),
    .ce1(kernel_5_1_ce1),
    .we1(kernel_5_1_we1),
    .d1(weight_0_data_out),
    .q1(kernel_5_1_q1)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
kernel_6_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_6_1_address0),
    .ce0(kernel_6_1_ce0),
    .q0(kernel_6_1_q0),
    .address1(kernel_6_1_address1),
    .ce1(kernel_6_1_ce1),
    .we1(kernel_6_1_we1),
    .d1(weight_0_data_out),
    .q1(kernel_6_1_q1)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
kernel_7_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_7_1_address0),
    .ce0(kernel_7_1_ce0),
    .q0(kernel_7_1_q0),
    .address1(kernel_7_1_address1),
    .ce1(kernel_7_1_ce1),
    .we1(kernel_7_1_we1),
    .d1(weight_0_data_out),
    .q1(kernel_7_1_q1)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
kernel_0_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_0_2_address0),
    .ce0(kernel_0_2_ce0),
    .q0(kernel_0_2_q0),
    .address1(kernel_0_2_address1),
    .ce1(kernel_0_2_ce1),
    .we1(kernel_0_2_we1),
    .d1(weight_0_data_out),
    .q1(kernel_0_2_q1)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
kernel_1_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_1_2_address0),
    .ce0(kernel_1_2_ce0),
    .q0(kernel_1_2_q0),
    .address1(kernel_1_2_address1),
    .ce1(kernel_1_2_ce1),
    .we1(kernel_1_2_we1),
    .d1(weight_0_data_out),
    .q1(kernel_1_2_q1)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
kernel_2_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_2_2_address0),
    .ce0(kernel_2_2_ce0),
    .q0(kernel_2_2_q0),
    .address1(kernel_2_2_address1),
    .ce1(kernel_2_2_ce1),
    .we1(kernel_2_2_we1),
    .d1(weight_0_data_out),
    .q1(kernel_2_2_q1)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
kernel_3_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_3_2_address0),
    .ce0(kernel_3_2_ce0),
    .q0(kernel_3_2_q0),
    .address1(kernel_3_2_address1),
    .ce1(kernel_3_2_ce1),
    .we1(kernel_3_2_we1),
    .d1(weight_0_data_out),
    .q1(kernel_3_2_q1)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
kernel_4_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_4_2_address0),
    .ce0(kernel_4_2_ce0),
    .q0(kernel_4_2_q0),
    .address1(kernel_4_2_address1),
    .ce1(kernel_4_2_ce1),
    .we1(kernel_4_2_we1),
    .d1(weight_0_data_out),
    .q1(kernel_4_2_q1)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
kernel_5_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_5_2_address0),
    .ce0(kernel_5_2_ce0),
    .q0(kernel_5_2_q0),
    .address1(kernel_5_2_address1),
    .ce1(kernel_5_2_ce1),
    .we1(kernel_5_2_we1),
    .d1(weight_0_data_out),
    .q1(kernel_5_2_q1)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
kernel_6_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_6_2_address0),
    .ce0(kernel_6_2_ce0),
    .q0(kernel_6_2_q0),
    .address1(kernel_6_2_address1),
    .ce1(kernel_6_2_ce1),
    .we1(kernel_6_2_we1),
    .d1(weight_0_data_out),
    .q1(kernel_6_2_q1)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
kernel_7_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_7_2_address0),
    .ce0(kernel_7_2_ce0),
    .q0(kernel_7_2_q0),
    .address1(kernel_7_2_address1),
    .ce1(kernel_7_2_ce1),
    .we1(kernel_7_2_we1),
    .d1(weight_0_data_out),
    .q1(kernel_7_2_q1)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
kernel_0_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_0_3_address0),
    .ce0(kernel_0_3_ce0),
    .q0(kernel_0_3_q0),
    .address1(kernel_0_3_address1),
    .ce1(kernel_0_3_ce1),
    .we1(kernel_0_3_we1),
    .d1(weight_0_data_out),
    .q1(kernel_0_3_q1)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
kernel_1_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_1_3_address0),
    .ce0(kernel_1_3_ce0),
    .q0(kernel_1_3_q0),
    .address1(kernel_1_3_address1),
    .ce1(kernel_1_3_ce1),
    .we1(kernel_1_3_we1),
    .d1(weight_0_data_out),
    .q1(kernel_1_3_q1)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
kernel_2_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_2_3_address0),
    .ce0(kernel_2_3_ce0),
    .q0(kernel_2_3_q0),
    .address1(kernel_2_3_address1),
    .ce1(kernel_2_3_ce1),
    .we1(kernel_2_3_we1),
    .d1(weight_0_data_out),
    .q1(kernel_2_3_q1)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
kernel_3_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_3_3_address0),
    .ce0(kernel_3_3_ce0),
    .q0(kernel_3_3_q0),
    .address1(kernel_3_3_address1),
    .ce1(kernel_3_3_ce1),
    .we1(kernel_3_3_we1),
    .d1(weight_0_data_out),
    .q1(kernel_3_3_q1)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
kernel_4_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_4_3_address0),
    .ce0(kernel_4_3_ce0),
    .q0(kernel_4_3_q0),
    .address1(kernel_4_3_address1),
    .ce1(kernel_4_3_ce1),
    .we1(kernel_4_3_we1),
    .d1(weight_0_data_out),
    .q1(kernel_4_3_q1)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
kernel_5_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_5_3_address0),
    .ce0(kernel_5_3_ce0),
    .q0(kernel_5_3_q0),
    .address1(kernel_5_3_address1),
    .ce1(kernel_5_3_ce1),
    .we1(kernel_5_3_we1),
    .d1(weight_0_data_out),
    .q1(kernel_5_3_q1)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
kernel_6_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_6_3_address0),
    .ce0(kernel_6_3_ce0),
    .q0(kernel_6_3_q0),
    .address1(kernel_6_3_address1),
    .ce1(kernel_6_3_ce1),
    .we1(kernel_6_3_we1),
    .d1(weight_0_data_out),
    .q1(kernel_6_3_q1)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
kernel_7_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_7_3_address0),
    .ce0(kernel_7_3_ce0),
    .q0(kernel_7_3_q0),
    .address1(kernel_7_3_address1),
    .ce1(kernel_7_3_ce1),
    .we1(kernel_7_3_we1),
    .d1(weight_0_data_out),
    .q1(kernel_7_3_q1)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
kernel_0_4_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_0_4_address0),
    .ce0(kernel_0_4_ce0),
    .q0(kernel_0_4_q0),
    .address1(kernel_0_4_address1),
    .ce1(kernel_0_4_ce1),
    .we1(kernel_0_4_we1),
    .d1(weight_0_data_out),
    .q1(kernel_0_4_q1)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
kernel_1_4_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_1_4_address0),
    .ce0(kernel_1_4_ce0),
    .q0(kernel_1_4_q0),
    .address1(kernel_1_4_address1),
    .ce1(kernel_1_4_ce1),
    .we1(kernel_1_4_we1),
    .d1(weight_0_data_out),
    .q1(kernel_1_4_q1)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
kernel_2_4_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_2_4_address0),
    .ce0(kernel_2_4_ce0),
    .q0(kernel_2_4_q0),
    .address1(kernel_2_4_address1),
    .ce1(kernel_2_4_ce1),
    .we1(kernel_2_4_we1),
    .d1(weight_0_data_out),
    .q1(kernel_2_4_q1)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
kernel_3_4_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_3_4_address0),
    .ce0(kernel_3_4_ce0),
    .q0(kernel_3_4_q0),
    .address1(kernel_3_4_address1),
    .ce1(kernel_3_4_ce1),
    .we1(kernel_3_4_we1),
    .d1(weight_0_data_out),
    .q1(kernel_3_4_q1)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
kernel_4_4_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_4_4_address0),
    .ce0(kernel_4_4_ce0),
    .q0(kernel_4_4_q0),
    .address1(kernel_4_4_address1),
    .ce1(kernel_4_4_ce1),
    .we1(kernel_4_4_we1),
    .d1(weight_0_data_out),
    .q1(kernel_4_4_q1)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
kernel_5_4_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_5_4_address0),
    .ce0(kernel_5_4_ce0),
    .q0(kernel_5_4_q0),
    .address1(kernel_5_4_address1),
    .ce1(kernel_5_4_ce1),
    .we1(kernel_5_4_we1),
    .d1(weight_0_data_out),
    .q1(kernel_5_4_q1)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
kernel_6_4_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_6_4_address0),
    .ce0(kernel_6_4_ce0),
    .q0(kernel_6_4_q0),
    .address1(kernel_6_4_address1),
    .ce1(kernel_6_4_ce1),
    .we1(kernel_6_4_we1),
    .d1(weight_0_data_out),
    .q1(kernel_6_4_q1)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
kernel_7_4_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_7_4_address0),
    .ce0(kernel_7_4_ce0),
    .q0(kernel_7_4_q0),
    .address1(kernel_7_4_address1),
    .ce1(kernel_7_4_ce1),
    .we1(kernel_7_4_we1),
    .d1(weight_0_data_out),
    .q1(kernel_7_4_q1)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
kernel_0_5_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_0_5_address0),
    .ce0(kernel_0_5_ce0),
    .q0(kernel_0_5_q0),
    .address1(kernel_0_5_address1),
    .ce1(kernel_0_5_ce1),
    .we1(kernel_0_5_we1),
    .d1(weight_0_data_out),
    .q1(kernel_0_5_q1)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
kernel_1_5_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_1_5_address0),
    .ce0(kernel_1_5_ce0),
    .q0(kernel_1_5_q0),
    .address1(kernel_1_5_address1),
    .ce1(kernel_1_5_ce1),
    .we1(kernel_1_5_we1),
    .d1(weight_0_data_out),
    .q1(kernel_1_5_q1)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
kernel_2_5_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_2_5_address0),
    .ce0(kernel_2_5_ce0),
    .q0(kernel_2_5_q0),
    .address1(kernel_2_5_address1),
    .ce1(kernel_2_5_ce1),
    .we1(kernel_2_5_we1),
    .d1(weight_0_data_out),
    .q1(kernel_2_5_q1)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
kernel_3_5_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_3_5_address0),
    .ce0(kernel_3_5_ce0),
    .q0(kernel_3_5_q0),
    .address1(kernel_3_5_address1),
    .ce1(kernel_3_5_ce1),
    .we1(kernel_3_5_we1),
    .d1(weight_0_data_out),
    .q1(kernel_3_5_q1)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
kernel_4_5_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_4_5_address0),
    .ce0(kernel_4_5_ce0),
    .q0(kernel_4_5_q0),
    .address1(kernel_4_5_address1),
    .ce1(kernel_4_5_ce1),
    .we1(kernel_4_5_we1),
    .d1(weight_0_data_out),
    .q1(kernel_4_5_q1)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
kernel_5_5_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_5_5_address0),
    .ce0(kernel_5_5_ce0),
    .q0(kernel_5_5_q0),
    .address1(kernel_5_5_address1),
    .ce1(kernel_5_5_ce1),
    .we1(kernel_5_5_we1),
    .d1(weight_0_data_out),
    .q1(kernel_5_5_q1)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
kernel_6_5_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_6_5_address0),
    .ce0(kernel_6_5_ce0),
    .q0(kernel_6_5_q0),
    .address1(kernel_6_5_address1),
    .ce1(kernel_6_5_ce1),
    .we1(kernel_6_5_we1),
    .d1(weight_0_data_out),
    .q1(kernel_6_5_q1)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
kernel_7_5_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_7_5_address0),
    .ce0(kernel_7_5_ce0),
    .q0(kernel_7_5_q0),
    .address1(kernel_7_5_address1),
    .ce1(kernel_7_5_ce1),
    .we1(kernel_7_5_we1),
    .d1(weight_0_data_out),
    .q1(kernel_7_5_q1)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
kernel_0_6_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_0_6_address0),
    .ce0(kernel_0_6_ce0),
    .q0(kernel_0_6_q0),
    .address1(kernel_0_6_address1),
    .ce1(kernel_0_6_ce1),
    .we1(kernel_0_6_we1),
    .d1(weight_0_data_out),
    .q1(kernel_0_6_q1)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
kernel_1_6_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_1_6_address0),
    .ce0(kernel_1_6_ce0),
    .q0(kernel_1_6_q0),
    .address1(kernel_1_6_address1),
    .ce1(kernel_1_6_ce1),
    .we1(kernel_1_6_we1),
    .d1(weight_0_data_out),
    .q1(kernel_1_6_q1)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
kernel_2_6_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_2_6_address0),
    .ce0(kernel_2_6_ce0),
    .q0(kernel_2_6_q0),
    .address1(kernel_2_6_address1),
    .ce1(kernel_2_6_ce1),
    .we1(kernel_2_6_we1),
    .d1(weight_0_data_out),
    .q1(kernel_2_6_q1)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
kernel_3_6_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_3_6_address0),
    .ce0(kernel_3_6_ce0),
    .q0(kernel_3_6_q0),
    .address1(kernel_3_6_address1),
    .ce1(kernel_3_6_ce1),
    .we1(kernel_3_6_we1),
    .d1(weight_0_data_out),
    .q1(kernel_3_6_q1)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
kernel_4_6_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_4_6_address0),
    .ce0(kernel_4_6_ce0),
    .q0(kernel_4_6_q0),
    .address1(kernel_4_6_address1),
    .ce1(kernel_4_6_ce1),
    .we1(kernel_4_6_we1),
    .d1(weight_0_data_out),
    .q1(kernel_4_6_q1)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
kernel_5_6_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_5_6_address0),
    .ce0(kernel_5_6_ce0),
    .q0(kernel_5_6_q0),
    .address1(kernel_5_6_address1),
    .ce1(kernel_5_6_ce1),
    .we1(kernel_5_6_we1),
    .d1(weight_0_data_out),
    .q1(kernel_5_6_q1)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
kernel_6_6_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_6_6_address0),
    .ce0(kernel_6_6_ce0),
    .q0(kernel_6_6_q0),
    .address1(kernel_6_6_address1),
    .ce1(kernel_6_6_ce1),
    .we1(kernel_6_6_we1),
    .d1(weight_0_data_out),
    .q1(kernel_6_6_q1)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
kernel_7_6_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_7_6_address0),
    .ce0(kernel_7_6_ce0),
    .q0(kernel_7_6_q0),
    .address1(kernel_7_6_address1),
    .ce1(kernel_7_6_ce1),
    .we1(kernel_7_6_we1),
    .d1(weight_0_data_out),
    .q1(kernel_7_6_q1)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
kernel_0_7_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_0_7_address0),
    .ce0(kernel_0_7_ce0),
    .q0(kernel_0_7_q0),
    .address1(kernel_0_7_address1),
    .ce1(kernel_0_7_ce1),
    .we1(kernel_0_7_we1),
    .d1(weight_0_data_out),
    .q1(kernel_0_7_q1)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
kernel_1_7_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_1_7_address0),
    .ce0(kernel_1_7_ce0),
    .q0(kernel_1_7_q0),
    .address1(kernel_1_7_address1),
    .ce1(kernel_1_7_ce1),
    .we1(kernel_1_7_we1),
    .d1(weight_0_data_out),
    .q1(kernel_1_7_q1)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
kernel_2_7_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_2_7_address0),
    .ce0(kernel_2_7_ce0),
    .q0(kernel_2_7_q0),
    .address1(kernel_2_7_address1),
    .ce1(kernel_2_7_ce1),
    .we1(kernel_2_7_we1),
    .d1(weight_0_data_out),
    .q1(kernel_2_7_q1)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
kernel_3_7_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_3_7_address0),
    .ce0(kernel_3_7_ce0),
    .q0(kernel_3_7_q0),
    .address1(kernel_3_7_address1),
    .ce1(kernel_3_7_ce1),
    .we1(kernel_3_7_we1),
    .d1(weight_0_data_out),
    .q1(kernel_3_7_q1)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
kernel_4_7_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_4_7_address0),
    .ce0(kernel_4_7_ce0),
    .q0(kernel_4_7_q0),
    .address1(kernel_4_7_address1),
    .ce1(kernel_4_7_ce1),
    .we1(kernel_4_7_we1),
    .d1(weight_0_data_out),
    .q1(kernel_4_7_q1)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
kernel_5_7_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_5_7_address0),
    .ce0(kernel_5_7_ce0),
    .q0(kernel_5_7_q0),
    .address1(kernel_5_7_address1),
    .ce1(kernel_5_7_ce1),
    .we1(kernel_5_7_we1),
    .d1(weight_0_data_out),
    .q1(kernel_5_7_q1)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
kernel_6_7_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_6_7_address0),
    .ce0(kernel_6_7_ce0),
    .q0(kernel_6_7_q0),
    .address1(kernel_6_7_address1),
    .ce1(kernel_6_7_ce1),
    .we1(kernel_6_7_we1),
    .d1(weight_0_data_out),
    .q1(kernel_6_7_q1)
);

Layer3_Kernel_kerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
kernel_7_7_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_7_7_address0),
    .ce0(kernel_7_7_ce0),
    .q0(kernel_7_7_q0),
    .address1(kernel_7_7_address1),
    .ce1(kernel_7_7_ce1),
    .we1(kernel_7_7_we1),
    .d1(weight_0_data_out),
    .q1(kernel_7_7_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((exitcond6_fu_3102_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state20)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_subdone))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state20)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        b_Data_1_sel_rd <= 1'b0;
    end else begin
        if (((b_Data_1_ack_out == 1'b1) & (b_Data_1_vld_out == 1'b1))) begin
            b_Data_1_sel_rd <= ~b_Data_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        b_Data_1_sel_wr <= 1'b0;
    end else begin
        if (((b_Data_1_ack_in == 1'b1) & (b_Data_1_vld_in == 1'b1))) begin
            b_Data_1_sel_wr <= ~b_Data_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        b_Data_1_state <= 2'd0;
    end else begin
        if ((((b_Data_1_state == 2'd2) & (b_Data_1_vld_in == 1'b0)) | ((b_Data_1_state == 2'd3) & (b_Data_1_vld_in == 1'b0) & (b_Data_1_ack_out == 1'b1)))) begin
            b_Data_1_state <= 2'd2;
        end else if ((((b_Data_1_state == 2'd1) & (b_Data_1_ack_out == 1'b0)) | ((b_Data_1_state == 2'd3) & (b_Data_1_ack_out == 1'b0) & (b_Data_1_vld_in == 1'b1)))) begin
            b_Data_1_state <= 2'd1;
        end else if (((~((b_Data_1_vld_in == 1'b0) & (b_Data_1_ack_out == 1'b1)) & ~((b_Data_1_ack_out == 1'b0) & (b_Data_1_vld_in == 1'b1)) & (b_Data_1_state == 2'd3)) | ((b_Data_1_state == 2'd1) & (b_Data_1_ack_out == 1'b1)) | ((b_Data_1_state == 2'd2) & (b_Data_1_vld_in == 1'b1)))) begin
            b_Data_1_state <= 2'd3;
        end else begin
            b_Data_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        weight_0_sel_rd <= 1'b0;
    end else begin
        if (((weight_0_ack_out == 1'b1) & (weight_0_vld_out == 1'b1))) begin
            weight_0_sel_rd <= ~weight_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        weight_0_sel_wr <= 1'b0;
    end else begin
        if (((weight_0_ack_in == 1'b1) & (weight_0_vld_in == 1'b1))) begin
            weight_0_sel_wr <= ~weight_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        weight_0_state <= 2'd0;
    end else begin
        if ((((weight_0_state == 2'd2) & (weight_0_vld_in == 1'b0)) | ((weight_0_state == 2'd3) & (weight_0_vld_in == 1'b0) & (weight_0_ack_out == 1'b1)))) begin
            weight_0_state <= 2'd2;
        end else if ((((weight_0_state == 2'd1) & (weight_0_ack_out == 1'b0)) | ((weight_0_state == 2'd3) & (weight_0_ack_out == 1'b0) & (weight_0_vld_in == 1'b1)))) begin
            weight_0_state <= 2'd1;
        end else if (((~((weight_0_vld_in == 1'b0) & (weight_0_ack_out == 1'b1)) & ~((weight_0_ack_out == 1'b0) & (weight_0_vld_in == 1'b1)) & (weight_0_state == 2'd3)) | ((weight_0_state == 2'd1) & (weight_0_ack_out == 1'b1)) | ((weight_0_state == 2'd2) & (weight_0_vld_in == 1'b1)))) begin
            weight_0_state <= 2'd3;
        end else begin
            weight_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten1_fu_2769_p2 == 1'd0) & (weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        exitcond_flatten2_reg_2450 <= exitcond_flatten_fu_2763_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        exitcond_flatten2_reg_2450 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten1_fu_2769_p2 == 1'd0) & (weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        exitcond_reg_2461 <= exitcond2_fu_2757_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        exitcond_reg_2461 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        i2_reg_2527 <= p_s_reg_4278;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        i2_reg_2527 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond6_reg_4284 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        i2_s_reg_2539 <= p_s_reg_4278;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        i2_s_reg_2539 <= i2_reg_2527;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten1_fu_2769_p2 == 1'd0) & (weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_2505 <= i_mid2_fu_2587_p3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        i_reg_2505 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten1_fu_2769_p2 == 1'd0) & (weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten1_reg_2516 <= indvar_flatten_next1_fu_2731_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        indvar_flatten1_reg_2516 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten1_fu_2769_p2 == 1'd0) & (weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten_reg_2494 <= indvar_flatten_next_fu_2749_p3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        indvar_flatten_reg_2494 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond6_reg_4284 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_11001))) begin
        iter_reg_2549 <= iter_1_reg_4293;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        iter_reg_2549 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten1_fu_2769_p2 == 1'd0) & (weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        m_reg_2483 <= m_mid2_fu_2615_p3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        m_reg_2483 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten1_fu_2769_p2 == 1'd0) & (weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        n1_reg_2472 <= n_fu_2737_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        n1_reg_2472 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == Bias_Data_1_vld_reg) & (1'b1 == Bias_Data_1_vld_in)) | ((1'b1 == 1'b1) & (1'b1 == Bias_Data_1_vld_in) & (1'b1 == Bias_Data_1_vld_reg)))) begin
        Bias_Data_1_data_reg <= tmp_fu_2775_p17;
    end
end

always @ (posedge ap_clk) begin
    if ((b_Data_1_load_A == 1'b1)) begin
        b_Data_1_payload_A <= b_Data_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((b_Data_1_load_B == 1'b1)) begin
        b_Data_1_payload_B <= b_Data_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_11001))) begin
        exitcond6_reg_4284 <= exitcond6_fu_3102_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        i_2_reg_3947 <= i_2_fu_2951_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        iter_1_reg_4293 <= iter_1_fu_3177_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_11001))) begin
        kernel_0_0_load_1_reg_3958 <= kernel_0_0_q1;
        kernel_0_1_load_1_reg_3998 <= kernel_0_1_q1;
        kernel_0_2_load_1_reg_4038 <= kernel_0_2_q1;
        kernel_0_3_load_1_reg_4078 <= kernel_0_3_q1;
        kernel_0_4_load_1_reg_4118 <= kernel_0_4_q1;
        kernel_0_5_load_1_reg_4158 <= kernel_0_5_q1;
        kernel_0_6_load_1_reg_4198 <= kernel_0_6_q1;
        kernel_0_7_load_1_reg_4238 <= kernel_0_7_q1;
        kernel_1_0_load_1_reg_3963 <= kernel_1_0_q1;
        kernel_1_1_load_1_reg_4003 <= kernel_1_1_q1;
        kernel_1_2_load_1_reg_4043 <= kernel_1_2_q1;
        kernel_1_3_load_1_reg_4083 <= kernel_1_3_q1;
        kernel_1_4_load_1_reg_4123 <= kernel_1_4_q1;
        kernel_1_5_load_1_reg_4163 <= kernel_1_5_q1;
        kernel_1_6_load_1_reg_4203 <= kernel_1_6_q1;
        kernel_1_7_load_1_reg_4243 <= kernel_1_7_q1;
        kernel_2_0_load_1_reg_3968 <= kernel_2_0_q1;
        kernel_2_1_load_1_reg_4008 <= kernel_2_1_q1;
        kernel_2_2_load_1_reg_4048 <= kernel_2_2_q1;
        kernel_2_3_load_1_reg_4088 <= kernel_2_3_q1;
        kernel_2_4_load_1_reg_4128 <= kernel_2_4_q1;
        kernel_2_5_load_1_reg_4168 <= kernel_2_5_q1;
        kernel_2_6_load_1_reg_4208 <= kernel_2_6_q1;
        kernel_2_7_load_1_reg_4248 <= kernel_2_7_q1;
        kernel_3_0_load_1_reg_3973 <= kernel_3_0_q1;
        kernel_3_1_load_1_reg_4013 <= kernel_3_1_q1;
        kernel_3_2_load_1_reg_4053 <= kernel_3_2_q1;
        kernel_3_3_load_1_reg_4093 <= kernel_3_3_q1;
        kernel_3_4_load_1_reg_4133 <= kernel_3_4_q1;
        kernel_3_5_load_1_reg_4173 <= kernel_3_5_q1;
        kernel_3_6_load_1_reg_4213 <= kernel_3_6_q1;
        kernel_3_7_load_1_reg_4253 <= kernel_3_7_q1;
        kernel_4_0_load_1_reg_3978 <= kernel_4_0_q1;
        kernel_4_1_load_1_reg_4018 <= kernel_4_1_q1;
        kernel_4_2_load_1_reg_4058 <= kernel_4_2_q1;
        kernel_4_3_load_1_reg_4098 <= kernel_4_3_q1;
        kernel_4_4_load_1_reg_4138 <= kernel_4_4_q1;
        kernel_4_5_load_1_reg_4178 <= kernel_4_5_q1;
        kernel_4_6_load_1_reg_4218 <= kernel_4_6_q1;
        kernel_4_7_load_1_reg_4258 <= kernel_4_7_q1;
        kernel_5_0_load_1_reg_3983 <= kernel_5_0_q1;
        kernel_5_1_load_1_reg_4023 <= kernel_5_1_q1;
        kernel_5_2_load_1_reg_4063 <= kernel_5_2_q1;
        kernel_5_3_load_1_reg_4103 <= kernel_5_3_q1;
        kernel_5_4_load_1_reg_4143 <= kernel_5_4_q1;
        kernel_5_5_load_1_reg_4183 <= kernel_5_5_q1;
        kernel_5_6_load_1_reg_4223 <= kernel_5_6_q1;
        kernel_5_7_load_1_reg_4263 <= kernel_5_7_q1;
        kernel_6_0_load_1_reg_3988 <= kernel_6_0_q1;
        kernel_6_1_load_1_reg_4028 <= kernel_6_1_q1;
        kernel_6_2_load_1_reg_4068 <= kernel_6_2_q1;
        kernel_6_3_load_1_reg_4108 <= kernel_6_3_q1;
        kernel_6_4_load_1_reg_4148 <= kernel_6_4_q1;
        kernel_6_5_load_1_reg_4188 <= kernel_6_5_q1;
        kernel_6_6_load_1_reg_4228 <= kernel_6_6_q1;
        kernel_6_7_load_1_reg_4268 <= kernel_6_7_q1;
        kernel_7_0_load_1_reg_3993 <= kernel_7_0_q1;
        kernel_7_1_load_1_reg_4033 <= kernel_7_1_q1;
        kernel_7_2_load_1_reg_4073 <= kernel_7_2_q1;
        kernel_7_3_load_1_reg_4113 <= kernel_7_3_q1;
        kernel_7_4_load_1_reg_4153 <= kernel_7_4_q1;
        kernel_7_5_load_1_reg_4193 <= kernel_7_5_q1;
        kernel_7_6_load_1_reg_4233 <= kernel_7_6_q1;
        kernel_7_7_load_1_reg_4273 <= kernel_7_7_q1;
        p_s_reg_4278 <= p_s_fu_3095_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((weight_0_load_A == 1'b1)) begin
        weight_0_payload_A <= weight_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((weight_0_load_B == 1'b1)) begin
        weight_0_payload_B <= weight_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        weight_read_10_reg_3272 <= weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
        weight_read_11_reg_3277 <= weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
        weight_read_12_reg_3282 <= weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
        weight_read_13_reg_3287 <= weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
        weight_read_14_reg_3292 <= weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        weight_read_15_reg_3297 <= weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        weight_read_1_reg_3227 <= weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        weight_read_2_reg_3232 <= weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        weight_read_3_reg_3237 <= weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        weight_read_4_reg_3242 <= weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        weight_read_5_reg_3247 <= weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        weight_read_6_reg_3252 <= weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        weight_read_7_reg_3257 <= weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        weight_read_8_reg_3262 <= weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        weight_read_9_reg_3267 <= weight_0_data_out;
    end
end

always @ (*) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
        Bias_Data_1_vld_in = 1'b1;
    end else begin
        Bias_Data_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond6_reg_4284 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        ap_phi_mux_i2_s_phi_fu_2542_p4 = p_s_reg_4278;
    end else begin
        ap_phi_mux_i2_s_phi_fu_2542_p4 = i2_s_reg_2539;
    end
end

always @ (*) begin
    if (((exitcond6_reg_4284 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1))) begin
        ap_phi_mux_iter_phi_fu_2553_p4 = iter_1_reg_4293;
    end else begin
        ap_phi_mux_iter_phi_fu_2553_p4 = iter_reg_2549;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_01001))) begin
        b_Data_1_data_in = tmp_9_fu_3108_p65;
    end else if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_01001))) begin
        b_Data_1_data_in = tmp_7_fu_2957_p65;
    end else begin
        b_Data_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((b_Data_1_sel == 1'b1)) begin
        b_Data_1_data_out = b_Data_1_payload_B;
    end else begin
        b_Data_1_data_out = b_Data_1_payload_A;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_11001)))) begin
        b_Data_1_vld_in = 1'b1;
    end else begin
        b_Data_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1)))) begin
        b_Data_TDATA_blk_n = b_Data_1_state[1'd1];
    end else begin
        b_Data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kernel_0_0_address1 = tmp_13_fu_2879_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_0_0_address1 = tmp_8_cast_fu_2663_p1;
    end else begin
        kernel_0_0_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kernel_0_0_ce0 = 1'b1;
    end else begin
        kernel_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        kernel_0_0_ce1 = 1'b1;
    end else begin
        kernel_0_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (tmp_6_fu_2639_p1 == 3'd0) & (tmp_3_fu_2635_p1 == 3'd0))) begin
        kernel_0_0_we1 = 1'b1;
    end else begin
        kernel_0_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kernel_0_1_address1 = tmp_13_fu_2879_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_0_1_address1 = tmp_8_cast_fu_2663_p1;
    end else begin
        kernel_0_1_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kernel_0_1_ce0 = 1'b1;
    end else begin
        kernel_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        kernel_0_1_ce1 = 1'b1;
    end else begin
        kernel_0_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (tmp_6_fu_2639_p1 == 3'd1) & (tmp_3_fu_2635_p1 == 3'd0))) begin
        kernel_0_1_we1 = 1'b1;
    end else begin
        kernel_0_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kernel_0_2_address1 = tmp_13_fu_2879_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_0_2_address1 = tmp_8_cast_fu_2663_p1;
    end else begin
        kernel_0_2_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kernel_0_2_ce0 = 1'b1;
    end else begin
        kernel_0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        kernel_0_2_ce1 = 1'b1;
    end else begin
        kernel_0_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (tmp_6_fu_2639_p1 == 3'd2) & (tmp_3_fu_2635_p1 == 3'd0))) begin
        kernel_0_2_we1 = 1'b1;
    end else begin
        kernel_0_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kernel_0_3_address1 = tmp_13_fu_2879_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_0_3_address1 = tmp_8_cast_fu_2663_p1;
    end else begin
        kernel_0_3_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kernel_0_3_ce0 = 1'b1;
    end else begin
        kernel_0_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        kernel_0_3_ce1 = 1'b1;
    end else begin
        kernel_0_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (tmp_6_fu_2639_p1 == 3'd3) & (tmp_3_fu_2635_p1 == 3'd0))) begin
        kernel_0_3_we1 = 1'b1;
    end else begin
        kernel_0_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kernel_0_4_address1 = tmp_13_fu_2879_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_0_4_address1 = tmp_8_cast_fu_2663_p1;
    end else begin
        kernel_0_4_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kernel_0_4_ce0 = 1'b1;
    end else begin
        kernel_0_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        kernel_0_4_ce1 = 1'b1;
    end else begin
        kernel_0_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (tmp_6_fu_2639_p1 == 3'd4) & (tmp_3_fu_2635_p1 == 3'd0))) begin
        kernel_0_4_we1 = 1'b1;
    end else begin
        kernel_0_4_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kernel_0_5_address1 = tmp_13_fu_2879_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_0_5_address1 = tmp_8_cast_fu_2663_p1;
    end else begin
        kernel_0_5_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kernel_0_5_ce0 = 1'b1;
    end else begin
        kernel_0_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        kernel_0_5_ce1 = 1'b1;
    end else begin
        kernel_0_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (tmp_6_fu_2639_p1 == 3'd5) & (tmp_3_fu_2635_p1 == 3'd0))) begin
        kernel_0_5_we1 = 1'b1;
    end else begin
        kernel_0_5_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kernel_0_6_address1 = tmp_13_fu_2879_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_0_6_address1 = tmp_8_cast_fu_2663_p1;
    end else begin
        kernel_0_6_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kernel_0_6_ce0 = 1'b1;
    end else begin
        kernel_0_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        kernel_0_6_ce1 = 1'b1;
    end else begin
        kernel_0_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (tmp_6_fu_2639_p1 == 3'd6) & (tmp_3_fu_2635_p1 == 3'd0))) begin
        kernel_0_6_we1 = 1'b1;
    end else begin
        kernel_0_6_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kernel_0_7_address1 = tmp_13_fu_2879_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_0_7_address1 = tmp_8_cast_fu_2663_p1;
    end else begin
        kernel_0_7_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kernel_0_7_ce0 = 1'b1;
    end else begin
        kernel_0_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        kernel_0_7_ce1 = 1'b1;
    end else begin
        kernel_0_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (tmp_6_fu_2639_p1 == 3'd7) & (tmp_3_fu_2635_p1 == 3'd0))) begin
        kernel_0_7_we1 = 1'b1;
    end else begin
        kernel_0_7_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kernel_1_0_address1 = tmp_13_fu_2879_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_1_0_address1 = tmp_8_cast_fu_2663_p1;
    end else begin
        kernel_1_0_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kernel_1_0_ce0 = 1'b1;
    end else begin
        kernel_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        kernel_1_0_ce1 = 1'b1;
    end else begin
        kernel_1_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (tmp_6_fu_2639_p1 == 3'd0) & (tmp_3_fu_2635_p1 == 3'd1))) begin
        kernel_1_0_we1 = 1'b1;
    end else begin
        kernel_1_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kernel_1_1_address1 = tmp_13_fu_2879_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_1_1_address1 = tmp_8_cast_fu_2663_p1;
    end else begin
        kernel_1_1_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kernel_1_1_ce0 = 1'b1;
    end else begin
        kernel_1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        kernel_1_1_ce1 = 1'b1;
    end else begin
        kernel_1_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (tmp_6_fu_2639_p1 == 3'd1) & (tmp_3_fu_2635_p1 == 3'd1))) begin
        kernel_1_1_we1 = 1'b1;
    end else begin
        kernel_1_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kernel_1_2_address1 = tmp_13_fu_2879_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_1_2_address1 = tmp_8_cast_fu_2663_p1;
    end else begin
        kernel_1_2_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kernel_1_2_ce0 = 1'b1;
    end else begin
        kernel_1_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        kernel_1_2_ce1 = 1'b1;
    end else begin
        kernel_1_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (tmp_6_fu_2639_p1 == 3'd2) & (tmp_3_fu_2635_p1 == 3'd1))) begin
        kernel_1_2_we1 = 1'b1;
    end else begin
        kernel_1_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kernel_1_3_address1 = tmp_13_fu_2879_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_1_3_address1 = tmp_8_cast_fu_2663_p1;
    end else begin
        kernel_1_3_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kernel_1_3_ce0 = 1'b1;
    end else begin
        kernel_1_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        kernel_1_3_ce1 = 1'b1;
    end else begin
        kernel_1_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (tmp_6_fu_2639_p1 == 3'd3) & (tmp_3_fu_2635_p1 == 3'd1))) begin
        kernel_1_3_we1 = 1'b1;
    end else begin
        kernel_1_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kernel_1_4_address1 = tmp_13_fu_2879_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_1_4_address1 = tmp_8_cast_fu_2663_p1;
    end else begin
        kernel_1_4_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kernel_1_4_ce0 = 1'b1;
    end else begin
        kernel_1_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        kernel_1_4_ce1 = 1'b1;
    end else begin
        kernel_1_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (tmp_6_fu_2639_p1 == 3'd4) & (tmp_3_fu_2635_p1 == 3'd1))) begin
        kernel_1_4_we1 = 1'b1;
    end else begin
        kernel_1_4_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kernel_1_5_address1 = tmp_13_fu_2879_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_1_5_address1 = tmp_8_cast_fu_2663_p1;
    end else begin
        kernel_1_5_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kernel_1_5_ce0 = 1'b1;
    end else begin
        kernel_1_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        kernel_1_5_ce1 = 1'b1;
    end else begin
        kernel_1_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (tmp_6_fu_2639_p1 == 3'd5) & (tmp_3_fu_2635_p1 == 3'd1))) begin
        kernel_1_5_we1 = 1'b1;
    end else begin
        kernel_1_5_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kernel_1_6_address1 = tmp_13_fu_2879_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_1_6_address1 = tmp_8_cast_fu_2663_p1;
    end else begin
        kernel_1_6_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kernel_1_6_ce0 = 1'b1;
    end else begin
        kernel_1_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        kernel_1_6_ce1 = 1'b1;
    end else begin
        kernel_1_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (tmp_6_fu_2639_p1 == 3'd6) & (tmp_3_fu_2635_p1 == 3'd1))) begin
        kernel_1_6_we1 = 1'b1;
    end else begin
        kernel_1_6_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kernel_1_7_address1 = tmp_13_fu_2879_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_1_7_address1 = tmp_8_cast_fu_2663_p1;
    end else begin
        kernel_1_7_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kernel_1_7_ce0 = 1'b1;
    end else begin
        kernel_1_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        kernel_1_7_ce1 = 1'b1;
    end else begin
        kernel_1_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (tmp_6_fu_2639_p1 == 3'd7) & (tmp_3_fu_2635_p1 == 3'd1))) begin
        kernel_1_7_we1 = 1'b1;
    end else begin
        kernel_1_7_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kernel_2_0_address1 = tmp_13_fu_2879_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_2_0_address1 = tmp_8_cast_fu_2663_p1;
    end else begin
        kernel_2_0_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kernel_2_0_ce0 = 1'b1;
    end else begin
        kernel_2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        kernel_2_0_ce1 = 1'b1;
    end else begin
        kernel_2_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (tmp_6_fu_2639_p1 == 3'd0) & (tmp_3_fu_2635_p1 == 3'd2))) begin
        kernel_2_0_we1 = 1'b1;
    end else begin
        kernel_2_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kernel_2_1_address1 = tmp_13_fu_2879_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_2_1_address1 = tmp_8_cast_fu_2663_p1;
    end else begin
        kernel_2_1_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kernel_2_1_ce0 = 1'b1;
    end else begin
        kernel_2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        kernel_2_1_ce1 = 1'b1;
    end else begin
        kernel_2_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (tmp_6_fu_2639_p1 == 3'd1) & (tmp_3_fu_2635_p1 == 3'd2))) begin
        kernel_2_1_we1 = 1'b1;
    end else begin
        kernel_2_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kernel_2_2_address1 = tmp_13_fu_2879_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_2_2_address1 = tmp_8_cast_fu_2663_p1;
    end else begin
        kernel_2_2_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kernel_2_2_ce0 = 1'b1;
    end else begin
        kernel_2_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        kernel_2_2_ce1 = 1'b1;
    end else begin
        kernel_2_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (tmp_6_fu_2639_p1 == 3'd2) & (tmp_3_fu_2635_p1 == 3'd2))) begin
        kernel_2_2_we1 = 1'b1;
    end else begin
        kernel_2_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kernel_2_3_address1 = tmp_13_fu_2879_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_2_3_address1 = tmp_8_cast_fu_2663_p1;
    end else begin
        kernel_2_3_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kernel_2_3_ce0 = 1'b1;
    end else begin
        kernel_2_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        kernel_2_3_ce1 = 1'b1;
    end else begin
        kernel_2_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (tmp_6_fu_2639_p1 == 3'd3) & (tmp_3_fu_2635_p1 == 3'd2))) begin
        kernel_2_3_we1 = 1'b1;
    end else begin
        kernel_2_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kernel_2_4_address1 = tmp_13_fu_2879_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_2_4_address1 = tmp_8_cast_fu_2663_p1;
    end else begin
        kernel_2_4_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kernel_2_4_ce0 = 1'b1;
    end else begin
        kernel_2_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        kernel_2_4_ce1 = 1'b1;
    end else begin
        kernel_2_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (tmp_6_fu_2639_p1 == 3'd4) & (tmp_3_fu_2635_p1 == 3'd2))) begin
        kernel_2_4_we1 = 1'b1;
    end else begin
        kernel_2_4_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kernel_2_5_address1 = tmp_13_fu_2879_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_2_5_address1 = tmp_8_cast_fu_2663_p1;
    end else begin
        kernel_2_5_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kernel_2_5_ce0 = 1'b1;
    end else begin
        kernel_2_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        kernel_2_5_ce1 = 1'b1;
    end else begin
        kernel_2_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (tmp_6_fu_2639_p1 == 3'd5) & (tmp_3_fu_2635_p1 == 3'd2))) begin
        kernel_2_5_we1 = 1'b1;
    end else begin
        kernel_2_5_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kernel_2_6_address1 = tmp_13_fu_2879_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_2_6_address1 = tmp_8_cast_fu_2663_p1;
    end else begin
        kernel_2_6_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kernel_2_6_ce0 = 1'b1;
    end else begin
        kernel_2_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        kernel_2_6_ce1 = 1'b1;
    end else begin
        kernel_2_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (tmp_6_fu_2639_p1 == 3'd6) & (tmp_3_fu_2635_p1 == 3'd2))) begin
        kernel_2_6_we1 = 1'b1;
    end else begin
        kernel_2_6_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kernel_2_7_address1 = tmp_13_fu_2879_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_2_7_address1 = tmp_8_cast_fu_2663_p1;
    end else begin
        kernel_2_7_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kernel_2_7_ce0 = 1'b1;
    end else begin
        kernel_2_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        kernel_2_7_ce1 = 1'b1;
    end else begin
        kernel_2_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (tmp_6_fu_2639_p1 == 3'd7) & (tmp_3_fu_2635_p1 == 3'd2))) begin
        kernel_2_7_we1 = 1'b1;
    end else begin
        kernel_2_7_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kernel_3_0_address1 = tmp_13_fu_2879_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_3_0_address1 = tmp_8_cast_fu_2663_p1;
    end else begin
        kernel_3_0_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kernel_3_0_ce0 = 1'b1;
    end else begin
        kernel_3_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        kernel_3_0_ce1 = 1'b1;
    end else begin
        kernel_3_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (tmp_6_fu_2639_p1 == 3'd0) & (tmp_3_fu_2635_p1 == 3'd3))) begin
        kernel_3_0_we1 = 1'b1;
    end else begin
        kernel_3_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kernel_3_1_address1 = tmp_13_fu_2879_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_3_1_address1 = tmp_8_cast_fu_2663_p1;
    end else begin
        kernel_3_1_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kernel_3_1_ce0 = 1'b1;
    end else begin
        kernel_3_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        kernel_3_1_ce1 = 1'b1;
    end else begin
        kernel_3_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (tmp_6_fu_2639_p1 == 3'd1) & (tmp_3_fu_2635_p1 == 3'd3))) begin
        kernel_3_1_we1 = 1'b1;
    end else begin
        kernel_3_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kernel_3_2_address1 = tmp_13_fu_2879_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_3_2_address1 = tmp_8_cast_fu_2663_p1;
    end else begin
        kernel_3_2_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kernel_3_2_ce0 = 1'b1;
    end else begin
        kernel_3_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        kernel_3_2_ce1 = 1'b1;
    end else begin
        kernel_3_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (tmp_6_fu_2639_p1 == 3'd2) & (tmp_3_fu_2635_p1 == 3'd3))) begin
        kernel_3_2_we1 = 1'b1;
    end else begin
        kernel_3_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kernel_3_3_address1 = tmp_13_fu_2879_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_3_3_address1 = tmp_8_cast_fu_2663_p1;
    end else begin
        kernel_3_3_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kernel_3_3_ce0 = 1'b1;
    end else begin
        kernel_3_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        kernel_3_3_ce1 = 1'b1;
    end else begin
        kernel_3_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (tmp_6_fu_2639_p1 == 3'd3) & (tmp_3_fu_2635_p1 == 3'd3))) begin
        kernel_3_3_we1 = 1'b1;
    end else begin
        kernel_3_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kernel_3_4_address1 = tmp_13_fu_2879_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_3_4_address1 = tmp_8_cast_fu_2663_p1;
    end else begin
        kernel_3_4_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kernel_3_4_ce0 = 1'b1;
    end else begin
        kernel_3_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        kernel_3_4_ce1 = 1'b1;
    end else begin
        kernel_3_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (tmp_6_fu_2639_p1 == 3'd4) & (tmp_3_fu_2635_p1 == 3'd3))) begin
        kernel_3_4_we1 = 1'b1;
    end else begin
        kernel_3_4_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kernel_3_5_address1 = tmp_13_fu_2879_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_3_5_address1 = tmp_8_cast_fu_2663_p1;
    end else begin
        kernel_3_5_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kernel_3_5_ce0 = 1'b1;
    end else begin
        kernel_3_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        kernel_3_5_ce1 = 1'b1;
    end else begin
        kernel_3_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (tmp_6_fu_2639_p1 == 3'd5) & (tmp_3_fu_2635_p1 == 3'd3))) begin
        kernel_3_5_we1 = 1'b1;
    end else begin
        kernel_3_5_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kernel_3_6_address1 = tmp_13_fu_2879_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_3_6_address1 = tmp_8_cast_fu_2663_p1;
    end else begin
        kernel_3_6_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kernel_3_6_ce0 = 1'b1;
    end else begin
        kernel_3_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        kernel_3_6_ce1 = 1'b1;
    end else begin
        kernel_3_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (tmp_6_fu_2639_p1 == 3'd6) & (tmp_3_fu_2635_p1 == 3'd3))) begin
        kernel_3_6_we1 = 1'b1;
    end else begin
        kernel_3_6_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kernel_3_7_address1 = tmp_13_fu_2879_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_3_7_address1 = tmp_8_cast_fu_2663_p1;
    end else begin
        kernel_3_7_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kernel_3_7_ce0 = 1'b1;
    end else begin
        kernel_3_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        kernel_3_7_ce1 = 1'b1;
    end else begin
        kernel_3_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (tmp_6_fu_2639_p1 == 3'd7) & (tmp_3_fu_2635_p1 == 3'd3))) begin
        kernel_3_7_we1 = 1'b1;
    end else begin
        kernel_3_7_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kernel_4_0_address1 = tmp_13_fu_2879_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_4_0_address1 = tmp_8_cast_fu_2663_p1;
    end else begin
        kernel_4_0_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kernel_4_0_ce0 = 1'b1;
    end else begin
        kernel_4_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        kernel_4_0_ce1 = 1'b1;
    end else begin
        kernel_4_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (tmp_6_fu_2639_p1 == 3'd0) & (tmp_3_fu_2635_p1 == 3'd4))) begin
        kernel_4_0_we1 = 1'b1;
    end else begin
        kernel_4_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kernel_4_1_address1 = tmp_13_fu_2879_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_4_1_address1 = tmp_8_cast_fu_2663_p1;
    end else begin
        kernel_4_1_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kernel_4_1_ce0 = 1'b1;
    end else begin
        kernel_4_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        kernel_4_1_ce1 = 1'b1;
    end else begin
        kernel_4_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (tmp_6_fu_2639_p1 == 3'd1) & (tmp_3_fu_2635_p1 == 3'd4))) begin
        kernel_4_1_we1 = 1'b1;
    end else begin
        kernel_4_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kernel_4_2_address1 = tmp_13_fu_2879_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_4_2_address1 = tmp_8_cast_fu_2663_p1;
    end else begin
        kernel_4_2_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kernel_4_2_ce0 = 1'b1;
    end else begin
        kernel_4_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        kernel_4_2_ce1 = 1'b1;
    end else begin
        kernel_4_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (tmp_6_fu_2639_p1 == 3'd2) & (tmp_3_fu_2635_p1 == 3'd4))) begin
        kernel_4_2_we1 = 1'b1;
    end else begin
        kernel_4_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kernel_4_3_address1 = tmp_13_fu_2879_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_4_3_address1 = tmp_8_cast_fu_2663_p1;
    end else begin
        kernel_4_3_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kernel_4_3_ce0 = 1'b1;
    end else begin
        kernel_4_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        kernel_4_3_ce1 = 1'b1;
    end else begin
        kernel_4_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (tmp_6_fu_2639_p1 == 3'd3) & (tmp_3_fu_2635_p1 == 3'd4))) begin
        kernel_4_3_we1 = 1'b1;
    end else begin
        kernel_4_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kernel_4_4_address1 = tmp_13_fu_2879_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_4_4_address1 = tmp_8_cast_fu_2663_p1;
    end else begin
        kernel_4_4_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kernel_4_4_ce0 = 1'b1;
    end else begin
        kernel_4_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        kernel_4_4_ce1 = 1'b1;
    end else begin
        kernel_4_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (tmp_6_fu_2639_p1 == 3'd4) & (tmp_3_fu_2635_p1 == 3'd4))) begin
        kernel_4_4_we1 = 1'b1;
    end else begin
        kernel_4_4_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kernel_4_5_address1 = tmp_13_fu_2879_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_4_5_address1 = tmp_8_cast_fu_2663_p1;
    end else begin
        kernel_4_5_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kernel_4_5_ce0 = 1'b1;
    end else begin
        kernel_4_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        kernel_4_5_ce1 = 1'b1;
    end else begin
        kernel_4_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (tmp_6_fu_2639_p1 == 3'd5) & (tmp_3_fu_2635_p1 == 3'd4))) begin
        kernel_4_5_we1 = 1'b1;
    end else begin
        kernel_4_5_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kernel_4_6_address1 = tmp_13_fu_2879_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_4_6_address1 = tmp_8_cast_fu_2663_p1;
    end else begin
        kernel_4_6_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kernel_4_6_ce0 = 1'b1;
    end else begin
        kernel_4_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        kernel_4_6_ce1 = 1'b1;
    end else begin
        kernel_4_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (tmp_6_fu_2639_p1 == 3'd6) & (tmp_3_fu_2635_p1 == 3'd4))) begin
        kernel_4_6_we1 = 1'b1;
    end else begin
        kernel_4_6_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kernel_4_7_address1 = tmp_13_fu_2879_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_4_7_address1 = tmp_8_cast_fu_2663_p1;
    end else begin
        kernel_4_7_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kernel_4_7_ce0 = 1'b1;
    end else begin
        kernel_4_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        kernel_4_7_ce1 = 1'b1;
    end else begin
        kernel_4_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (tmp_6_fu_2639_p1 == 3'd7) & (tmp_3_fu_2635_p1 == 3'd4))) begin
        kernel_4_7_we1 = 1'b1;
    end else begin
        kernel_4_7_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kernel_5_0_address1 = tmp_13_fu_2879_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_5_0_address1 = tmp_8_cast_fu_2663_p1;
    end else begin
        kernel_5_0_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kernel_5_0_ce0 = 1'b1;
    end else begin
        kernel_5_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        kernel_5_0_ce1 = 1'b1;
    end else begin
        kernel_5_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (tmp_6_fu_2639_p1 == 3'd0) & (tmp_3_fu_2635_p1 == 3'd5))) begin
        kernel_5_0_we1 = 1'b1;
    end else begin
        kernel_5_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kernel_5_1_address1 = tmp_13_fu_2879_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_5_1_address1 = tmp_8_cast_fu_2663_p1;
    end else begin
        kernel_5_1_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kernel_5_1_ce0 = 1'b1;
    end else begin
        kernel_5_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        kernel_5_1_ce1 = 1'b1;
    end else begin
        kernel_5_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (tmp_6_fu_2639_p1 == 3'd1) & (tmp_3_fu_2635_p1 == 3'd5))) begin
        kernel_5_1_we1 = 1'b1;
    end else begin
        kernel_5_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kernel_5_2_address1 = tmp_13_fu_2879_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_5_2_address1 = tmp_8_cast_fu_2663_p1;
    end else begin
        kernel_5_2_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kernel_5_2_ce0 = 1'b1;
    end else begin
        kernel_5_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        kernel_5_2_ce1 = 1'b1;
    end else begin
        kernel_5_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (tmp_6_fu_2639_p1 == 3'd2) & (tmp_3_fu_2635_p1 == 3'd5))) begin
        kernel_5_2_we1 = 1'b1;
    end else begin
        kernel_5_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kernel_5_3_address1 = tmp_13_fu_2879_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_5_3_address1 = tmp_8_cast_fu_2663_p1;
    end else begin
        kernel_5_3_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kernel_5_3_ce0 = 1'b1;
    end else begin
        kernel_5_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        kernel_5_3_ce1 = 1'b1;
    end else begin
        kernel_5_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (tmp_6_fu_2639_p1 == 3'd3) & (tmp_3_fu_2635_p1 == 3'd5))) begin
        kernel_5_3_we1 = 1'b1;
    end else begin
        kernel_5_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kernel_5_4_address1 = tmp_13_fu_2879_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_5_4_address1 = tmp_8_cast_fu_2663_p1;
    end else begin
        kernel_5_4_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kernel_5_4_ce0 = 1'b1;
    end else begin
        kernel_5_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        kernel_5_4_ce1 = 1'b1;
    end else begin
        kernel_5_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (tmp_6_fu_2639_p1 == 3'd4) & (tmp_3_fu_2635_p1 == 3'd5))) begin
        kernel_5_4_we1 = 1'b1;
    end else begin
        kernel_5_4_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kernel_5_5_address1 = tmp_13_fu_2879_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_5_5_address1 = tmp_8_cast_fu_2663_p1;
    end else begin
        kernel_5_5_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kernel_5_5_ce0 = 1'b1;
    end else begin
        kernel_5_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        kernel_5_5_ce1 = 1'b1;
    end else begin
        kernel_5_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (tmp_6_fu_2639_p1 == 3'd5) & (tmp_3_fu_2635_p1 == 3'd5))) begin
        kernel_5_5_we1 = 1'b1;
    end else begin
        kernel_5_5_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kernel_5_6_address1 = tmp_13_fu_2879_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_5_6_address1 = tmp_8_cast_fu_2663_p1;
    end else begin
        kernel_5_6_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kernel_5_6_ce0 = 1'b1;
    end else begin
        kernel_5_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        kernel_5_6_ce1 = 1'b1;
    end else begin
        kernel_5_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (tmp_6_fu_2639_p1 == 3'd6) & (tmp_3_fu_2635_p1 == 3'd5))) begin
        kernel_5_6_we1 = 1'b1;
    end else begin
        kernel_5_6_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kernel_5_7_address1 = tmp_13_fu_2879_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_5_7_address1 = tmp_8_cast_fu_2663_p1;
    end else begin
        kernel_5_7_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kernel_5_7_ce0 = 1'b1;
    end else begin
        kernel_5_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        kernel_5_7_ce1 = 1'b1;
    end else begin
        kernel_5_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (tmp_6_fu_2639_p1 == 3'd7) & (tmp_3_fu_2635_p1 == 3'd5))) begin
        kernel_5_7_we1 = 1'b1;
    end else begin
        kernel_5_7_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kernel_6_0_address1 = tmp_13_fu_2879_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_6_0_address1 = tmp_8_cast_fu_2663_p1;
    end else begin
        kernel_6_0_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kernel_6_0_ce0 = 1'b1;
    end else begin
        kernel_6_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        kernel_6_0_ce1 = 1'b1;
    end else begin
        kernel_6_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (tmp_6_fu_2639_p1 == 3'd0) & (tmp_3_fu_2635_p1 == 3'd6))) begin
        kernel_6_0_we1 = 1'b1;
    end else begin
        kernel_6_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kernel_6_1_address1 = tmp_13_fu_2879_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_6_1_address1 = tmp_8_cast_fu_2663_p1;
    end else begin
        kernel_6_1_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kernel_6_1_ce0 = 1'b1;
    end else begin
        kernel_6_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        kernel_6_1_ce1 = 1'b1;
    end else begin
        kernel_6_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (tmp_6_fu_2639_p1 == 3'd1) & (tmp_3_fu_2635_p1 == 3'd6))) begin
        kernel_6_1_we1 = 1'b1;
    end else begin
        kernel_6_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kernel_6_2_address1 = tmp_13_fu_2879_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_6_2_address1 = tmp_8_cast_fu_2663_p1;
    end else begin
        kernel_6_2_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kernel_6_2_ce0 = 1'b1;
    end else begin
        kernel_6_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        kernel_6_2_ce1 = 1'b1;
    end else begin
        kernel_6_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (tmp_6_fu_2639_p1 == 3'd2) & (tmp_3_fu_2635_p1 == 3'd6))) begin
        kernel_6_2_we1 = 1'b1;
    end else begin
        kernel_6_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kernel_6_3_address1 = tmp_13_fu_2879_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_6_3_address1 = tmp_8_cast_fu_2663_p1;
    end else begin
        kernel_6_3_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kernel_6_3_ce0 = 1'b1;
    end else begin
        kernel_6_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        kernel_6_3_ce1 = 1'b1;
    end else begin
        kernel_6_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (tmp_6_fu_2639_p1 == 3'd3) & (tmp_3_fu_2635_p1 == 3'd6))) begin
        kernel_6_3_we1 = 1'b1;
    end else begin
        kernel_6_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kernel_6_4_address1 = tmp_13_fu_2879_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_6_4_address1 = tmp_8_cast_fu_2663_p1;
    end else begin
        kernel_6_4_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kernel_6_4_ce0 = 1'b1;
    end else begin
        kernel_6_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        kernel_6_4_ce1 = 1'b1;
    end else begin
        kernel_6_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (tmp_6_fu_2639_p1 == 3'd4) & (tmp_3_fu_2635_p1 == 3'd6))) begin
        kernel_6_4_we1 = 1'b1;
    end else begin
        kernel_6_4_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kernel_6_5_address1 = tmp_13_fu_2879_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_6_5_address1 = tmp_8_cast_fu_2663_p1;
    end else begin
        kernel_6_5_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kernel_6_5_ce0 = 1'b1;
    end else begin
        kernel_6_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        kernel_6_5_ce1 = 1'b1;
    end else begin
        kernel_6_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (tmp_6_fu_2639_p1 == 3'd5) & (tmp_3_fu_2635_p1 == 3'd6))) begin
        kernel_6_5_we1 = 1'b1;
    end else begin
        kernel_6_5_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kernel_6_6_address1 = tmp_13_fu_2879_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_6_6_address1 = tmp_8_cast_fu_2663_p1;
    end else begin
        kernel_6_6_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kernel_6_6_ce0 = 1'b1;
    end else begin
        kernel_6_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        kernel_6_6_ce1 = 1'b1;
    end else begin
        kernel_6_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (tmp_6_fu_2639_p1 == 3'd6) & (tmp_3_fu_2635_p1 == 3'd6))) begin
        kernel_6_6_we1 = 1'b1;
    end else begin
        kernel_6_6_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kernel_6_7_address1 = tmp_13_fu_2879_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_6_7_address1 = tmp_8_cast_fu_2663_p1;
    end else begin
        kernel_6_7_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kernel_6_7_ce0 = 1'b1;
    end else begin
        kernel_6_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        kernel_6_7_ce1 = 1'b1;
    end else begin
        kernel_6_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (tmp_6_fu_2639_p1 == 3'd7) & (tmp_3_fu_2635_p1 == 3'd6))) begin
        kernel_6_7_we1 = 1'b1;
    end else begin
        kernel_6_7_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kernel_7_0_address1 = tmp_13_fu_2879_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_7_0_address1 = tmp_8_cast_fu_2663_p1;
    end else begin
        kernel_7_0_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kernel_7_0_ce0 = 1'b1;
    end else begin
        kernel_7_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        kernel_7_0_ce1 = 1'b1;
    end else begin
        kernel_7_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (tmp_6_fu_2639_p1 == 3'd0) & (tmp_3_fu_2635_p1 == 3'd7))) begin
        kernel_7_0_we1 = 1'b1;
    end else begin
        kernel_7_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kernel_7_1_address1 = tmp_13_fu_2879_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_7_1_address1 = tmp_8_cast_fu_2663_p1;
    end else begin
        kernel_7_1_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kernel_7_1_ce0 = 1'b1;
    end else begin
        kernel_7_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        kernel_7_1_ce1 = 1'b1;
    end else begin
        kernel_7_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (tmp_6_fu_2639_p1 == 3'd1) & (tmp_3_fu_2635_p1 == 3'd7))) begin
        kernel_7_1_we1 = 1'b1;
    end else begin
        kernel_7_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kernel_7_2_address1 = tmp_13_fu_2879_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_7_2_address1 = tmp_8_cast_fu_2663_p1;
    end else begin
        kernel_7_2_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kernel_7_2_ce0 = 1'b1;
    end else begin
        kernel_7_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        kernel_7_2_ce1 = 1'b1;
    end else begin
        kernel_7_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (tmp_6_fu_2639_p1 == 3'd2) & (tmp_3_fu_2635_p1 == 3'd7))) begin
        kernel_7_2_we1 = 1'b1;
    end else begin
        kernel_7_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kernel_7_3_address1 = tmp_13_fu_2879_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_7_3_address1 = tmp_8_cast_fu_2663_p1;
    end else begin
        kernel_7_3_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kernel_7_3_ce0 = 1'b1;
    end else begin
        kernel_7_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        kernel_7_3_ce1 = 1'b1;
    end else begin
        kernel_7_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (tmp_6_fu_2639_p1 == 3'd3) & (tmp_3_fu_2635_p1 == 3'd7))) begin
        kernel_7_3_we1 = 1'b1;
    end else begin
        kernel_7_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kernel_7_4_address1 = tmp_13_fu_2879_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_7_4_address1 = tmp_8_cast_fu_2663_p1;
    end else begin
        kernel_7_4_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kernel_7_4_ce0 = 1'b1;
    end else begin
        kernel_7_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        kernel_7_4_ce1 = 1'b1;
    end else begin
        kernel_7_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (tmp_6_fu_2639_p1 == 3'd4) & (tmp_3_fu_2635_p1 == 3'd7))) begin
        kernel_7_4_we1 = 1'b1;
    end else begin
        kernel_7_4_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kernel_7_5_address1 = tmp_13_fu_2879_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_7_5_address1 = tmp_8_cast_fu_2663_p1;
    end else begin
        kernel_7_5_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kernel_7_5_ce0 = 1'b1;
    end else begin
        kernel_7_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        kernel_7_5_ce1 = 1'b1;
    end else begin
        kernel_7_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (tmp_6_fu_2639_p1 == 3'd5) & (tmp_3_fu_2635_p1 == 3'd7))) begin
        kernel_7_5_we1 = 1'b1;
    end else begin
        kernel_7_5_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kernel_7_6_address1 = tmp_13_fu_2879_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_7_6_address1 = tmp_8_cast_fu_2663_p1;
    end else begin
        kernel_7_6_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kernel_7_6_ce0 = 1'b1;
    end else begin
        kernel_7_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        kernel_7_6_ce1 = 1'b1;
    end else begin
        kernel_7_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (tmp_6_fu_2639_p1 == 3'd6) & (tmp_3_fu_2635_p1 == 3'd7))) begin
        kernel_7_6_we1 = 1'b1;
    end else begin
        kernel_7_6_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kernel_7_7_address1 = tmp_13_fu_2879_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_7_7_address1 = tmp_8_cast_fu_2663_p1;
    end else begin
        kernel_7_7_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kernel_7_7_ce0 = 1'b1;
    end else begin
        kernel_7_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        kernel_7_7_ce1 = 1'b1;
    end else begin
        kernel_7_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (tmp_6_fu_2639_p1 == 3'd7) & (tmp_3_fu_2635_p1 == 3'd7))) begin
        kernel_7_7_we1 = 1'b1;
    end else begin
        kernel_7_7_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state7)) | ((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state5)) | ((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | ((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state18)) | ((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state17)) | ((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | ((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state15)) | ((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state14)) | ((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state13)) | ((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state12)) | ((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state11)) | ((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state10)))) begin
        weight_0_ack_out = 1'b1;
    end else begin
        weight_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((weight_0_sel == 1'b1)) begin
        weight_0_data_out = weight_0_payload_B;
    end else begin
        weight_0_data_out = weight_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        weight_TDATA_blk_n = weight_0_state[1'd0];
    end else begin
        weight_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond_flatten1_fu_2769_p2 == 1'd0) & (weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((exitcond_flatten1_fu_2769_p2 == 1'd1) & (weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_subdone) & (ap_enable_reg_pp1_iter0 == 1'b0)) & (1'b0 == ap_block_pp1_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_subdone) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Bias_Data = Bias_Data_1_data_reg;

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((b_Data_1_ack_in == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((b_Data_1_ack_in == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage1_11001 = (((b_Data_1_ack_in == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1)) | ((b_Data_1_ack_in == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage1_subdone = (((b_Data_1_ack_in == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1)) | ((b_Data_1_ack_in == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)));
end

assign ap_block_state21_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp1_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp1_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign b_Data_1_ack_in = b_Data_1_state[1'd1];

assign b_Data_1_ack_out = b_Data_TREADY;

assign b_Data_1_load_A = (~b_Data_1_sel_wr & b_Data_1_state_cmp_full);

assign b_Data_1_load_B = (b_Data_1_state_cmp_full & b_Data_1_sel_wr);

assign b_Data_1_sel = b_Data_1_sel_rd;

assign b_Data_1_state_cmp_full = ((b_Data_1_state != 2'd1) ? 1'b1 : 1'b0);

assign b_Data_1_vld_out = b_Data_1_state[1'd0];

assign b_Data_TDATA = b_Data_1_data_out;

assign b_Data_TVALID = b_Data_1_state[1'd0];

assign exitcond2_fu_2757_p2 = ((n_fu_2737_p2 == 5'd16) ? 1'b1 : 1'b0);

assign exitcond2_mid_fu_2581_p2 = (not_exitcond_flatten_fu_2575_p2 & exitcond_reg_2461);

assign exitcond6_fu_3102_p2 = ((ap_phi_mux_iter_phi_fu_2553_p4 == 8'd143) ? 1'b1 : 1'b0);

assign exitcond_flatten1_fu_2769_p2 = ((indvar_flatten1_reg_2516 == 11'd1151) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_2763_p2 = ((indvar_flatten_next_fu_2749_p3 == 9'd128) ? 1'b1 : 1'b0);

assign i_1_fu_2561_p2 = (4'd1 + i_reg_2505);

assign i_2_fu_2951_p2 = (ap_phi_mux_i2_s_phi_fu_2542_p4 + 8'd1);

assign i_mid2_fu_2587_p3 = ((exitcond_flatten2_reg_2450[0:0] === 1'b1) ? i_1_fu_2561_p2 : i_reg_2505);

assign indvar_flatten_next1_fu_2731_p2 = (11'd1 + indvar_flatten1_reg_2516);

assign indvar_flatten_next_fu_2749_p3 = ((exitcond_flatten2_reg_2450[0:0] === 1'b1) ? 9'd1 : indvar_flatten_op_fu_2743_p2);

assign indvar_flatten_op_fu_2743_p2 = (indvar_flatten_reg_2494 + 9'd1);

assign iter_1_fu_3177_p2 = (iter_reg_2549 + 8'd1);

assign kernel_0_0_address0 = tmp_11_fu_2805_p1;

assign kernel_0_1_address0 = tmp_11_fu_2805_p1;

assign kernel_0_2_address0 = tmp_11_fu_2805_p1;

assign kernel_0_3_address0 = tmp_11_fu_2805_p1;

assign kernel_0_4_address0 = tmp_11_fu_2805_p1;

assign kernel_0_5_address0 = tmp_11_fu_2805_p1;

assign kernel_0_6_address0 = tmp_11_fu_2805_p1;

assign kernel_0_7_address0 = tmp_11_fu_2805_p1;

assign kernel_1_0_address0 = tmp_11_fu_2805_p1;

assign kernel_1_1_address0 = tmp_11_fu_2805_p1;

assign kernel_1_2_address0 = tmp_11_fu_2805_p1;

assign kernel_1_3_address0 = tmp_11_fu_2805_p1;

assign kernel_1_4_address0 = tmp_11_fu_2805_p1;

assign kernel_1_5_address0 = tmp_11_fu_2805_p1;

assign kernel_1_6_address0 = tmp_11_fu_2805_p1;

assign kernel_1_7_address0 = tmp_11_fu_2805_p1;

assign kernel_2_0_address0 = tmp_11_fu_2805_p1;

assign kernel_2_1_address0 = tmp_11_fu_2805_p1;

assign kernel_2_2_address0 = tmp_11_fu_2805_p1;

assign kernel_2_3_address0 = tmp_11_fu_2805_p1;

assign kernel_2_4_address0 = tmp_11_fu_2805_p1;

assign kernel_2_5_address0 = tmp_11_fu_2805_p1;

assign kernel_2_6_address0 = tmp_11_fu_2805_p1;

assign kernel_2_7_address0 = tmp_11_fu_2805_p1;

assign kernel_3_0_address0 = tmp_11_fu_2805_p1;

assign kernel_3_1_address0 = tmp_11_fu_2805_p1;

assign kernel_3_2_address0 = tmp_11_fu_2805_p1;

assign kernel_3_3_address0 = tmp_11_fu_2805_p1;

assign kernel_3_4_address0 = tmp_11_fu_2805_p1;

assign kernel_3_5_address0 = tmp_11_fu_2805_p1;

assign kernel_3_6_address0 = tmp_11_fu_2805_p1;

assign kernel_3_7_address0 = tmp_11_fu_2805_p1;

assign kernel_4_0_address0 = tmp_11_fu_2805_p1;

assign kernel_4_1_address0 = tmp_11_fu_2805_p1;

assign kernel_4_2_address0 = tmp_11_fu_2805_p1;

assign kernel_4_3_address0 = tmp_11_fu_2805_p1;

assign kernel_4_4_address0 = tmp_11_fu_2805_p1;

assign kernel_4_5_address0 = tmp_11_fu_2805_p1;

assign kernel_4_6_address0 = tmp_11_fu_2805_p1;

assign kernel_4_7_address0 = tmp_11_fu_2805_p1;

assign kernel_5_0_address0 = tmp_11_fu_2805_p1;

assign kernel_5_1_address0 = tmp_11_fu_2805_p1;

assign kernel_5_2_address0 = tmp_11_fu_2805_p1;

assign kernel_5_3_address0 = tmp_11_fu_2805_p1;

assign kernel_5_4_address0 = tmp_11_fu_2805_p1;

assign kernel_5_5_address0 = tmp_11_fu_2805_p1;

assign kernel_5_6_address0 = tmp_11_fu_2805_p1;

assign kernel_5_7_address0 = tmp_11_fu_2805_p1;

assign kernel_6_0_address0 = tmp_11_fu_2805_p1;

assign kernel_6_1_address0 = tmp_11_fu_2805_p1;

assign kernel_6_2_address0 = tmp_11_fu_2805_p1;

assign kernel_6_3_address0 = tmp_11_fu_2805_p1;

assign kernel_6_4_address0 = tmp_11_fu_2805_p1;

assign kernel_6_5_address0 = tmp_11_fu_2805_p1;

assign kernel_6_6_address0 = tmp_11_fu_2805_p1;

assign kernel_6_7_address0 = tmp_11_fu_2805_p1;

assign kernel_7_0_address0 = tmp_11_fu_2805_p1;

assign kernel_7_1_address0 = tmp_11_fu_2805_p1;

assign kernel_7_2_address0 = tmp_11_fu_2805_p1;

assign kernel_7_3_address0 = tmp_11_fu_2805_p1;

assign kernel_7_4_address0 = tmp_11_fu_2805_p1;

assign kernel_7_5_address0 = tmp_11_fu_2805_p1;

assign kernel_7_6_address0 = tmp_11_fu_2805_p1;

assign kernel_7_7_address0 = tmp_11_fu_2805_p1;

assign m_1_fu_2595_p2 = (4'd1 + m_mid_fu_2567_p3);

assign m_mid2_fu_2615_p3 = ((exitcond2_mid_fu_2581_p2[0:0] === 1'b1) ? m_1_fu_2595_p2 : m_mid_fu_2567_p3);

assign m_mid_fu_2567_p3 = ((exitcond_flatten2_reg_2450[0:0] === 1'b1) ? 4'd0 : m_reg_2483);

assign n2_mid2_fu_2607_p3 = ((tmp_2_fu_2601_p2[0:0] === 1'b1) ? 5'd0 : n1_reg_2472);

assign n_fu_2737_p2 = (n2_mid2_fu_2607_p3 + 5'd1);

assign newIndex1_cast_fu_2653_p1 = tmp_14_fu_2643_p4;

assign not_exitcond_flatten_fu_2575_p2 = (exitcond_flatten2_reg_2450 ^ 1'd1);

assign p_s_fu_3095_p3 = ((tmp_1_fu_3090_p2[0:0] === 1'b1) ? 8'd0 : i_2_reg_3947);

assign tmp_10_fu_2797_p3 = {{ap_phi_mux_i2_s_phi_fu_2542_p4}, {1'd0}};

assign tmp_11_fu_2805_p1 = tmp_10_fu_2797_p3;

assign tmp_12_fu_2873_p2 = (tmp_10_fu_2797_p3 | 9'd1);

assign tmp_13_fu_2879_p3 = {{55'd0}, {tmp_12_fu_2873_p2}};

assign tmp_14_fu_2643_p4 = {{n2_mid2_fu_2607_p3[4:3]}};

assign tmp_1_fu_3090_p2 = ((i_2_reg_3947 == 8'd9) ? 1'b1 : 1'b0);

assign tmp_2_fu_2601_p2 = (exitcond_flatten2_reg_2450 | exitcond2_mid_fu_2581_p2);

assign tmp_3_fu_2635_p1 = m_mid2_fu_2615_p3[2:0];

assign tmp_4_fu_2623_p3 = {{i_mid2_fu_2587_p3}, {1'd0}};

assign tmp_6_cast_fu_2631_p1 = tmp_4_fu_2623_p3;

assign tmp_6_fu_2639_p1 = n2_mid2_fu_2607_p3[2:0];

assign tmp_7_fu_2957_p65 = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{kernel_7_7_q0}, {kernel_6_7_q0}}, {kernel_5_7_q0}}, {kernel_4_7_q0}}, {kernel_3_7_q0}}, {kernel_2_7_q0}}, {kernel_1_7_q0}}, {kernel_0_7_q0}}, {kernel_7_6_q0}}, {kernel_6_6_q0}}, {kernel_5_6_q0}}, {kernel_4_6_q0}}, {kernel_3_6_q0}}, {kernel_2_6_q0}}, {kernel_1_6_q0}}, {kernel_0_6_q0}}, {kernel_7_5_q0}}, {kernel_6_5_q0}}, {kernel_5_5_q0}}, {kernel_4_5_q0}}, {kernel_3_5_q0}}, {kernel_2_5_q0}}, {kernel_1_5_q0}}, {kernel_0_5_q0}}, {kernel_7_4_q0}}, {kernel_6_4_q0}}, {kernel_5_4_q0}}, {kernel_4_4_q0}}, {kernel_3_4_q0}}, {kernel_2_4_q0}}, {kernel_1_4_q0}}, {kernel_0_4_q0}}, {kernel_7_3_q0}}, {kernel_6_3_q0}}, {kernel_5_3_q0}}, {kernel_4_3_q0}}, {kernel_3_3_q0}}, {kernel_2_3_q0}}, {kernel_1_3_q0}}, {kernel_0_3_q0}}, {kernel_7_2_q0}}, {kernel_6_2_q0}}, {kernel_5_2_q0}}, {kernel_4_2_q0}}, {kernel_3_2_q0}}, {kernel_2_2_q0}}, {kernel_1_2_q0}}, {kernel_0_2_q0}}, {kernel_7_1_q0}}, {kernel_6_1_q0}}, {kernel_5_1_q0}}, {kernel_4_1_q0}}, {kernel_3_1_q0}}, {kernel_2_1_q0}}, {kernel_1_1_q0}}, {kernel_0_1_q0}}, {kernel_7_0_q0}}, {kernel_6_0_q0}}, {kernel_5_0_q0}}, {kernel_4_0_q0}}, {kernel_3_0_q0}}, {kernel_2_0_q0}}, {kernel_1_0_q0}}, {kernel_0_0_q0}};

assign tmp_8_cast_fu_2663_p1 = tmp_8_fu_2657_p2;

assign tmp_8_fu_2657_p2 = (tmp_6_cast_fu_2631_p1 + newIndex1_cast_fu_2653_p1);

assign tmp_9_fu_3108_p65 = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{kernel_7_7_load_1_reg_4273}, {kernel_6_7_load_1_reg_4268}}, {kernel_5_7_load_1_reg_4263}}, {kernel_4_7_load_1_reg_4258}}, {kernel_3_7_load_1_reg_4253}}, {kernel_2_7_load_1_reg_4248}}, {kernel_1_7_load_1_reg_4243}}, {kernel_0_7_load_1_reg_4238}}, {kernel_7_6_load_1_reg_4233}}, {kernel_6_6_load_1_reg_4228}}, {kernel_5_6_load_1_reg_4223}}, {kernel_4_6_load_1_reg_4218}}, {kernel_3_6_load_1_reg_4213}}, {kernel_2_6_load_1_reg_4208}}, {kernel_1_6_load_1_reg_4203}}, {kernel_0_6_load_1_reg_4198}}, {kernel_7_5_load_1_reg_4193}}, {kernel_6_5_load_1_reg_4188}}, {kernel_5_5_load_1_reg_4183}}, {kernel_4_5_load_1_reg_4178}}, {kernel_3_5_load_1_reg_4173}}, {kernel_2_5_load_1_reg_4168}}, {kernel_1_5_load_1_reg_4163}}, {kernel_0_5_load_1_reg_4158}}, {kernel_7_4_load_1_reg_4153}}, {kernel_6_4_load_1_reg_4148}}, {kernel_5_4_load_1_reg_4143}}, {kernel_4_4_load_1_reg_4138}}, {kernel_3_4_load_1_reg_4133}}, {kernel_2_4_load_1_reg_4128}}, {kernel_1_4_load_1_reg_4123}}, {kernel_0_4_load_1_reg_4118}}, {kernel_7_3_load_1_reg_4113}}, {kernel_6_3_load_1_reg_4108}}, {kernel_5_3_load_1_reg_4103}}, {kernel_4_3_load_1_reg_4098}}, {kernel_3_3_load_1_reg_4093}}, {kernel_2_3_load_1_reg_4088}}, {kernel_1_3_load_1_reg_4083}}, {kernel_0_3_load_1_reg_4078}}, {kernel_7_2_load_1_reg_4073}}, {kernel_6_2_load_1_reg_4068}}, {kernel_5_2_load_1_reg_4063}}, {kernel_4_2_load_1_reg_4058}}, {kernel_3_2_load_1_reg_4053}}, {kernel_2_2_load_1_reg_4048}}, {kernel_1_2_load_1_reg_4043}}, {kernel_0_2_load_1_reg_4038}}, {kernel_7_1_load_1_reg_4033}}, {kernel_6_1_load_1_reg_4028}}, {kernel_5_1_load_1_reg_4023}}, {kernel_4_1_load_1_reg_4018}}, {kernel_3_1_load_1_reg_4013}}, {kernel_2_1_load_1_reg_4008}}, {kernel_1_1_load_1_reg_4003}}, {kernel_0_1_load_1_reg_3998}}, {kernel_7_0_load_1_reg_3993}}, {kernel_6_0_load_1_reg_3988}}, {kernel_5_0_load_1_reg_3983}}, {kernel_4_0_load_1_reg_3978}}, {kernel_3_0_load_1_reg_3973}}, {kernel_2_0_load_1_reg_3968}}, {kernel_1_0_load_1_reg_3963}}, {kernel_0_0_load_1_reg_3958}};

assign tmp_fu_2775_p17 = {{{{{{{{{{{{{{{{weight_0_data_out}, {weight_read_15_reg_3297}}, {weight_read_14_reg_3292}}, {weight_read_13_reg_3287}}, {weight_read_12_reg_3282}}, {weight_read_11_reg_3277}}, {weight_read_10_reg_3272}}, {weight_read_9_reg_3267}}, {weight_read_8_reg_3262}}, {weight_read_7_reg_3257}}, {weight_read_6_reg_3252}}, {weight_read_5_reg_3247}}, {weight_read_4_reg_3242}}, {weight_read_3_reg_3237}}, {weight_read_2_reg_3232}}, {weight_read_1_reg_3227}};

assign weight_0_ack_in = weight_0_state[1'd1];

assign weight_0_load_A = (weight_0_state_cmp_full & ~weight_0_sel_wr);

assign weight_0_load_B = (weight_0_state_cmp_full & weight_0_sel_wr);

assign weight_0_sel = weight_0_sel_rd;

assign weight_0_state_cmp_full = ((weight_0_state != 2'd1) ? 1'b1 : 1'b0);

assign weight_0_vld_in = weight_TVALID;

assign weight_0_vld_out = weight_0_state[1'd0];

assign weight_TREADY = weight_0_state[1'd1];

endmodule //Layer3_Kernel
