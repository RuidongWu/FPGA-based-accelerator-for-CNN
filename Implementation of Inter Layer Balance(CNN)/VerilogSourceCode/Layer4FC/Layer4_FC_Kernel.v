// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Layer4_FC_Kernel,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xazu3eg-sfvc784-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.352000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=551,HLS_SYN_LUT=404,HLS_VERSION=2018_3}" *)

module Layer4_FC_Kernel (
        ap_clk,
        ap_rst_n,
        fc_weight_TDATA,
        fc_weight_TVALID,
        fc_weight_TREADY,
        w_Data_TDATA,
        w_Data_TVALID,
        w_Data_TREADY,
        Bias_Data
);

parameter    ap_ST_fsm_state1 = 19'd1;
parameter    ap_ST_fsm_state2 = 19'd2;
parameter    ap_ST_fsm_state3 = 19'd4;
parameter    ap_ST_fsm_state4 = 19'd8;
parameter    ap_ST_fsm_state5 = 19'd16;
parameter    ap_ST_fsm_state6 = 19'd32;
parameter    ap_ST_fsm_state7 = 19'd64;
parameter    ap_ST_fsm_state8 = 19'd128;
parameter    ap_ST_fsm_state9 = 19'd256;
parameter    ap_ST_fsm_state10 = 19'd512;
parameter    ap_ST_fsm_state11 = 19'd1024;
parameter    ap_ST_fsm_state12 = 19'd2048;
parameter    ap_ST_fsm_state13 = 19'd4096;
parameter    ap_ST_fsm_state14 = 19'd8192;
parameter    ap_ST_fsm_state15 = 19'd16384;
parameter    ap_ST_fsm_state16 = 19'd32768;
parameter    ap_ST_fsm_state17 = 19'd65536;
parameter    ap_ST_fsm_pp1_stage0 = 19'd131072;
parameter    ap_ST_fsm_state21 = 19'd262144;

input   ap_clk;
input   ap_rst_n;
input  [15:0] fc_weight_TDATA;
input   fc_weight_TVALID;
output   fc_weight_TREADY;
output  [63:0] w_Data_TDATA;
output   w_Data_TVALID;
input   w_Data_TREADY;
output  [159:0] Bias_Data;

 reg    ap_rst_n_inv;
reg   [15:0] fc_weight_0_data_out;
wire    fc_weight_0_vld_in;
wire    fc_weight_0_vld_out;
wire    fc_weight_0_ack_in;
reg    fc_weight_0_ack_out;
reg   [15:0] fc_weight_0_payload_A;
reg   [15:0] fc_weight_0_payload_B;
reg    fc_weight_0_sel_rd;
reg    fc_weight_0_sel_wr;
wire    fc_weight_0_sel;
wire    fc_weight_0_load_A;
wire    fc_weight_0_load_B;
reg   [1:0] fc_weight_0_state;
wire    fc_weight_0_state_cmp_full;
reg   [63:0] w_Data_1_data_out;
reg    w_Data_1_vld_in;
wire    w_Data_1_vld_out;
wire    w_Data_1_ack_in;
wire    w_Data_1_ack_out;
reg   [63:0] w_Data_1_payload_A;
reg   [63:0] w_Data_1_payload_B;
reg    w_Data_1_sel_rd;
reg    w_Data_1_sel_wr;
wire    w_Data_1_sel;
wire    w_Data_1_load_A;
wire    w_Data_1_load_B;
reg   [1:0] w_Data_1_state;
wire    w_Data_1_state_cmp_full;
reg   [159:0] Bias_Data_1_data_reg;
reg    Bias_Data_1_vld_reg;
reg    Bias_Data_1_vld_in;
reg   [8:0] kernel_buf_0_address0;
reg    kernel_buf_0_ce0;
reg    kernel_buf_0_we0;
wire   [15:0] kernel_buf_0_q0;
wire   [8:0] kernel_buf_0_address1;
reg    kernel_buf_0_ce1;
wire   [15:0] kernel_buf_0_q1;
reg   [8:0] kernel_buf_1_address0;
reg    kernel_buf_1_ce0;
reg    kernel_buf_1_we0;
wire   [15:0] kernel_buf_1_q0;
wire   [8:0] kernel_buf_1_address1;
reg    kernel_buf_1_ce1;
wire   [15:0] kernel_buf_1_q1;
reg    fc_weight_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [18:0] ap_CS_fsm;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond7_fu_209_p2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
reg    w_Data_TDATA_blk_n;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg    ap_enable_reg_pp1_iter2;
reg   [7:0] i2_reg_198;
wire   [7:0] i_1_fu_215_p2;
reg   [7:0] i_1_reg_322;
reg    ap_block_state2;
wire   [8:0] tmp_fu_221_p3;
reg   [8:0] tmp_reg_327;
wire   [63:0] tmp_4_fu_229_p1;
reg   [63:0] tmp_4_reg_332;
wire   [63:0] tmp_8_fu_239_p3;
reg   [63:0] tmp_8_reg_337;
reg   [15:0] fc_weight_read_reg_342;
reg   [15:0] fc_weight_read_1_reg_347;
reg   [15:0] fc_weight_read_2_reg_352;
reg   [15:0] fc_weight_read_3_reg_357;
reg   [15:0] fc_weight_read_4_reg_362;
reg   [15:0] fc_weight_read_5_reg_367;
reg   [15:0] fc_weight_read_6_reg_372;
reg   [15:0] fc_weight_read_7_reg_377;
reg   [15:0] fc_weight_read_8_reg_382;
wire   [159:0] tmp_1_fu_248_p11;
wire    ap_block_state18_pp1_stage0_iter0;
wire    ap_block_state19_pp1_stage0_iter1;
wire    ap_block_state20_pp1_stage0_iter2;
reg    ap_block_pp1_stage0_11001;
wire   [7:0] i_2_fu_294_p2;
reg   [7:0] i_2_reg_412;
reg    ap_enable_reg_pp1_iter0;
wire   [0:0] exitcond2_fu_300_p2;
reg   [0:0] exitcond2_reg_417;
wire   [63:0] tmp_6_fu_306_p5;
wire    ap_CS_fsm_state17;
reg    ap_block_pp1_stage0_subdone;
reg   [7:0] i_reg_187;
wire    ap_CS_fsm_state1;
reg   [7:0] ap_phi_mux_i2_phi_fu_202_p4;
wire   [63:0] tmp_s_fu_272_p1;
wire   [63:0] tmp_10_fu_284_p3;
wire    ap_block_pp1_stage0_01001;
wire   [8:0] tmp_7_fu_234_p2;
wire   [8:0] tmp_9_fu_264_p3;
wire   [8:0] tmp_3_fu_278_p2;
reg   [18:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 fc_weight_0_sel_rd = 1'b0;
#0 fc_weight_0_sel_wr = 1'b0;
#0 fc_weight_0_state = 2'd0;
#0 w_Data_1_sel_rd = 1'b0;
#0 w_Data_1_sel_wr = 1'b0;
#0 w_Data_1_state = 2'd0;
#0 Bias_Data_1_data_reg = 160'd0;
#0 Bias_Data_1_vld_reg = 1'b0;
#0 ap_CS_fsm = 19'd1;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
end

Layer4_FC_Kernel_bkb #(
    .DataWidth( 16 ),
    .AddressRange( 320 ),
    .AddressWidth( 9 ))
kernel_buf_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_buf_0_address0),
    .ce0(kernel_buf_0_ce0),
    .we0(kernel_buf_0_we0),
    .d0(fc_weight_0_data_out),
    .q0(kernel_buf_0_q0),
    .address1(kernel_buf_0_address1),
    .ce1(kernel_buf_0_ce1),
    .q1(kernel_buf_0_q1)
);

Layer4_FC_Kernel_bkb #(
    .DataWidth( 16 ),
    .AddressRange( 320 ),
    .AddressWidth( 9 ))
kernel_buf_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_buf_1_address0),
    .ce0(kernel_buf_1_ce0),
    .we0(kernel_buf_1_we0),
    .d0(fc_weight_0_data_out),
    .q0(kernel_buf_1_q0),
    .address1(kernel_buf_1_address1),
    .ce1(kernel_buf_1_ce1),
    .q1(kernel_buf_1_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((exitcond2_fu_300_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state17)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state17)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        fc_weight_0_sel_rd <= 1'b0;
    end else begin
        if (((fc_weight_0_ack_out == 1'b1) & (fc_weight_0_vld_out == 1'b1))) begin
            fc_weight_0_sel_rd <= ~fc_weight_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        fc_weight_0_sel_wr <= 1'b0;
    end else begin
        if (((fc_weight_0_ack_in == 1'b1) & (fc_weight_0_vld_in == 1'b1))) begin
            fc_weight_0_sel_wr <= ~fc_weight_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        fc_weight_0_state <= 2'd0;
    end else begin
        if ((((fc_weight_0_state == 2'd2) & (fc_weight_0_vld_in == 1'b0)) | ((fc_weight_0_state == 2'd3) & (fc_weight_0_vld_in == 1'b0) & (fc_weight_0_ack_out == 1'b1)))) begin
            fc_weight_0_state <= 2'd2;
        end else if ((((fc_weight_0_state == 2'd1) & (fc_weight_0_ack_out == 1'b0)) | ((fc_weight_0_state == 2'd3) & (fc_weight_0_ack_out == 1'b0) & (fc_weight_0_vld_in == 1'b1)))) begin
            fc_weight_0_state <= 2'd1;
        end else if (((~((fc_weight_0_vld_in == 1'b0) & (fc_weight_0_ack_out == 1'b1)) & ~((fc_weight_0_ack_out == 1'b0) & (fc_weight_0_vld_in == 1'b1)) & (fc_weight_0_state == 2'd3)) | ((fc_weight_0_state == 2'd1) & (fc_weight_0_ack_out == 1'b1)) | ((fc_weight_0_state == 2'd2) & (fc_weight_0_vld_in == 1'b1)))) begin
            fc_weight_0_state <= 2'd3;
        end else begin
            fc_weight_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        w_Data_1_sel_rd <= 1'b0;
    end else begin
        if (((w_Data_1_ack_out == 1'b1) & (w_Data_1_vld_out == 1'b1))) begin
            w_Data_1_sel_rd <= ~w_Data_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        w_Data_1_sel_wr <= 1'b0;
    end else begin
        if (((w_Data_1_ack_in == 1'b1) & (w_Data_1_vld_in == 1'b1))) begin
            w_Data_1_sel_wr <= ~w_Data_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        w_Data_1_state <= 2'd0;
    end else begin
        if ((((w_Data_1_state == 2'd2) & (w_Data_1_vld_in == 1'b0)) | ((w_Data_1_state == 2'd3) & (w_Data_1_vld_in == 1'b0) & (w_Data_1_ack_out == 1'b1)))) begin
            w_Data_1_state <= 2'd2;
        end else if ((((w_Data_1_state == 2'd1) & (w_Data_1_ack_out == 1'b0)) | ((w_Data_1_state == 2'd3) & (w_Data_1_ack_out == 1'b0) & (w_Data_1_vld_in == 1'b1)))) begin
            w_Data_1_state <= 2'd1;
        end else if (((~((w_Data_1_vld_in == 1'b0) & (w_Data_1_ack_out == 1'b1)) & ~((w_Data_1_ack_out == 1'b0) & (w_Data_1_vld_in == 1'b1)) & (w_Data_1_state == 2'd3)) | ((w_Data_1_state == 2'd1) & (w_Data_1_ack_out == 1'b1)) | ((w_Data_1_state == 2'd2) & (w_Data_1_vld_in == 1'b1)))) begin
            w_Data_1_state <= 2'd3;
        end else begin
            w_Data_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_reg_417 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i2_reg_198 <= i_2_reg_412;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        i2_reg_198 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((fc_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        i_reg_187 <= i_1_reg_322;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        i_reg_187 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == Bias_Data_1_vld_reg) & (1'b1 == Bias_Data_1_vld_in)) | ((1'b1 == 1'b1) & (1'b1 == Bias_Data_1_vld_in) & (1'b1 == Bias_Data_1_vld_reg)))) begin
        Bias_Data_1_data_reg <= tmp_1_fu_248_p11;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        exitcond2_reg_417 <= exitcond2_fu_300_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((fc_weight_0_load_A == 1'b1)) begin
        fc_weight_0_payload_A <= fc_weight_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((fc_weight_0_load_B == 1'b1)) begin
        fc_weight_0_payload_B <= fc_weight_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((fc_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        fc_weight_read_1_reg_347 <= fc_weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((fc_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        fc_weight_read_2_reg_352 <= fc_weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((fc_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        fc_weight_read_3_reg_357 <= fc_weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((fc_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        fc_weight_read_4_reg_362 <= fc_weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((fc_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        fc_weight_read_5_reg_367 <= fc_weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((fc_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        fc_weight_read_6_reg_372 <= fc_weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((fc_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
        fc_weight_read_7_reg_377 <= fc_weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((fc_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
        fc_weight_read_8_reg_382 <= fc_weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((fc_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        fc_weight_read_reg_342 <= fc_weight_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((~((exitcond7_fu_209_p2 == 1'd0) & (fc_weight_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        i_1_reg_322 <= i_1_fu_215_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i_2_reg_412 <= i_2_fu_294_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((exitcond7_fu_209_p2 == 1'd0) & (fc_weight_0_vld_out == 1'b0)) & (exitcond7_fu_209_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_4_reg_332[8 : 1] <= tmp_4_fu_229_p1[8 : 1];
        tmp_reg_327[8 : 1] <= tmp_fu_221_p3[8 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((fc_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_8_reg_337[8 : 1] <= tmp_8_fu_239_p3[8 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((w_Data_1_load_A == 1'b1)) begin
        w_Data_1_payload_A <= tmp_6_fu_306_p5;
    end
end

always @ (posedge ap_clk) begin
    if ((w_Data_1_load_B == 1'b1)) begin
        w_Data_1_payload_B <= tmp_6_fu_306_p5;
    end
end

always @ (*) begin
    if (((fc_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
        Bias_Data_1_vld_in = 1'b1;
    end else begin
        Bias_Data_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond2_reg_417 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_i2_phi_fu_202_p4 = i_2_reg_412;
    end else begin
        ap_phi_mux_i2_phi_fu_202_p4 = i2_reg_198;
    end
end

always @ (*) begin
    if ((((fc_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state15)) | ((fc_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state14)) | ((fc_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state13)) | ((fc_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state12)) | ((fc_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state11)) | ((fc_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state10)) | ((fc_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((fc_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((fc_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state7)) | ((fc_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((fc_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state5)) | ((fc_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((fc_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | (~((exitcond7_fu_209_p2 == 1'd0) & (fc_weight_0_vld_out == 1'b0)) & (exitcond7_fu_209_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        fc_weight_0_ack_out = 1'b1;
    end else begin
        fc_weight_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((fc_weight_0_sel == 1'b1)) begin
        fc_weight_0_data_out = fc_weight_0_payload_B;
    end else begin
        fc_weight_0_data_out = fc_weight_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((exitcond7_fu_209_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        fc_weight_TDATA_blk_n = fc_weight_0_state[1'd0];
    end else begin
        fc_weight_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        kernel_buf_0_address0 = tmp_s_fu_272_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        kernel_buf_0_address0 = tmp_8_fu_239_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_buf_0_address0 = tmp_4_fu_229_p1;
    end else begin
        kernel_buf_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((fc_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | (~((exitcond7_fu_209_p2 == 1'd0) & (fc_weight_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        kernel_buf_0_ce0 = 1'b1;
    end else begin
        kernel_buf_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        kernel_buf_0_ce1 = 1'b1;
    end else begin
        kernel_buf_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((fc_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | (~((exitcond7_fu_209_p2 == 1'd0) & (fc_weight_0_vld_out == 1'b0)) & (exitcond7_fu_209_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        kernel_buf_0_we0 = 1'b1;
    end else begin
        kernel_buf_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        kernel_buf_1_address0 = tmp_s_fu_272_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        kernel_buf_1_address0 = tmp_8_reg_337;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        kernel_buf_1_address0 = tmp_4_reg_332;
    end else begin
        kernel_buf_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((fc_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state5)) | ((fc_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state4)))) begin
        kernel_buf_1_ce0 = 1'b1;
    end else begin
        kernel_buf_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        kernel_buf_1_ce1 = 1'b1;
    end else begin
        kernel_buf_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((fc_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state5)) | ((fc_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state4)))) begin
        kernel_buf_1_we0 = 1'b1;
    end else begin
        kernel_buf_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((w_Data_1_sel == 1'b1)) begin
        w_Data_1_data_out = w_Data_1_payload_B;
    end else begin
        w_Data_1_data_out = w_Data_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        w_Data_1_vld_in = 1'b1;
    end else begin
        w_Data_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        w_Data_TDATA_blk_n = w_Data_1_state[1'd1];
    end else begin
        w_Data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if ((~((exitcond7_fu_209_p2 == 1'd0) & (fc_weight_0_vld_out == 1'b0)) & (exitcond7_fu_209_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if ((~((exitcond7_fu_209_p2 == 1'd0) & (fc_weight_0_vld_out == 1'b0)) & (exitcond7_fu_209_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((fc_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((fc_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((fc_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((fc_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((fc_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((fc_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((fc_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((fc_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((fc_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((fc_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((fc_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((fc_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((fc_weight_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Bias_Data = Bias_Data_1_data_reg;

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((w_Data_1_ack_in == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((w_Data_1_ack_in == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((w_Data_1_ack_in == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((w_Data_1_ack_in == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1)));
end

assign ap_block_state18_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2 = ((exitcond7_fu_209_p2 == 1'd0) & (fc_weight_0_vld_out == 1'b0));
end

assign ap_block_state20_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond2_fu_300_p2 = ((ap_phi_mux_i2_phi_fu_202_p4 == 8'd159) ? 1'b1 : 1'b0);

assign exitcond7_fu_209_p2 = ((i_reg_187 == 8'd160) ? 1'b1 : 1'b0);

assign fc_weight_0_ack_in = fc_weight_0_state[1'd1];

assign fc_weight_0_load_A = (fc_weight_0_state_cmp_full & ~fc_weight_0_sel_wr);

assign fc_weight_0_load_B = (fc_weight_0_state_cmp_full & fc_weight_0_sel_wr);

assign fc_weight_0_sel = fc_weight_0_sel_rd;

assign fc_weight_0_state_cmp_full = ((fc_weight_0_state != 2'd1) ? 1'b1 : 1'b0);

assign fc_weight_0_vld_in = fc_weight_TVALID;

assign fc_weight_0_vld_out = fc_weight_0_state[1'd0];

assign fc_weight_TREADY = fc_weight_0_state[1'd1];

assign i_1_fu_215_p2 = (i_reg_187 + 8'd1);

assign i_2_fu_294_p2 = (ap_phi_mux_i2_phi_fu_202_p4 + 8'd1);

assign kernel_buf_0_address1 = tmp_10_fu_284_p3;

assign kernel_buf_1_address1 = tmp_10_fu_284_p3;

assign tmp_10_fu_284_p3 = {{55'd0}, {tmp_3_fu_278_p2}};

assign tmp_1_fu_248_p11 = {{{{{{{{{{fc_weight_0_data_out}, {fc_weight_read_8_reg_382}}, {fc_weight_read_7_reg_377}}, {fc_weight_read_6_reg_372}}, {fc_weight_read_5_reg_367}}, {fc_weight_read_4_reg_362}}, {fc_weight_read_3_reg_357}}, {fc_weight_read_2_reg_352}}, {fc_weight_read_1_reg_347}}, {fc_weight_read_reg_342}};

assign tmp_3_fu_278_p2 = (tmp_9_fu_264_p3 | 9'd1);

assign tmp_4_fu_229_p1 = tmp_fu_221_p3;

assign tmp_6_fu_306_p5 = {{{{kernel_buf_1_q1}, {kernel_buf_1_q0}}, {kernel_buf_0_q1}}, {kernel_buf_0_q0}};

assign tmp_7_fu_234_p2 = (tmp_reg_327 | 9'd1);

assign tmp_8_fu_239_p3 = {{55'd0}, {tmp_7_fu_234_p2}};

assign tmp_9_fu_264_p3 = {{ap_phi_mux_i2_phi_fu_202_p4}, {1'd0}};

assign tmp_fu_221_p3 = {{i_reg_187}, {1'd0}};

assign tmp_s_fu_272_p1 = tmp_9_fu_264_p3;

assign w_Data_1_ack_in = w_Data_1_state[1'd1];

assign w_Data_1_ack_out = w_Data_TREADY;

assign w_Data_1_load_A = (w_Data_1_state_cmp_full & ~w_Data_1_sel_wr);

assign w_Data_1_load_B = (w_Data_1_state_cmp_full & w_Data_1_sel_wr);

assign w_Data_1_sel = w_Data_1_sel_rd;

assign w_Data_1_state_cmp_full = ((w_Data_1_state != 2'd1) ? 1'b1 : 1'b0);

assign w_Data_1_vld_out = w_Data_1_state[1'd0];

assign w_Data_TDATA = w_Data_1_data_out;

assign w_Data_TVALID = w_Data_1_state[1'd0];

always @ (posedge ap_clk) begin
    tmp_reg_327[0] <= 1'b0;
    tmp_4_reg_332[0] <= 1'b0;
    tmp_4_reg_332[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    tmp_8_reg_337[0] <= 1'b1;
    tmp_8_reg_337[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
end

endmodule //Layer4_FC_Kernel
